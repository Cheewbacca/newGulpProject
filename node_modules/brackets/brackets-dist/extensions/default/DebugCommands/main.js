eval('/*\n * Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, $, brackets, window */\n\ndefine(\'ErrorNotification\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n\n    var _               = brackets.getModule("thirdparty/lodash"),\n        AnimationUtils  = brackets.getModule("utils/AnimationUtils"),\n        ExtensionUtils  = brackets.getModule("utils/ExtensionUtils"),\n        Strings         = brackets.getModule("strings");\n\n    var $span      = null,\n        errorCount = 0,\n        _attached  = false,\n        _windowOnError,\n        _consoleError,\n        _consoleClear;\n\n    ExtensionUtils.loadStyleSheet(module, "styles.css");\n\n    function showDeveloperTools() {\n        try {\n            brackets.app.showDeveloperTools();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    function handleClick(event) {\n        if (event.shiftKey) {\n            window.console.clear();\n        } else {\n            showDeveloperTools();\n        }\n    }\n\n    function refreshIndicator() {\n        // never show 0 errors\n        if (!_attached || errorCount === 0) {\n            // hide notifier if it was attached previously\n            // but errorCount was cleared or it was disabled\n            if ($span) {\n                $span.parent().hide();\n            }\n            return;\n        }\n\n        // update span if it was created before\n        if ($span) {\n            $span.text(errorCount).parent().show();\n            return;\n        }\n\n        // create the span\n        $span = $("<span>").text(errorCount);\n        $("<div>")\n            .attr("id", "error-counter")\n            .attr("title", Strings.CMD_SHOW_DEV_TOOLS + "\\u2026")\n            .text(Strings.ERRORS + ": ")\n            .append($span)\n            .on("click", handleClick)\n            .insertBefore("#status-bar .spinner");\n    }\n\n    var blink = _.debounce(function () {\n        AnimationUtils.animateUsingClass($span.parent()[0], "flash", 1500);\n    }, 100);\n\n    function incErrorCount() {\n        errorCount++;\n        blink();\n        refreshIndicator();\n    }\n\n    function clearErrorCount() {\n        errorCount = 0;\n        refreshIndicator();\n    }\n\n    function attachFunctions() {\n        if (_attached) {\n            return;\n        }\n\n        _attached      = true;\n        _windowOnError = window.onerror;\n        _consoleError  = window.console.error;\n        _consoleClear  = window.console.clear;\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers.onerror\n        window.onerror = function (errorMsg, url, lineNumber) {\n            incErrorCount();\n            if (_windowOnError) {\n                return _windowOnError(errorMsg, url, lineNumber);\n            }\n            // return false means that we didn\'t handle this error and it should run the default handler\n            return false;\n        };\n\n        window.console.error = function () {\n            incErrorCount();\n            return _consoleError.apply(window.console, arguments);\n        };\n\n        window.console.clear = function () {\n            clearErrorCount();\n            return _consoleClear.apply(window.console, arguments);\n        };\n    }\n\n    function detachFunctions() {\n        if (!_attached) {\n            return;\n        }\n\n        _attached            = false;\n        window.onerror       = _windowOnError;\n        window.console.error = _consoleError;\n        window.console.clear = _consoleClear;\n    }\n\n    function toggle(bool) {\n        if (bool) {\n            attachFunctions();\n        } else {\n            detachFunctions();\n        }\n        refreshIndicator();\n    }\n\n    // Public API\n    exports.toggle = toggle;\n\n});\n\n//# sourceURL=/ErrorNotification.js'),eval('/*\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n\ndefine(\'NodeDebugUtils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n    \n    var NodeConnection = brackets.getModule("utils/NodeConnection");\n    \n    /**\n     * @private\n     * @type{NodeConnection}\n     * Connection to node for executing commands like enableDebugger\n     */\n    var _nodeConnection = null;\n\n    /**\n     * @private\n     * @type{Array.<{level: string, timestamp: Date, message: string}>}\n     * History of all log messages received from node (useful for inspecting\n     * from the developer tools console)\n     */\n    var _nodeLog = [];\n\n    /**\n     * Logs the state of the current node server to the console.\n     */\n    function logNodeState() {\n        if (brackets.app && brackets.app.getNodeState) {\n            brackets.app.getNodeState(function (err, port) {\n                if (err) {\n                    console.log("[NodeDebugUtils] Node is in error state " + err);\n                } else {\n                    console.log("[NodeDebugUtils] Node is listening on port " + port);\n                }\n            });\n        } else {\n            console.error("[NodeDebugUtils] No brackets.app.getNodeState function. Maybe you\'re running the wrong shell?");\n        }\n    }\n    \n    /**\n     * Sends a command to node to cause a restart.\n     */\n    function restartNode() {\n        try {\n            _nodeConnection.domains.base.restartNode();\n        } catch (e) {\n            alert("Failed trying to restart Node: " + e.message);\n        }\n    }\n\n    /**\n     * Sends a command to node to enable the debugger.\n     */\n    function enableDebugger() {\n        try {\n            _nodeConnection.domains.base.enableDebugger();\n        } catch (e) {\n            alert("Failed trying to enable Node debugger: " + e.message);\n        }\n    }\n    \n    /**\n     * @private\n     * Handler for log events from Node. Stores the messages in an internal array\n     * for possible inspection in the developer tools. Also forwards messages to\n     * the developer tools console.\n     * @param {jQuery.Event} evt The event object from jQuery (not used)\n     * @param {string} level The level of the log message. Can be anything, but\n     *   should be something like "log", "info", "warn", or "error"\n     * @param {string} timestamp Time the event occurred in node, as a string\n     * @param {string} message The log message\n     */\n    function handleLogEvent(evt, level, timestamp, message) {\n        // For some reason, stringifying and then parsing a Date through JSON turns\n        // it into a string.\n        var timestampAsDate = new Date(timestamp);\n        \n        _nodeLog.push({\n            level: level,\n            timestamp: timestampAsDate,\n            message: message\n        });\n    \n        var formattedMessage = "[node-" + level + " " + timestampAsDate.toLocaleTimeString() +  "] " + message;\n        \n        switch (level) {\n        case "info":\n        case "warn":\n        case "error":\n            console[level](formattedMessage);\n            break;\n        default:\n            console.log(formattedMessage);\n        }\n        \n    }\n    \n    _nodeConnection = new NodeConnection();\n    _nodeConnection.connect(true);\n    \n    // TODO: It would be nice to add a menu item that allows the user\n    // to enable/disable forwarding of node logs to the console.\n    _nodeConnection.on("base:log", handleLogEvent);\n    \n    exports.logNodeState = logNodeState;\n    exports.restartNode = restartNode;\n    exports.enableDebugger = enableDebugger;\n    \n});\n\n//# sourceURL=/NodeDebugUtils.js'),eval("/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js"),eval('define(\'text!htmlContent/perf-dialog.html\',[],function () { return \'<div class="modal">\\n    <div class="modal-header">\\n        <h1 class="dialog-title">Performance Data</h1>\\n    </div>\\n    <div class="modal-body no-padding">\\n        <table class="table table-striped">\\n            <thead><th>Operation</th><th class="right">Time (ms)</th></thead>\\n            <tbody>\\n                {{#perfData}}\\n                <tr>\\n                    <td>{{{testName}}}</td>\\n                    <td class="right">{{value}}</td>\\n                </tr>\\n                {{/perfData}}\\n            </tbody>\\n        </table>\\n    </div>\\n    <div class="modal-footer">\\n        <div class="left">\\n            <label for="brackets-perf-raw-data" class="inline">Raw data (copy paste out):</label>\\n            <textarea rows="1" id="brackets-perf-raw-data" style="margin: 0; width: 50px;">{{delimitedPerfData}}</textarea>        \\n        </div>\\n        <button class="dialog-button btn primary" data-button-id="ok">Close</button>\\n    </div>\\n</div>\\n\';});\n\n//# sourceURL=/text!htmlContent/perf-dialog.html'),eval('define(\'text!htmlContent/language-dialog.html\',[],function () { return \'<div class="switch-language modal">\\n    <div class="modal-header">\\n        <h1 class="dialog-title">{{Strings.LANGUAGE_TITLE}}</h1>\\n    </div>\\n    <div class="modal-body">\\n        <p class="dialog-message">\\n            {{Strings.LANGUAGE_MESSAGE}}\\n            <select>\\n                {{#languages}}\\n                <option value="{{language}}">{{label}}</option>\\n                {{/languages}}\\n            </select>\\n        </p>\\n    </div>\\n    <div class="modal-footer">\\n        <button class="dialog-button btn primary" data-button-id="ok" disabled>{{Strings.LANGUAGE_SUBMIT}}</button>\\n        <button class="dialog-button btn left" data-button-id="cancel">{{Strings.CANCEL}}</button>\\n    </div>\\n</div>\\n\';});\n\n//# sourceURL=/text!htmlContent/language-dialog.html'),eval('define(\'text!keyboard.json\',[],function () { return \'{\\n    "showDeveloperTools":  [\\n        {\\n            "key": "F12"\\n        },\\n        {\\n            "key": "Cmd-Opt-I",\\n            "platform": "mac"\\n        }\\n    ],\\n    "refreshWindow":  [\\n        {\\n            "key": "F5"\\n        },\\n        {\\n            "key": "Cmd-R",\\n            "platform": "mac"\\n        }\\n    ],\\n    "reloadWithoutUserExts":  [\\n        {\\n            "key": "Shift-F5"\\n        },\\n        {\\n            "key": "Cmd-Ctrl-R",\\n            "platform": "mac"\\n        }\\n    ]\\n}\';});\n\n//# sourceURL=/text!keyboard.json'),eval('/*\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\n/*global define, $, brackets, window, Mustache*/\n\ndefine(\'main\',[\'require\',\'exports\',\'module\',\'ErrorNotification\',\'NodeDebugUtils\',\'text!htmlContent/perf-dialog.html\',\'text!htmlContent/language-dialog.html\',\'text!keyboard.json\'],function (require, exports, module) {\n    "use strict";\n    \n    var _ = brackets.getModule("thirdparty/lodash");\n    \n    var Commands               = brackets.getModule("command/Commands"),\n        CommandManager         = brackets.getModule("command/CommandManager"),\n        Menus                  = brackets.getModule("command/Menus"),\n        FileSystem             = brackets.getModule("filesystem/FileSystem"),\n        FileUtils              = brackets.getModule("file/FileUtils"),\n        PerfUtils              = brackets.getModule("utils/PerfUtils"),\n        StringUtils            = brackets.getModule("utils/StringUtils"),\n        Dialogs                = brackets.getModule("widgets/Dialogs"),\n        Strings                = brackets.getModule("strings"),\n        PreferencesManager     = brackets.getModule("preferences/PreferencesManager"),\n        LocalizationUtils      = brackets.getModule("utils/LocalizationUtils"),\n        ErrorNotification      = require("ErrorNotification"),\n        NodeDebugUtils         = require("NodeDebugUtils"),\n        PerfDialogTemplate     = require("text!htmlContent/perf-dialog.html"),\n        LanguageDialogTemplate = require("text!htmlContent/language-dialog.html");\n    \n    var KeyboardPrefs = JSON.parse(require("text!keyboard.json"));\n    \n    /**\n     * Brackets Application Menu Constant\n     * @const {string}\n     */\n    var DEBUG_MENU = "debug-menu";\n    \n     /**\n      * Debug commands IDs\n      * @enum {string}\n      */\n    var DEBUG_REFRESH_WINDOW            = "debug.refreshWindow", // string must MATCH string in native code (brackets_extensions)\n        DEBUG_SHOW_DEVELOPER_TOOLS      = "debug.showDeveloperTools",\n        DEBUG_RUN_UNIT_TESTS            = "debug.runUnitTests",\n        DEBUG_SHOW_PERF_DATA            = "debug.showPerfData",\n        DEBUG_RELOAD_WITHOUT_USER_EXTS  = "debug.reloadWithoutUserExts",\n        DEBUG_NEW_BRACKETS_WINDOW       = "debug.newBracketsWindow",\n        DEBUG_SWITCH_LANGUAGE           = "debug.switchLanguage",\n        DEBUG_ENABLE_NODE_DEBUGGER      = "debug.enableNodeDebugger",\n        DEBUG_LOG_NODE_STATE            = "debug.logNodeState",\n        DEBUG_RESTART_NODE              = "debug.restartNode",\n        DEBUG_SHOW_ERRORS_IN_STATUS_BAR = "debug.showErrorsInStatusBar",\n        DEBUG_OPEN_BRACKETS_SOURCE      = "debug.openBracketsSource";\n\n    PreferencesManager.definePreference(DEBUG_SHOW_ERRORS_IN_STATUS_BAR, "boolean", false);\n    \n    function handleShowDeveloperTools() {\n        brackets.app.showDeveloperTools();\n    }\n    \n    // Implements the \'Run Tests\' menu to bring up the Jasmine unit test window\n    var _testWindow = null;\n    function _runUnitTests(spec) {\n        var queryString = spec ? "?spec=" + spec : "";\n        if (_testWindow && !_testWindow.closed) {\n            if (_testWindow.location.search !== queryString) {\n                _testWindow.location.href = "../test/SpecRunner.html" + queryString;\n            } else {\n                _testWindow.location.reload(true);\n            }\n        } else {\n            _testWindow = window.open("../test/SpecRunner.html" + queryString, "brackets-test", "width=" + $(window).width() + ",height=" + $(window).height());\n            _testWindow.location.reload(true); // if it had been opened earlier, force a reload because it will be cached\n        }\n    }\n    \n    function handleReload() {\n        CommandManager.execute(Commands.APP_RELOAD);\n    }\n    \n    function handleReloadWithoutUserExts() {\n        CommandManager.execute(Commands.APP_RELOAD_WITHOUT_EXTS);\n    }\n        \n    function handleNewBracketsWindow() {\n        window.open(window.location.href);\n    }\n    \n    function handleShowPerfData() {\n        var templateVars = {\n            delimitedPerfData: PerfUtils.getDelimitedPerfData(),\n            perfData: []\n        };\n        \n        var getValue = function (entry) {\n            // entry is either an Array or a number\n            if (Array.isArray(entry)) {\n                // For Array of values, return: minimum/average(count)/maximum/last\n                var i, e, avg, sum = 0, min = Number.MAX_VALUE, max = 0;\n                \n                for (i = 0; i < entry.length; i++) {\n                    e = entry[i];\n                    min = Math.min(min, e);\n                    sum += e;\n                    max = Math.max(max, e);\n                }\n                avg = Math.round(sum * 10 / entry.length) / 10; // tenth of a millisecond\n                return String(min) + "/" + String(avg) + "(" + entry.length + ")/" + String(max) + "/" + String(e);\n            } else {\n                return entry;\n            }\n        };\n        \n        var perfData = PerfUtils.getData();\n        _.forEach(perfData, function (value, testName) {\n            templateVars.perfData.push({\n                testName: StringUtils.breakableUrl(testName),\n                value:    getValue(value)\n            });\n        });\n        \n        var template = Mustache.render(PerfDialogTemplate, templateVars);\n        Dialogs.showModalDialogUsingTemplate(template);\n        \n        // Select the raw perf data field on click since select all doesn\'t \n        // work outside of the editor\n        $("#brackets-perf-raw-data").click(function () {\n            $(this).focus().select();\n        });\n    }\n    \n    function handleSwitchLanguage() {\n        var stringsPath = FileUtils.getNativeBracketsDirectoryPath() + "/nls";\n        \n        FileSystem.getDirectoryForPath(stringsPath).getContents(function (err, entries) {\n            if (!err) {\n                var $dialog,\n                    $submit,\n                    $select,\n                    locale,\n                    curLocale = (brackets.isLocaleDefault() ? null : brackets.getLocale()),\n                    languages = [];\n                \n                var setLanguage = function (event) {\n                    locale = $select.val();\n                    $submit.prop("disabled", locale === (curLocale || ""));\n                };\n\n                // inspect all children of dirEntry\n                entries.forEach(function (entry) {\n                    if (entry.isDirectory) {\n                        var match = entry.name.match(/^([a-z]{2})(-[a-z]{2})?$/);\n                        \n                        if (match) {\n                            var language = entry.name,\n                                label = match[1];\n                            \n                            if (match[2]) {\n                                label += match[2].toUpperCase();\n                            }\n                            \n                            languages.push({label: LocalizationUtils.getLocalizedLabel(label), language: language});\n                        }\n                    }\n                });\n                // add English (US), which is the root folder and should be sorted as well\n                languages.push({label: LocalizationUtils.getLocalizedLabel("en"),  language: "en"});\n\n                // sort the languages via their display name\n                languages.sort(function (lang1, lang2) {\n                    return lang1.label.localeCompare(lang2.label);\n                });\n\n                // add system default (which is placed on the very top)\n                languages.unshift({label: Strings.LANGUAGE_SYSTEM_DEFAULT, language: null});\n                \n                var template = Mustache.render(LanguageDialogTemplate, {languages: languages, Strings: Strings});\n                Dialogs.showModalDialogUsingTemplate(template).done(function (id) {\n                    if (id === Dialogs.DIALOG_BTN_OK && locale !== curLocale) {\n                        brackets.setLocale(locale);\n                        CommandManager.execute(Commands.APP_RELOAD);\n                    }\n                });\n                \n                $dialog = $(".switch-language.instance");\n                $submit = $dialog.find(".dialog-button[data-button-id=\'" + Dialogs.DIALOG_BTN_OK + "\']");\n                $select = $dialog.find("select");\n                \n                $select.on("change", setLanguage).val(curLocale);\n            }\n        });\n    }\n    \n    function enableRunTestsMenuItem() {\n        if (brackets.inBrowser) {\n            return;\n        }\n\n        // Check for the SpecRunner.html file\n        var file = FileSystem.getFileForPath(\n            FileUtils.getNativeBracketsDirectoryPath() + "/../test/SpecRunner.html"\n        );\n        \n        file.exists(function (err, exists) {\n            if (!err && exists) {\n                // If the SpecRunner.html file exists, enable the menu item.\n                // (menu item is already disabled, so no need to disable if the\n                // file doesn\'t exist).\n                CommandManager.get(DEBUG_RUN_UNIT_TESTS).setEnabled(true);\n            }\n        });\n    }\n    \n    function toggleErrorNotification(bool) {\n        var val,\n            oldPref = !!PreferencesManager.get(DEBUG_SHOW_ERRORS_IN_STATUS_BAR);\n\n        if (bool === undefined) {\n            val = !oldPref;\n        } else {\n            val = !!bool;\n        }\n\n        ErrorNotification.toggle(val);\n\n        // update menu\n        CommandManager.get(DEBUG_SHOW_ERRORS_IN_STATUS_BAR).setChecked(val);\n        if (val !== oldPref) {\n            PreferencesManager.set(DEBUG_SHOW_ERRORS_IN_STATUS_BAR, val);\n        }\n    }\n\n    function handleOpenBracketsSource() {\n        // Brackets source dir w/o the trailing src/ folder\n        var dir = FileUtils.getNativeBracketsDirectoryPath().replace(/\\/[^\\/]+$/, "/");\n        brackets.app.showOSFolder(dir);\n    }\n\n    /* Register all the command handlers */\n    \n    // Show Developer Tools (optionally enabled)\n    CommandManager.register(Strings.CMD_SHOW_DEV_TOOLS,             DEBUG_SHOW_DEVELOPER_TOOLS,     handleShowDeveloperTools)\n        .setEnabled(!!brackets.app.showDeveloperTools);\n    CommandManager.register(Strings.CMD_REFRESH_WINDOW,             DEBUG_REFRESH_WINDOW,           handleReload);\n    CommandManager.register(Strings.CMD_RELOAD_WITHOUT_USER_EXTS,   DEBUG_RELOAD_WITHOUT_USER_EXTS, handleReloadWithoutUserExts);\n    CommandManager.register(Strings.CMD_NEW_BRACKETS_WINDOW,        DEBUG_NEW_BRACKETS_WINDOW,      handleNewBracketsWindow);\n    \n    // Start with the "Run Tests" item disabled. It will be enabled later if the test file can be found.\n    CommandManager.register(Strings.CMD_RUN_UNIT_TESTS,       DEBUG_RUN_UNIT_TESTS,         _runUnitTests)\n        .setEnabled(false);\n    \n    CommandManager.register(Strings.CMD_SHOW_PERF_DATA,            DEBUG_SHOW_PERF_DATA,            handleShowPerfData);\n\n    // Open Brackets Source (optionally enabled)\n    CommandManager.register(Strings.CMD_OPEN_BRACKETS_SOURCE,      DEBUG_OPEN_BRACKETS_SOURCE,      handleOpenBracketsSource)\n        .setEnabled(!StringUtils.endsWith(decodeURI(window.location.pathname), "/www/index.html"));\n\n    CommandManager.register(Strings.CMD_SWITCH_LANGUAGE,           DEBUG_SWITCH_LANGUAGE,           handleSwitchLanguage);\n    CommandManager.register(Strings.CMD_SHOW_ERRORS_IN_STATUS_BAR, DEBUG_SHOW_ERRORS_IN_STATUS_BAR, toggleErrorNotification);\n    \n    // Node-related Commands\n    CommandManager.register(Strings.CMD_ENABLE_NODE_DEBUGGER, DEBUG_ENABLE_NODE_DEBUGGER,   NodeDebugUtils.enableDebugger);\n    CommandManager.register(Strings.CMD_LOG_NODE_STATE,       DEBUG_LOG_NODE_STATE,         NodeDebugUtils.logNodeState);\n    CommandManager.register(Strings.CMD_RESTART_NODE,         DEBUG_RESTART_NODE,           NodeDebugUtils.restartNode);\n    \n    enableRunTestsMenuItem();\n    toggleErrorNotification(PreferencesManager.get(DEBUG_SHOW_ERRORS_IN_STATUS_BAR));\n\n    PreferencesManager.on("change", DEBUG_SHOW_ERRORS_IN_STATUS_BAR, function () {\n        toggleErrorNotification(PreferencesManager.get(DEBUG_SHOW_ERRORS_IN_STATUS_BAR));\n    });\n    \n    /*\n     * Debug menu\n     */\n    var menu = Menus.addMenu(Strings.DEBUG_MENU, DEBUG_MENU, Menus.BEFORE, Menus.AppMenuBar.HELP_MENU);\n    menu.addMenuItem(DEBUG_SHOW_DEVELOPER_TOOLS, KeyboardPrefs.showDeveloperTools);\n    menu.addMenuItem(DEBUG_REFRESH_WINDOW, KeyboardPrefs.refreshWindow);\n    menu.addMenuItem(DEBUG_RELOAD_WITHOUT_USER_EXTS, KeyboardPrefs.reloadWithoutUserExts);\n    menu.addMenuItem(DEBUG_NEW_BRACKETS_WINDOW);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_SWITCH_LANGUAGE);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_RUN_UNIT_TESTS);\n    menu.addMenuItem(DEBUG_SHOW_PERF_DATA);\n    menu.addMenuItem(DEBUG_OPEN_BRACKETS_SOURCE);\n    menu.addMenuDivider();\n    menu.addMenuItem(DEBUG_ENABLE_NODE_DEBUGGER);\n    menu.addMenuItem(DEBUG_LOG_NODE_STATE);\n    menu.addMenuItem(DEBUG_RESTART_NODE);\n    menu.addMenuItem(DEBUG_SHOW_ERRORS_IN_STATUS_BAR);\n    menu.addMenuItem(Commands.FILE_OPEN_PREFERENCES); // this command is defined in core, but exposed only in Debug menu for now\n    menu.addMenuItem(Commands.FILE_OPEN_KEYMAP);      // this command is defined in core, but exposed only in Debug menu for now\n    \n    // exposed for convenience, but not official API\n    exports._runUnitTests = _runUnitTests;\n});\n\n//# sourceURL=/main.js');

//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map