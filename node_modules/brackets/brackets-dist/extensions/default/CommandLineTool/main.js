eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true,  regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets, appshell */\n\ndefine(\'main\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n    \n    var Menus                   = brackets.getModule("command/Menus"),\n        CommandManager          = brackets.getModule("command/CommandManager"),\n        Strings                 = brackets.getModule("strings"),\n        Dialogs                 = brackets.getModule("widgets/Dialogs"),\n        DefaultDialogs          = brackets.getModule("widgets/DefaultDialogs"),\n        StringUtils             = brackets.getModule("utils/StringUtils");\n    \n    function _mapCLToolsErrorCodeToString(errorCode) {\n        \n        var errorString;\n        switch (errorCode) {\n        case appshell.app.ERR_CL_TOOLS_RMFAILED:\n            errorString = Strings.ERROR_CLTOOLS_RMFAILED;\n            break;\n        case appshell.app.ERR_CL_TOOLS_MKDIRFAILED:\n            errorString = Strings.ERROR_CLTOOLS_MKDIRFAILED;\n            break;\n        case appshell.app.ERR_CL_TOOLS_SYMLINKFAILED:\n            errorString = Strings.ERROR_CLTOOLS_LNFAILED;\n            break;\n        case appshell.app.ERR_CL_TOOLS_SERVFAILED:\n            errorString = Strings.ERROR_CLTOOLS_SERVFAILED;\n            break;\n        case appshell.app.ERR_CL_TOOLS_NOTSUPPORTED:\n            errorString = Strings.ERROR_CLTOOLS_NOTSUPPORTED;\n            break;\n        default:\n            errorString = StringUtils.format(Strings.GENERIC_ERROR, errorCode);\n            break;\n        }\n        \n        return errorString;\n    }\n    \n    function handleInstallCommandResult(errorCode) {\n        var dialog;\n        \n        if (errorCode === appshell.app.ERR_CL_TOOLS_CANCELLED) {\n            // The user has cancelled the authentication dialog.\n            return;\n        } else if (errorCode === appshell.app.NO_ERROR) {\n            // flag success message here.\n            dialog = Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_INFO,\n                Strings.CREATING_LAUNCH_SCRIPT_TITLE,\n                Strings.LAUNCH_SCRIPT_CREATE_SUCCESS\n            );\n            Dialogs.addLinkTooltips(dialog);\n\n        } else {\n            var errorString = _mapCLToolsErrorCodeToString(errorCode);\n            var errMsg = StringUtils.format(Strings.ERROR_CREATING_LAUNCH_SCRIPT, errorString);\n            dialog = Dialogs.showModalDialog(\n                DefaultDialogs.DIALOG_ID_ERROR,\n                Strings.CREATING_LAUNCH_SCRIPT_TITLE,\n                errMsg\n            );\n            Dialogs.addLinkTooltips(dialog);\n        }\n    }\n    \n    function handleInstallCommand() {\n        appshell.app.installCommandLine(function (serviceCode) {\n            handleInstallCommandResult(serviceCode);\n        });\n    }\n    \n    // Register the command and add the menu to file menu.\n    function addCommand() {\n        \n        var menu                    = Menus.getMenu(Menus.AppMenuBar.FILE_MENU),\n            INSTALL_COMMAND_SCRIPT  = "file.installCommandScript";\n        \n        CommandManager.register(Strings.CMD_LAUNCH_SCRIPT_MAC, INSTALL_COMMAND_SCRIPT, handleInstallCommand);\n        menu.addMenuDivider();\n        menu.addMenuItem(INSTALL_COMMAND_SCRIPT);\n    }\n    \n    // Append this menu only for Mac.\n    if (brackets.platform === "mac") {\n        addCommand();\n    }\n\n});\n\n//# sourceURL=/main.js');
//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map