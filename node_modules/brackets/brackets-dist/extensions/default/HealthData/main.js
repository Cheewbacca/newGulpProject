eval("/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js"),eval('define(\'text!htmlContent/healthdata-preview-dialog.html\',[],function () { return \'<div class="health-data-preview modal">\\n    <div class="modal-header">\\n        <h1 class="dialog-title">{{Strings.HEALTH_DATA_PREVIEW}}</h1>\\n    </div>\\n    <div class="modal-body">\\n        <div class="dialog-message">{{{Strings.HEALTH_DATA_PREVIEW_INTRO}}}</div>\\n\\t\\t<div class="dialog-message">\\n\\t\\t\\t<label>\\n\\t            <input type="checkbox" data-target="hdPref" {{#hdPref}}checked{{/hdPref}} />\\n\\t            {{Strings.HEALTH_DATA_DO_TRACK}}\\n\\t        </label>\\n    \\t</div>\\n\\t    <div class="dialog-message preview-content-container">\\n\\t        <p class="preview-content">{{{content}}}</p>\\n\\t    </div>\\n\\t</div>\\n    <div class="modal-footer">\\n         <button class="dialog-button btn" data-button-id="cancel">{{Strings.CANCEL}}</button>\\n        <button class="dialog-button btn primary" data-button-id="save">{{Strings.DONE}}</button>\\n    </div>\\n</div>\\n\';});\n\n//# sourceURL=/text!htmlContent/healthdata-preview-dialog.html'),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets, $ */\n\ndefine(\'HealthDataUtils\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n    \n    var ExtensionManager = brackets.getModule("extensibility/ExtensionManager"),\n        _                = brackets.getModule("thirdparty/lodash");\n   \n\n    /**\n     * @private\n     * Check for the extensions whether it is user installed and present in the registry.\n     * @param {Object} extensions synchronized with registry object\n     * return {Array} userInstalledExtensions\n    */\n    function getUserExtensionsPresentInRegistry(extensions) {\n        var userInstalledExtensions = [];\n        _.forEach(extensions, function (extension, extensionId) {\n            if (extension && extension.installInfo && extension.installInfo.locationType === ExtensionManager.LOCATION_USER && extension.registryInfo) {\n                userInstalledExtensions.push({"name" : extensionId, "version" : extension.installInfo.metadata.version});\n            }\n        });\n        \n        return userInstalledExtensions;\n    }\n    /**\n     * Utility function to get the user installed extension which are present in the registry\n     */\n    function getUserInstalledExtensions() {\n        var result = new $.Deferred();\n\n        if (!ExtensionManager.hasDownloadedRegistry) {\n            ExtensionManager.downloadRegistry().done(function () {\n                result.resolve(getUserExtensionsPresentInRegistry(ExtensionManager.extensions));\n            })\n                .fail(function () {\n                    result.resolve([]);\n                });\n        } else {\n            result.resolve(getUserExtensionsPresentInRegistry(ExtensionManager.extensions));\n        }\n        \n        return result.promise();\n    }\n    \n    exports.getUserInstalledExtensions   = getUserInstalledExtensions;\n});\n//# sourceURL=/HealthDataUtils.js'),eval("//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n(function() {\n  var _global = this;\n\n  // Unique ID creation requires a high quality random # generator.  We feature\n  // detect to determine the best RNG source, normalizing to a function that\n  // returns 128-bits of randomness, since that's what's usually required\n  var _rng;\n\n  // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html\n  //\n  // Moderately fast, high quality\n  if (typeof(_global.require) == 'function') {\n    try {\n      var _rb = _global.require('crypto').randomBytes;\n      _rng = _rb && function() {return _rb(16);};\n    } catch(e) {}\n  }\n\n  if (!_rng && _global.crypto && crypto.getRandomValues) {\n    // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n    //\n    // Moderately fast, high quality\n    var _rnds8 = new Uint8Array(16);\n    _rng = function whatwgRNG() {\n      crypto.getRandomValues(_rnds8);\n      return _rnds8;\n    };\n  }\n\n  if (!_rng) {\n    // Math.random()-based (RNG)\n    //\n    // If all else fails, use Math.random().  It's fast, but is of unspecified\n    // quality.\n    var  _rnds = new Array(16);\n    _rng = function() {\n      for (var i = 0, r; i < 16; i++) {\n        if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n        _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n      }\n\n      return _rnds;\n    };\n  }\n\n  // Buffer class to use\n  var BufferClass = typeof(_global.Buffer) == 'function' ? _global.Buffer : Array;\n\n  // Maps for number <-> hex string conversion\n  var _byteToHex = [];\n  var _hexToByte = {};\n  for (var i = 0; i < 256; i++) {\n    _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n    _hexToByte[_byteToHex[i]] = i;\n  }\n\n  // **`parse()` - Parse a UUID into it's component bytes**\n  function parse(s, buf, offset) {\n    var i = (buf && offset) || 0, ii = 0;\n\n    buf = buf || [];\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n      if (ii < 16) { // Don't overflow!\n        buf[i + ii++] = _hexToByte[oct];\n      }\n    });\n\n    // Zero out remaining bytes if string was short\n    while (ii < 16) {\n      buf[i + ii++] = 0;\n    }\n\n    return buf;\n  }\n\n  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**\n  function unparse(buf, offset) {\n    var i = offset || 0, bth = _byteToHex;\n    return  bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] + '-' +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]] +\n            bth[buf[i++]] + bth[buf[i++]];\n  }\n\n  // **`v1()` - Generate time-based UUID**\n  //\n  // Inspired by https://github.com/LiosK/UUID.js\n  // and http://docs.python.org/library/uuid.html\n\n  // random #'s we need to init node and clockseq\n  var _seedBytes = _rng();\n\n  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n  var _nodeId = [\n    _seedBytes[0] | 0x01,\n    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n  ];\n\n  // Per 4.2.2, randomize (14 bit) clockseq\n  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n  // Previous uuid creation time\n  var _lastMSecs = 0, _lastNSecs = 0;\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v1(options, buf, offset) {\n    var i = buf && offset || 0;\n    var b = buf || [];\n\n    options = options || {};\n\n    var clockseq = options.clockseq != null ? options.clockseq : _clockseq;\n\n    // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n    var msecs = options.msecs != null ? options.msecs : new Date().getTime();\n\n    // Per 4.2.1.2, use count of uuid's generated during the current clock\n    // cycle to simulate higher resolution clock\n    var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;\n\n    // Time since last uuid creation (in msecs)\n    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n    // Per 4.2.1.2, Bump clockseq on clock regression\n    if (dt < 0 && options.clockseq == null) {\n      clockseq = clockseq + 1 & 0x3fff;\n    }\n\n    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n    // time interval\n    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n      nsecs = 0;\n    }\n\n    // Per 4.2.1.2 Throw error if too many uuids are requested\n    if (nsecs >= 10000) {\n      throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n    }\n\n    _lastMSecs = msecs;\n    _lastNSecs = nsecs;\n    _clockseq = clockseq;\n\n    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n    msecs += 12219292800000;\n\n    // `time_low`\n    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n    b[i++] = tl >>> 24 & 0xff;\n    b[i++] = tl >>> 16 & 0xff;\n    b[i++] = tl >>> 8 & 0xff;\n    b[i++] = tl & 0xff;\n\n    // `time_mid`\n    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n    b[i++] = tmh >>> 8 & 0xff;\n    b[i++] = tmh & 0xff;\n\n    // `time_high_and_version`\n    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n    b[i++] = tmh >>> 16 & 0xff;\n\n    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n    b[i++] = clockseq >>> 8 | 0x80;\n\n    // `clock_seq_low`\n    b[i++] = clockseq & 0xff;\n\n    // `node`\n    var node = options.node || _nodeId;\n    for (var n = 0; n < 6; n++) {\n      b[i + n] = node[n];\n    }\n\n    return buf ? buf : unparse(b);\n  }\n\n  // **`v4()` - Generate random UUID**\n\n  // See https://github.com/broofa/node-uuid for API details\n  function v4(options, buf, offset) {\n    // Deprecated - 'format' argument, as supported in v1.2\n    var i = buf && offset || 0;\n\n    if (typeof(options) == 'string') {\n      buf = options == 'binary' ? new BufferClass(16) : null;\n      options = null;\n    }\n    options = options || {};\n\n    var rnds = options.random || (options.rng || _rng)();\n\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n    // Copy bytes to buffer, if provided\n    if (buf) {\n      for (var ii = 0; ii < 16; ii++) {\n        buf[i + ii] = rnds[ii];\n      }\n    }\n\n    return buf || unparse(rnds);\n  }\n\n  // Export public API\n  var uuid = v4;\n  uuid.v1 = v1;\n  uuid.v4 = v4;\n  uuid.parse = parse;\n  uuid.unparse = unparse;\n  uuid.BufferClass = BufferClass;\n\n  if (typeof(module) != 'undefined' && module.exports) {\n    // Publish as node.js module\n    module.exports = uuid;\n  } else  if (typeof define === 'function' && define.amd) {\n    // Publish as AMD module\n    define('thirdparty/uuid',[],function() {return uuid;});\n \n\n  } else {\n    // Publish as global (in browsers)\n    var _previousRoot = _global.uuid;\n\n    // **`noConflict()` - (browser only) to reset global 'uuid' var**\n    uuid.noConflict = function() {\n      _global.uuid = _previousRoot;\n      return uuid;\n    };\n\n    _global.uuid = uuid;\n  }\n}).call(this);\n//# sourceURL=/thirdparty/uuid.js"),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, $, brackets, console */\n\ndefine(\'HealthDataManager\',[\'require\',\'exports\',\'module\',\'HealthDataUtils\',\'thirdparty/uuid\'],function (require, exports, module) {\n    "use strict";\n\n    var AppInit             = brackets.getModule("utils/AppInit"),\n        PreferencesManager  = brackets.getModule("preferences/PreferencesManager"),\n        UrlParams           = brackets.getModule("utils/UrlParams").UrlParams,\n        HealthDataUtils     = require("HealthDataUtils"),\n        uuid                = require("thirdparty/uuid");\n\n    var prefs = PreferencesManager.getExtensionPrefs("healthData");\n\n    prefs.definePreference("healthDataTracking", "boolean", true);\n\n    var ONE_MINUTE = 60 * 1000,\n        ONE_DAY = 24 * 60 * ONE_MINUTE,\n        FIRST_LAUNCH_SEND_DELAY = 30 * ONE_MINUTE,\n        timeoutVar;\n\n    var params = new UrlParams();\n    params.parse();\n\n    /**\n     * Get the Health Data which will be sent to the server. Initially it is only one time data.\n     */\n    function getHealthData() {\n        var result = new $.Deferred(),\n            oneTimeHealthData = {};\n\n        var userUuid = PreferencesManager.getViewState("UUID");\n\n        if (!userUuid) {\n            userUuid = uuid.v4();\n            PreferencesManager.setViewState("UUID", userUuid);\n        }\n\n        oneTimeHealthData.uuid = userUuid;\n        oneTimeHealthData.snapshotTime = Date.now();\n        oneTimeHealthData.os = brackets.platform;\n        oneTimeHealthData.userAgent = navigator.userAgent;\n        oneTimeHealthData.osLanguage = brackets.app.language;\n        oneTimeHealthData.bracketsLanguage = brackets.getLocale();\n        oneTimeHealthData.bracketsVersion = brackets.metadata.version;\n\n        HealthDataUtils.getUserInstalledExtensions()\n            .done(function (userInstalledExtensions) {\n                oneTimeHealthData.installedExtensions = userInstalledExtensions;\n            })\n            .always(function () {\n                return result.resolve(oneTimeHealthData);\n            });\n\n        return result.promise();\n    }\n\n    /**\n     * Send data to the server\n     */\n    function sendHealthDataToServer() {\n        var result = new $.Deferred();\n        \n        getHealthData().done(function (healthData) {\n            \n            var url = brackets.config.healthDataServerURL,\n                data = JSON.stringify(healthData);\n\n            $.ajax({\n                url: url,\n                type: "POST",\n                data: data,\n                dataType: "text",\n                contentType: "text/plain"\n            })\n                .done(function () {\n                    result.resolve();\n                })\n                .fail(function (jqXHR, status, errorThrown) {\n                    console.error("Error in sending Health Data. Response : " + jqXHR.responseText + ". Status : " + status + ". Error : " + errorThrown);\n                    result.reject();\n                });\n        })\n            .fail(function () {\n                result.reject();\n            });\n\n        return result.promise();\n    }\n\n    /*\n     * Check if the Health Data is to be sent to the server. If the user has enabled tracking, Health Data will be sent once every 24 hours.\n     * Send Health Data to the server if the period is more than 24 hours.\n     * We are sending the data as soon as the user launches brackets. The data will be sent to the server only after the notification dialog \n     * for opt-out/in is closed.\n     */\n    function checkHealthDataSend() {\n        var result = new $.Deferred(),\n            isHDTracking = prefs.get("healthDataTracking");\n        \n        window.clearTimeout(timeoutVar);\n        if (isHDTracking) {\n            var nextTimeToSend = PreferencesManager.getViewState("nextHealthDataSendTime"),\n                currentTime = Date.now();\n            \n            // Never send data before FIRST_LAUNCH_SEND_DELAY has ellapsed on a fresh install. This gives the user time to read the notification\n            // popup, learn more, and opt out if desired\n            if (!nextTimeToSend) {\n                nextTimeToSend = currentTime + FIRST_LAUNCH_SEND_DELAY;\n                PreferencesManager.setViewState("nextHealthDataSendTime", nextTimeToSend);\n                // don\'t return yet though - still want to set the timeout below\n            }\n\n            if (currentTime >= nextTimeToSend) {\n                // Bump up nextHealthDataSendTime now to avoid any chance of sending data again before 24 hours, e.g. if the server request fails\n                // or the code below crashes\n                PreferencesManager.setViewState("nextHealthDataSendTime", currentTime + ONE_DAY);\n                \n                sendHealthDataToServer()\n                    .done(function () {\n                        result.resolve();\n                    })\n                    .fail(function () {\n                        result.reject();\n                    })\n                    .always(function () {\n                        timeoutVar = setTimeout(checkHealthDataSend, ONE_DAY);\n                    });\n\n            } else {\n                timeoutVar = setTimeout(checkHealthDataSend, nextTimeToSend - currentTime);\n                result.reject();\n            }\n        } else {\n            result.reject();\n        }\n\n        return result.promise();\n    }\n\n    prefs.on("change", "healthDataTracking", function () {\n        checkHealthDataSend();\n    });\n\n    window.addEventListener("online", function () {\n        checkHealthDataSend();\n    });\n\n    window.addEventListener("offline", function () {\n        window.clearTimeout(timeoutVar);\n    });\n\n    AppInit.appReady(function () {\n        checkHealthDataSend();\n    });\n\n    exports.getHealthData = getHealthData;\n    exports.checkHealthDataSend = checkHealthDataSend;\n});\n//# sourceURL=/HealthDataManager.js'),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, Mustache, brackets, $ */\n\ndefine(\'HealthDataPreview\',[\'require\',\'exports\',\'module\',\'text!htmlContent/healthdata-preview-dialog.html\',\'HealthDataManager\'],function (require, exports, module) {\n    "use strict";\n    \n    var _                       = brackets.getModule("thirdparty/lodash"),\n        PreferencesManager      = brackets.getModule("preferences/PreferencesManager"),\n        Strings                 = brackets.getModule("strings"),\n        Dialogs                 = brackets.getModule("widgets/Dialogs"),\n        ExtensionUtils          = brackets.getModule("utils/ExtensionUtils"),\n        \n        HealthDataPreviewDialog = require("text!htmlContent/healthdata-preview-dialog.html"),\n        HealthDataManager       = require("HealthDataManager");\n\n    var prefs = PreferencesManager.getExtensionPrefs("healthData");\n    \n    ExtensionUtils.loadStyleSheet(module, "styles.css");\n    \n    /** \n     * Show the dialog for previewing the Health Data that will be sent.\n     */\n    function previewHealthData() {\n        var result = new $.Deferred();\n        \n        HealthDataManager.getHealthData().done(function (healthDataObject) {\n            var content = JSON.stringify(healthDataObject, null, 4);\n            content = _.escape(content);\n            content = content.replace(/ /g, "&nbsp;");\n            content = content.replace(/(?:\\r\\n|\\r|\\n)/g, "<br />");\n\n            var hdPref   = prefs.get("healthDataTracking"),\n                template = Mustache.render(HealthDataPreviewDialog, {Strings: Strings, content: content, hdPref: hdPref}),\n                $template = $(template);\n            \n            Dialogs.addLinkTooltips($template);\n            \n            Dialogs.showModalDialogUsingTemplate($template).done(function (id) {\n     \n                if (id === "save") {\n                    var newHDPref = $template.find("[data-target]:checkbox").is(":checked");\n                    if (hdPref !== newHDPref) {\n                        prefs.set("healthDataTracking", newHDPref);\n                    }\n                }\n            });\n\n            return result.resolve();\n        });\n        \n        return result.promise();\n    }\n    \n    exports.previewHealthData = previewHealthData;\n});\n\n//# sourceURL=/HealthDataPreview.js'),eval('define(\'text!htmlContent/healthdata-popup.html\',[],function () { return \'<div id="healthdata-firstlaunch-popup" class="healthdata-firstlaunch-container">\\n    <div>\\n        <p class=\\\'healthdata-popup-close-button\\\'>×</p>\\n    </div>\\n    <div >\\n        <p class="healthdata-dialog-title">{{Strings.HEALTH_FIRST_POPUP_TITLE}}</p>\\n    </div>\\n    <div>\\n        <p class="healthdata-dialog-message">{{{Strings.HEALTH_DATA_NOTIFICATION_MESSAGE}}}</p>\\n    </div>\\n</div>\\n\\n\';});\n\n//# sourceURL=/text!htmlContent/healthdata-popup.html'),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global brackets, define, Mustache, $*/\n\n\ndefine(\'HealthDataPopup\',[\'require\',\'exports\',\'module\',\'text!htmlContent/healthdata-popup.html\'],function (require, exports, module) {\n    "use strict";\n\n    // Load dependent modules\n    var MainViewManager             = brackets.getModule("view/MainViewManager"),\n        Dialogs                     = brackets.getModule("widgets/Dialogs"),\n        Strings                     = brackets.getModule("strings"),\n        HealthDataNotificationHtml  = require("text!htmlContent/healthdata-popup.html");\n\n    function closeCallout() {\n        var $callout = $("#healthdata-firstlaunch-popup");\n\n        if (!$callout.hasClass("animateOpen")) {\n            return;\n        }\n\n        // Animate out\n        $callout.removeClass("animateOpen");\n        $callout\n            .addClass("animateClose")\n            .one("webkitTransitionEnd", function () {\n                // Normally we\'d use AnimationUtils for this, but due to an apparent Chrome bug, calling .is(":hidden")\n                // causes the animation not to play (even though it returns false and that early-exit branch isn\'t taken).\n                $callout.removeClass("animateClose");\n                $callout.remove();\n            });\n    }\n\n    function showFirstLaunchTooltip() {\n        var TOP_MARGIN = 7,\n            popupTop = $("#editor-holder").offset().top + TOP_MARGIN,\n            result = new $.Deferred(),\n            $firstLaunchPopup = $(Mustache.render(HealthDataNotificationHtml, {"Strings": Strings}));\n        \n        Dialogs.addLinkTooltips($firstLaunchPopup);\n        \n        $firstLaunchPopup.appendTo("body").hide()\n                         .css("top", popupTop)\n                         .find(".healthdata-popup-close-button").click(function () {\n                closeCallout();\n                MainViewManager.focusActivePane();\n                result.resolve();\n            });\n        $firstLaunchPopup.show();\n\n        // Animate in\n        // Must wait a cycle for the "display: none" to drop out before CSS transitions will work\n        setTimeout(function () {\n            $("#healthdata-firstlaunch-popup").addClass("animateOpen");\n        }, 0);\n\n        return result.promise();\n    }\n\n    exports.showFirstLaunchTooltip          = showFirstLaunchTooltip;\n});\n\n//# sourceURL=/HealthDataPopup.js'),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n\ndefine(\'HealthDataNotification\',[\'require\',\'exports\',\'module\',\'HealthDataPreview\',\'HealthDataPopup\'],function (require, exports, module) {\n    "use strict";\n    \n    var AppInit                      = brackets.getModule("utils/AppInit"),\n        PreferencesManager           = brackets.getModule("preferences/PreferencesManager"),\n        UrlParams                    = brackets.getModule("utils/UrlParams").UrlParams,\n        HealthDataPreview            = require("HealthDataPreview"),\n        HealthDataPopup              = require("HealthDataPopup");\n    \n    // Parse URL params\n    var params = new UrlParams();\n\n    function handleHealthDataStatistics() {\n        HealthDataPreview.previewHealthData();\n    }\n    \n    AppInit.appReady(function () {\n        params.parse();\n        // Check whether the notification dialog should be shown. It will be shown one time. Does not check in testing environment.\n        if (!params.get("testEnvironment")) {\n            var alreadyShown = PreferencesManager.getViewState("healthDataNotificationShown");\n\n            if (!alreadyShown) {\n                HealthDataPopup.showFirstLaunchTooltip()\n                    .done(function () {\n                        PreferencesManager.setViewState("healthDataNotificationShown", true);\n                    });\n            }\n        }\n    });\n    \n    \n    exports.handleHealthDataStatistics       = handleHealthDataStatistics;\n});\n\n//# sourceURL=/HealthDataNotification.js'),eval('/*\n * Copyright (c) 2015 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true,  regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets*/\n\ndefine(\'main\',[\'require\',\'exports\',\'module\',\'HealthDataNotification\',\'HealthDataManager\',\'HealthDataPopup\',\'HealthDataPreview\'],function (require, exports, module) {\n    "use strict";\n    \n    var AppInit                 = brackets.getModule("utils/AppInit"),\n        Menus                   = brackets.getModule("command/Menus"),\n        CommandManager          = brackets.getModule("command/CommandManager"),\n        Strings                 = brackets.getModule("strings"),\n        Commands                = brackets.getModule("command/Commands"),\n        \n        HealthDataNotification  = require("HealthDataNotification"),  // self-initializes to show first-launch notification\n        HealthDataManager       = require("HealthDataManager"),  // self-initializes timer to send data\n        HealthDataPopup         = require("HealthDataPopup");\n    \n    var menu            = Menus.getMenu(Menus.AppMenuBar.HELP_MENU),\n        healthDataCmdId = "healthData.healthDataStatistics";\n    \n    // Handles the command execution for Health Data menu item\n    function handleHealthDataStatistics() {\n        HealthDataNotification.handleHealthDataStatistics();\n    }\n    \n    // Register the command and add the menu item for the Health Data Statistics\n    function addCommand() {\n        CommandManager.register(Strings.CMD_HEALTH_DATA_STATISTICS, healthDataCmdId, handleHealthDataStatistics);\n    \n        menu.addMenuItem(healthDataCmdId, "", Menus.AFTER, Commands.HELP_CHECK_FOR_UPDATE);\n        menu.addMenuDivider(Menus.AFTER, Commands.HELP_CHECK_FOR_UPDATE);\n    }\n    \n    function initTest() {\n        brackets.test.HealthDataPreview      = require("HealthDataPreview");\n        brackets.test.HealthDataManager      = HealthDataManager;\n        brackets.test.HealthDataNotification = HealthDataNotification;\n        brackets.test.HealthDataPopup        = HealthDataPopup;\n    }\n    \n    AppInit.appReady(function () {\n        initTest();\n    });\n    \n    addCommand();\n\n});\n\n//# sourceURL=/main.js');

//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map