{"version":3,"file":"main.js","sources":["main.js"],"names":["eval"],"mappings":"AAAAA,KAAA","sourcesContent":["eval(\"/*\\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\\n/*global define, $, brackets */\\n\\n\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    var EditorManager       = brackets.getModule(\\\"editor/EditorManager\\\"),\\n        QuickOpen           = brackets.getModule(\\\"search/QuickOpen\\\"),\\n        CSSUtils            = brackets.getModule(\\\"language/CSSUtils\\\"),\\n        DocumentManager     = brackets.getModule(\\\"document/DocumentManager\\\"),\\n        StringMatch         = brackets.getModule(\\\"utils/StringMatch\\\");\\n\\n\\n    /**\\n     * Returns a list of information about selectors for a single document. This array is populated\\n     * by createSelectorList()\\n     * @return {?Array.<FileLocation>}\\n     */\\n    function createSelectorList() {\\n        var doc = DocumentManager.getCurrentDocument();\\n        if (!doc) {\\n            return;\\n        }\\n\\n        var docText = doc.getText();\\n        return CSSUtils.extractAllSelectors(docText, doc.getLanguage().getMode());\\n    }\\n\\n\\n    /**\\n     * @param {string} query what the user is searching for\\n     * @return {Array.<SearchResult>} sorted and filtered results that match the query\\n     */\\n    function search(query, matcher) {\\n        var selectorList = matcher.selectorList;\\n        if (!selectorList) {\\n            selectorList = createSelectorList();\\n            matcher.selectorList = selectorList;\\n        }\\n        query = query.slice(query.indexOf(\\\"@\\\") + 1, query.length);\\n        \\n        // Filter and rank how good each match is\\n        var filteredList = $.map(selectorList, function (itemInfo) {\\n            var searchResult = matcher.match(CSSUtils.getCompleteSelectors(itemInfo), query);\\n            if (searchResult) {\\n                searchResult.selectorInfo = itemInfo;\\n            }\\n            return searchResult;\\n        });\\n        \\n        // Sort based on ranking & basic alphabetical order\\n        StringMatch.basicMatchSort(filteredList);\\n\\n        return filteredList;\\n    }\\n\\n    /**\\n     * @param {string} query what the user is searching for\\n     * @param {boolean} returns true if this plugin wants to provide results for this query\\n     */\\n    function match(query) {\\n        return (query[0] === \\\"@\\\");\\n    }\\n\\n    /**\\n     * Scroll to the selected item in the current document (unless no query string entered yet,\\n     * in which case the topmost list item is irrelevant)\\n     * @param {?SearchResult} selectedItem\\n     * @param {string} query\\n     * @param {boolean} explicit False if this is only highlighted due to being at top of list after search()\\n     */\\n    function itemFocus(selectedItem, query, explicit) {\\n        if (!selectedItem || (query.length < 2 && !explicit)) {\\n            return;\\n        }\\n        var selectorInfo = selectedItem.selectorInfo;\\n\\n        var from = {line: selectorInfo.selectorStartLine, ch: selectorInfo.selectorStartChar};\\n        var to = {line: selectorInfo.selectorStartLine, ch: selectorInfo.selectorEndChar};\\n        EditorManager.getCurrentFullEditor().setSelection(from, to, true);\\n    }\\n\\n    function itemSelect(selectedItem, query) {\\n        itemFocus(selectedItem, query, true);\\n    }\\n\\n\\n\\n    QuickOpen.addQuickOpenPlugin(\\n        {\\n            name: \\\"CSS Selectors\\\",\\n            languageIds: [\\\"css\\\", \\\"less\\\", \\\"scss\\\"],\\n            search: search,\\n            match: match,\\n            itemFocus: itemFocus,\\n            itemSelect: itemSelect\\n        }\\n    );\\n\\n\\n});\\n\\n//# sourceURL=/main.js\");\n\n"]}