{"version":3,"file":"main.js","sources":["StaticServer.js","main.js"],"names":["eval"],"mappings":"AAAAA,KAAA,kqRAEAA,KCFA","sourcesContent":["eval(\"/*\\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4,\\nmaxerr: 50, browser: true */\\n/*global $, define, brackets */\\n\\ndefine(\\'StaticServer\\',[\\'require\\',\\'exports\\',\\'module\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    var BaseServer           = brackets.getModule(\\\"LiveDevelopment/Servers/BaseServer\\\").BaseServer,\\n        LiveDevelopmentUtils = brackets.getModule(\\\"LiveDevelopment/LiveDevelopmentUtils\\\"),\\n        PreferencesManager   = brackets.getModule(\\\"preferences/PreferencesManager\\\");\\n\\n    \\n    /**\\n     * @private\\n     * \\n     * Prefences manager for this extension\\n     */\\n    var _prefs = PreferencesManager.getExtensionPrefs(\\\"staticserver\\\");\\n\\n    /**\\n     * @constructor\\n     * @extends {BaseServer}\\n     * Live preview server that uses a built-in HTTP server to serve static\\n     * and instrumented files.\\n     *\\n     * @param {!{baseUrl: string, root: string, pathResolver: function(string), nodeDomain: NodeDomain}} config\\n     *    Configuration parameters for this server:\\n     *        baseUrl        - Optional base URL (populated by the current project)\\n     *        pathResolver   - Function to covert absolute native paths to project relative paths\\n     *        root           - Native path to the project root (and base URL)\\n     *        nodeDomain     - An initialized NodeDomain\\n     */\\n    function StaticServer(config) {\\n        this._nodeDomain = config.nodeDomain;\\n        this._onRequestFilter = this._onRequestFilter.bind(this);\\n\\n        BaseServer.call(this, config);\\n    }\\n    \\n    StaticServer.prototype = Object.create(BaseServer.prototype);\\n    StaticServer.prototype.constructor = StaticServer;\\n\\n    /**\\n     * Determines whether we can serve local file.\\n     * @param {string} localPath A local path to file being served.\\n     * @return {boolean} true for yes, otherwise false.\\n     */\\n    StaticServer.prototype.canServe = function (localPath) {\\n        if (!this._nodeDomain.ready()) {\\n            return false;\\n        }\\n        \\n        // If we can\\'t transform the local path to a project relative path,\\n        // the path cannot be served\\n        if (localPath === this._pathResolver(localPath)) {\\n            return false;\\n        }\\n\\n        // Url ending in \\\"/\\\" implies default file, which is usually index.html.\\n        // Return true to indicate that we can serve it.\\n        if (localPath.match(/\\\\/$/)) {\\n            return true;\\n        }\\n\\n        // FUTURE: do a MIME Type lookup on file extension\\n        return LiveDevelopmentUtils.isStaticHtmlFileExt(localPath);\\n    };\\n\\n    /**\\n     * @private\\n     * Update the list of paths that fire \\\"request\\\" events\\n     * @return {jQuery.Promise} Resolved by the StaticServer domain when the message is acknowledged.\\n     */\\n    StaticServer.prototype._updateRequestFilterPaths = function () {\\n        var paths = Object.keys(this._liveDocuments);\\n\\n        return this._nodeDomain.exec(\\\"setRequestFilterPaths\\\", this._root, paths);\\n    };\\n\\n    /**\\n     * Gets the server details from the StaticServerDomain in node.\\n     * The domain itself handles starting a server if necessary (when\\n     * the staticServer.getServer command is called).\\n     *\\n     * @return {jQuery.Promise} A promise that resolves/rejects when \\n     *     the server is ready/failed.\\n     */\\n    StaticServer.prototype.readyToServe = function () {\\n        var self = this;\\n        var deferred = new $.Deferred();\\n\\n        function sanitizePort(port) {\\n            port = parseInt(port, 10);\\n            port = (port && !isNaN(port) && port > 0 && port < 65536) ? port : 0;\\n            return port;\\n        }\\n\\n        function onSuccess(address) {\\n            self._baseUrl = \\\"http://\\\" + address.address + \\\":\\\" + address.port + \\\"/\\\";\\n            deferred.resolve();\\n        }\\n\\n        function onFailure() {\\n            self._baseUrl = \\\"\\\";\\n            deferred.resolve();\\n        }\\n\\n        var port = sanitizePort(_prefs.get(\\\"port\\\"));\\n\\n        this._nodeDomain.exec(\\\"getServer\\\", self._root, port)\\n            .done(function (address) {\\n\\n                // If the port returned wasn\\'t what was requested, then the preference has\\n                // changed. Close the current server, and open a new one with the new port.\\n                if (address.port !== port && port > 0) {\\n                    return self._nodeDomain.exec(\\\"closeServer\\\", self._root)\\n                        .done(function () {\\n                            return self._nodeDomain.exec(\\\"getServer\\\", self._root, port)\\n                                .done(onSuccess)\\n                                .fail(onFailure);\\n                        })\\n                        .fail(onFailure);\\n                }\\n\\n                onSuccess(address);\\n            })\\n            .fail(onFailure);\\n\\n        return deferred.promise();\\n    };\\n\\n    /**\\n     * See BaseServer#add. StaticServer ignores documents that do not have\\n     * a setInstrumentationEnabled method. Updates request filters.\\n     */\\n    StaticServer.prototype.add = function (liveDocument) {\\n        if (liveDocument.setInstrumentationEnabled) {\\n            // enable instrumentation\\n            liveDocument.setInstrumentationEnabled(true);\\n        }\\n        \\n        BaseServer.prototype.add.call(this, liveDocument);\\n        \\n        // update the paths to watch\\n        this._updateRequestFilterPaths();\\n    };\\n\\n    /**\\n     * See BaseServer#remove. Updates request filters.\\n     */\\n    StaticServer.prototype.remove = function (liveDocument) {\\n        BaseServer.prototype.remove.call(this, liveDocument);\\n        \\n        this._updateRequestFilterPaths();\\n    };\\n\\n    /**\\n     * See BaseServer#clear. Updates request filters.\\n     */\\n    StaticServer.prototype.clear = function () {\\n        BaseServer.prototype.clear.call(this);\\n        \\n        this._updateRequestFilterPaths();\\n    };\\n    \\n    /**\\n     * @private\\n     * Send HTTP response data back to the StaticServerSomain\\n     */\\n    StaticServer.prototype._send = function (location, response) {\\n        this._nodeDomain.exec(\\\"writeFilteredResponse\\\", location.root, location.pathname, response);\\n    };\\n    \\n    /**\\n     * @private\\n     * Event handler for StaticServerDomain requestFilter event\\n     * @param {jQuery.Event} event\\n     * @param {{hostname: string, pathname: string, port: number, root: string, id: number}} request\\n     */\\n    StaticServer.prototype._onRequestFilter = function (event, request) {\\n        var key             = request.location.pathname,\\n            liveDocument    = this._liveDocuments[key],\\n            response;\\n        \\n        // send instrumented response or null to fallback to static file\\n        if (liveDocument && liveDocument.getResponseData) {\\n            response = liveDocument.getResponseData();\\n        } else {\\n            response = {};  // let server fall back on loading file off disk\\n        }\\n        response.id = request.id;\\n        \\n        this._send(request.location, response);\\n    };\\n    \\n    /**\\n     * See BaseServer#start. Starts listenting to StaticServerDomain events.\\n     */\\n    StaticServer.prototype.start = function () {\\n        this._nodeDomain.on(\\\"requestFilter\\\", this._onRequestFilter);\\n    };\\n\\n    /**\\n     * See BaseServer#stop. Remove event handlers from StaticServerDomain.\\n     */\\n    StaticServer.prototype.stop = function () {\\n        this._nodeDomain.off(\\\"requestFilter\\\", this._onRequestFilter);\\n    };\\n\\n    module.exports = StaticServer;\\n});\\n\\n//# sourceURL=/StaticServer.js\");\n\n","eval(\"/*\\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4,\\nmaxerr: 50, browser: true */\\n/*global define, brackets */\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\',\\'StaticServer\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    var AppInit              = brackets.getModule(\\\"utils/AppInit\\\"),\\n        ExtensionUtils       = brackets.getModule(\\\"utils/ExtensionUtils\\\"),\\n        LiveDevServerManager = brackets.getModule(\\\"LiveDevelopment/LiveDevServerManager\\\"),\\n        NodeDomain           = brackets.getModule(\\\"utils/NodeDomain\\\"),\\n        ProjectManager       = brackets.getModule(\\\"project/ProjectManager\\\"),\\n        StaticServer         = require(\\\"StaticServer\\\");\\n    \\n    /**\\n     * @private\\n     * @type {string} fullPath of the StaticServerDomain implementation\\n     */\\n    var _domainPath = ExtensionUtils.getModulePath(module, \\\"node/StaticServerDomain\\\");\\n    \\n    /**\\n     * @private\\n     * @type {NodeDomain}\\n     */\\n    var _nodeDomain = new NodeDomain(\\\"staticServer\\\", _domainPath);\\n\\n    /**\\n     * @private\\n     * @return {StaticServerProvider} The singleton StaticServerProvider initialized\\n     * on app ready.\\n     */\\n    function _createStaticServer() {\\n        var config = {\\n            nodeDomain      : _nodeDomain,\\n            pathResolver    : ProjectManager.makeProjectRelativeIfPossible,\\n            root            : ProjectManager.getProjectRoot().fullPath\\n        };\\n        \\n        return new StaticServer(config);\\n    }\\n\\n    AppInit.appReady(function () {\\n        LiveDevServerManager.registerServer({ create: _createStaticServer }, 5);\\n    });\\n    \\n    // For unit tests only\\n    exports._getStaticServerProvider = _createStaticServer;\\n    exports._nodeDomain = _nodeDomain;\\n});\\n\\n//# sourceURL=/main.js\");\n\n"]}