{"version":3,"file":"main.js","sources":["../../../thirdparty/text/text.js","CSSProperties.json!text","main.js"],"names":["eval"],"mappings":"AAAAA,KAAA,yqfCCAA,KAAA,+0mBCDAA,KAAA","sourcesContent":["eval(\"/**\\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\\n * Available via the MIT or new BSD license.\\n * see: http://github.com/requirejs/text for details\\n */\\n/*jslint regexp: true */\\n/*global require, XMLHttpRequest, ActiveXObject,\\n  define, window, process, Packages,\\n  java, location, Components, FileUtils */\\n\\ndefine(\\'text\\',[\\'module\\'], function (module) {\\n    \\'use strict\\';\\n\\n    var text, fs, Cc, Ci, xpcIsWindows,\\n        progIds = [\\'Msxml2.XMLHTTP\\', \\'Microsoft.XMLHTTP\\', \\'Msxml2.XMLHTTP.4.0\\'],\\n        xmlRegExp = /^\\\\s*<\\\\?xml(\\\\s)+version=[\\\\\\'\\\\\\\"](\\\\d)*.(\\\\d)*[\\\\\\'\\\\\\\"](\\\\s)*\\\\?>/im,\\n        bodyRegExp = /<body[^>]*>\\\\s*([\\\\s\\\\S]+)\\\\s*<\\\\/body>/im,\\n        hasLocation = typeof location !== \\'undefined\\' && location.href,\\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\\\:/, \\'\\'),\\n        defaultHostName = hasLocation && location.hostname,\\n        defaultPort = hasLocation && (location.port || undefined),\\n        buildMap = {},\\n        masterConfig = (module.config && module.config()) || {};\\n\\n    text = {\\n        version: \\'2.0.10\\',\\n\\n        strip: function (content) {\\n            //Strips <?xml ...?> declarations so that external SVG and XML\\n            //documents can be added to a document without worry. Also, if the string\\n            //is an HTML document, only the part inside the body tag is returned.\\n            if (content) {\\n                content = content.replace(xmlRegExp, \\\"\\\");\\n                var matches = content.match(bodyRegExp);\\n                if (matches) {\\n                    content = matches[1];\\n                }\\n            } else {\\n                content = \\\"\\\";\\n            }\\n            return content;\\n        },\\n\\n        jsEscape: function (content) {\\n            return content.replace(/([\\'\\\\\\\\])/g, \\'\\\\\\\\$1\\')\\n                .replace(/[\\\\f]/g, \\\"\\\\\\\\f\\\")\\n                .replace(/[\\\\b]/g, \\\"\\\\\\\\b\\\")\\n                .replace(/[\\\\n]/g, \\\"\\\\\\\\n\\\")\\n                .replace(/[\\\\t]/g, \\\"\\\\\\\\t\\\")\\n                .replace(/[\\\\r]/g, \\\"\\\\\\\\r\\\")\\n                .replace(/[\\\\u2028]/g, \\\"\\\\\\\\u2028\\\")\\n                .replace(/[\\\\u2029]/g, \\\"\\\\\\\\u2029\\\");\\n        },\\n\\n        createXhr: masterConfig.createXhr || function () {\\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\\n            var xhr, i, progId;\\n            if (typeof XMLHttpRequest !== \\\"undefined\\\") {\\n                return new XMLHttpRequest();\\n            } else if (typeof ActiveXObject !== \\\"undefined\\\") {\\n                for (i = 0; i < 3; i += 1) {\\n                    progId = progIds[i];\\n                    try {\\n                        xhr = new ActiveXObject(progId);\\n                    } catch (e) {}\\n\\n                    if (xhr) {\\n                        progIds = [progId];  // so faster next time\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return xhr;\\n        },\\n\\n        /**\\n         * Parses a resource name into its component parts. Resource names\\n         * look like: module/name.ext!strip, where the !strip part is\\n         * optional.\\n         * @param {String} name the resource name\\n         * @returns {Object} with properties \\\"moduleName\\\", \\\"ext\\\" and \\\"strip\\\"\\n         * where strip is a boolean.\\n         */\\n        parseName: function (name) {\\n            var modName, ext, temp,\\n                strip = false,\\n                index = name.indexOf(\\\".\\\"),\\n                isRelative = name.indexOf(\\'./\\') === 0 ||\\n                             name.indexOf(\\'../\\') === 0;\\n\\n            if (index !== -1 && (!isRelative || index > 1)) {\\n                modName = name.substring(0, index);\\n                ext = name.substring(index + 1, name.length);\\n            } else {\\n                modName = name;\\n            }\\n\\n            temp = ext || modName;\\n            index = temp.indexOf(\\\"!\\\");\\n            if (index !== -1) {\\n                //Pull off the strip arg.\\n                strip = temp.substring(index + 1) === \\\"strip\\\";\\n                temp = temp.substring(0, index);\\n                if (ext) {\\n                    ext = temp;\\n                } else {\\n                    modName = temp;\\n                }\\n            }\\n\\n            return {\\n                moduleName: modName,\\n                ext: ext,\\n                strip: strip\\n            };\\n        },\\n\\n        xdRegExp: /^((\\\\w+)\\\\:)?\\\\/\\\\/([^\\\\/\\\\\\\\]+)/,\\n\\n        /**\\n         * Is an URL on another domain. Only works for browser use, returns\\n         * false in non-browser environments. Only used to know if an\\n         * optimized .js version of a text resource should be loaded\\n         * instead.\\n         * @param {String} url\\n         * @returns Boolean\\n         */\\n        useXhr: function (url, protocol, hostname, port) {\\n            var uProtocol, uHostName, uPort,\\n                match = text.xdRegExp.exec(url);\\n            if (!match) {\\n                return true;\\n            }\\n            uProtocol = match[2];\\n            uHostName = match[3];\\n\\n            uHostName = uHostName.split(\\':\\');\\n            uPort = uHostName[1];\\n            uHostName = uHostName[0];\\n\\n            return (!uProtocol || uProtocol === protocol) &&\\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\\n                   ((!uPort && !uHostName) || uPort === port);\\n        },\\n\\n        finishLoad: function (name, strip, content, onLoad) {\\n            content = strip ? text.strip(content) : content;\\n            if (masterConfig.isBuild) {\\n                buildMap[name] = content;\\n            }\\n            onLoad(content);\\n        },\\n\\n        load: function (name, req, onLoad, config) {\\n            //Name has format: some.module.filext!strip\\n            //The strip part is optional.\\n            //if strip is present, then that means only get the string contents\\n            //inside a body tag in an HTML string. For XML/SVG content it means\\n            //removing the <?xml ...?> declarations so the content can be inserted\\n            //into the current doc without problems.\\n\\n            // Do not bother with the work if a build and text will\\n            // not be inlined.\\n            if (config.isBuild && !config.inlineText) {\\n                onLoad();\\n                return;\\n            }\\n\\n            masterConfig.isBuild = config.isBuild;\\n\\n            var parsed = text.parseName(name),\\n                nonStripName = parsed.moduleName +\\n                    (parsed.ext ? \\'.\\' + parsed.ext : \\'\\'),\\n                url = req.toUrl(nonStripName),\\n                useXhr = (masterConfig.useXhr) ||\\n                         text.useXhr;\\n\\n            // Do not load if it is an empty: url\\n            if (url.indexOf(\\'empty:\\') === 0) {\\n                onLoad();\\n                return;\\n            }\\n\\n            //Load the text. Use XHR if possible and in a browser.\\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\\n                text.get(url, function (content) {\\n                    text.finishLoad(name, parsed.strip, content, onLoad);\\n                }, function (err) {\\n                    if (onLoad.error) {\\n                        onLoad.error(err);\\n                    }\\n                });\\n            } else {\\n                //Need to fetch the resource across domains. Assume\\n                //the resource has been optimized into a JS module. Fetch\\n                //by the module name + extension, but do not include the\\n                //!strip part to avoid file system issues.\\n                req([nonStripName], function (content) {\\n                    text.finishLoad(parsed.moduleName + \\'.\\' + parsed.ext,\\n                                    parsed.strip, content, onLoad);\\n                });\\n            }\\n        },\\n\\n        write: function (pluginName, moduleName, write, config) {\\n            if (buildMap.hasOwnProperty(moduleName)) {\\n                var content = text.jsEscape(buildMap[moduleName]);\\n                write.asModule(pluginName + \\\"!\\\" + moduleName,\\n                               \\\"define(function () { return \\'\\\" +\\n                                   content +\\n                               \\\"\\';});\\\\n\\\");\\n            }\\n        },\\n\\n        writeFile: function (pluginName, moduleName, req, write, config) {\\n            var parsed = text.parseName(moduleName),\\n                extPart = parsed.ext ? \\'.\\' + parsed.ext : \\'\\',\\n                nonStripName = parsed.moduleName + extPart,\\n                //Use a \\'.js\\' file name so that it indicates it is a\\n                //script that can be loaded across domains.\\n                fileName = req.toUrl(parsed.moduleName + extPart) + \\'.js\\';\\n\\n            //Leverage own load() method to load plugin value, but only\\n            //write out values that do not have the strip argument,\\n            //to avoid any potential issues with ! in file names.\\n            text.load(nonStripName, req, function (value) {\\n                //Use own write() method to construct full module value.\\n                //But need to create shell that translates writeFile\\'s\\n                //write() to the right interface.\\n                var textWrite = function (contents) {\\n                    return write(fileName, contents);\\n                };\\n                textWrite.asModule = function (moduleName, contents) {\\n                    return write.asModule(moduleName, fileName, contents);\\n                };\\n\\n                text.write(pluginName, nonStripName, textWrite, config);\\n            }, config);\\n        }\\n    };\\n\\n    if (masterConfig.env === \\'node\\' || (!masterConfig.env &&\\n            typeof process !== \\\"undefined\\\" &&\\n            process.versions &&\\n            !!process.versions.node &&\\n            !process.versions[\\'node-webkit\\'])) {\\n        //Using special require.nodeRequire, something added by r.js.\\n        fs = require.nodeRequire(\\'fs\\');\\n\\n        text.get = function (url, callback, errback) {\\n            try {\\n                var file = fs.readFileSync(url, \\'utf8\\');\\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\\n                if (file.indexOf(\\'\\\\uFEFF\\') === 0) {\\n                    file = file.substring(1);\\n                }\\n                callback(file);\\n            } catch (e) {\\n                errback(e);\\n            }\\n        };\\n    } else if (masterConfig.env === \\'xhr\\' || (!masterConfig.env &&\\n            text.createXhr())) {\\n        text.get = function (url, callback, errback, headers) {\\n            var xhr = text.createXhr(), header;\\n            xhr.open(\\'GET\\', url, true);\\n\\n            //Allow plugins direct access to xhr headers\\n            if (headers) {\\n                for (header in headers) {\\n                    if (headers.hasOwnProperty(header)) {\\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\\n                    }\\n                }\\n            }\\n\\n            //Allow overrides specified in config\\n            if (masterConfig.onXhr) {\\n                masterConfig.onXhr(xhr, url);\\n            }\\n\\n            xhr.onreadystatechange = function (evt) {\\n                var status, err;\\n                //Do not explicitly handle errors, those should be\\n                //visible via console output in the browser.\\n                if (xhr.readyState === 4) {\\n                    status = xhr.status;\\n                    if (status > 399 && status < 600) {\\n                        //An http 4xx or 5xx error. Signal an error.\\n                        err = new Error(url + \\' HTTP status: \\' + status);\\n                        err.xhr = xhr;\\n                        errback(err);\\n                    } else {\\n                        callback(xhr.responseText);\\n                    }\\n\\n                    if (masterConfig.onXhrComplete) {\\n                        masterConfig.onXhrComplete(xhr, url);\\n                    }\\n                }\\n            };\\n            xhr.send(null);\\n        };\\n    } else if (masterConfig.env === \\'rhino\\' || (!masterConfig.env &&\\n            typeof Packages !== \\'undefined\\' && typeof java !== \\'undefined\\')) {\\n        //Why Java, why is this so awkward?\\n        text.get = function (url, callback) {\\n            var stringBuffer, line,\\n                encoding = \\\"utf-8\\\",\\n                file = new java.io.File(url),\\n                lineSeparator = java.lang.System.getProperty(\\\"line.separator\\\"),\\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\\n                content = \\'\\';\\n            try {\\n                stringBuffer = new java.lang.StringBuffer();\\n                line = input.readLine();\\n\\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\\n                // http://www.unicode.org/faq/utf_bom.html\\n\\n                // Note that when we use utf-8, the BOM should appear as \\\"EF BB BF\\\", but it doesn\\'t due to this bug in the JDK:\\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\\n                    // Eat the BOM, since we\\'ve already found the encoding on this file,\\n                    // and we plan to concatenating this buffer with others; the BOM should\\n                    // only appear at the top of a file.\\n                    line = line.substring(1);\\n                }\\n\\n                if (line !== null) {\\n                    stringBuffer.append(line);\\n                }\\n\\n                while ((line = input.readLine()) !== null) {\\n                    stringBuffer.append(lineSeparator);\\n                    stringBuffer.append(line);\\n                }\\n                //Make sure we return a JavaScript string and not a Java string.\\n                content = String(stringBuffer.toString()); //String\\n            } finally {\\n                input.close();\\n            }\\n            callback(content);\\n        };\\n    } else if (masterConfig.env === \\'xpconnect\\' || (!masterConfig.env &&\\n            typeof Components !== \\'undefined\\' && Components.classes &&\\n            Components.interfaces)) {\\n        //Avert your gaze!\\n        Cc = Components.classes,\\n        Ci = Components.interfaces;\\n        Components.utils[\\'import\\'](\\'resource://gre/modules/FileUtils.jsm\\');\\n        xpcIsWindows = (\\'@mozilla.org/windows-registry-key;1\\' in Cc);\\n\\n        text.get = function (url, callback) {\\n            var inStream, convertStream, fileObj,\\n                readData = {};\\n\\n            if (xpcIsWindows) {\\n                url = url.replace(/\\\\//g, \\'\\\\\\\\\\');\\n            }\\n\\n            fileObj = new FileUtils.File(url);\\n\\n            //XPCOM, you so crazy\\n            try {\\n                inStream = Cc[\\'@mozilla.org/network/file-input-stream;1\\']\\n                           .createInstance(Ci.nsIFileInputStream);\\n                inStream.init(fileObj, 1, 0, false);\\n\\n                convertStream = Cc[\\'@mozilla.org/intl/converter-input-stream;1\\']\\n                                .createInstance(Ci.nsIConverterInputStream);\\n                convertStream.init(inStream, \\\"utf-8\\\", inStream.available(),\\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\\n\\n                convertStream.readString(inStream.available(), readData);\\n                convertStream.close();\\n                inStream.close();\\n                callback(readData.value);\\n            } catch (e) {\\n                throw new Error((fileObj && fileObj.path || \\'\\') + \\': \\' + e);\\n            }\\n        };\\n    }\\n    return text;\\n});\\n\\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js\");\n\n","\neval(\"define(\\'text!CSSProperties.json\\',[],function () { return \\'{\\\\n    \\\"align-content\\\":               {\\\"values\\\": [\\\"center\\\", \\\"flex-end\\\", \\\"flex-start\\\", \\\"space-around\\\", \\\"space-between\\\", \\\"stretch\\\"]},\\\\n    \\\"align-items\\\":                 {\\\"values\\\": [\\\"baseline\\\", \\\"center\\\", \\\"flex-end\\\", \\\"flex-start\\\", \\\"stretch\\\"]},\\\\n    \\\"align-self\\\":                  {\\\"values\\\": [\\\"auto\\\", \\\"baseline\\\", \\\"center\\\", \\\"flex-end\\\", \\\"flex-start\\\", \\\"stretch\\\"]},\\\\n    \\\"animation\\\":                   {\\\"values\\\": []},\\\\n    \\\"animation-delay\\\":             {\\\"values\\\": []},\\\\n    \\\"animation-direction\\\":         {\\\"values\\\": [\\\"alternate\\\", \\\"alternate-reverse\\\", \\\"normal\\\", \\\"reverse\\\"]},\\\\n    \\\"animation-duration\\\":          {\\\"values\\\": []},\\\\n    \\\"animation-fill-mode\\\":         {\\\"values\\\": [\\\"backwards\\\", \\\"both\\\", \\\"forwards\\\", \\\"none\\\"]},\\\\n    \\\"animation-iteration-count\\\":   {\\\"values\\\": [\\\"infinite\\\"]},\\\\n    \\\"animation-name\\\":              {\\\"values\\\": [\\\"none\\\"]},\\\\n    \\\"animation-play-state\\\":        {\\\"values\\\": [\\\"paused\\\", \\\"running\\\"]},\\\\n    \\\"animation-timing-function\\\":   {\\\"values\\\": [\\\"cubic-bezier(.42, 0, .58, 1)\\\", \\\"ease\\\", \\\"ease-in\\\", \\\"ease-in-out\\\", \\\"ease-out\\\", \\\"linear\\\", \\\"step-end\\\", \\\"step-start\\\", \\\"steps()\\\"]},\\\\n    \\\"backface-visibility\\\":         {\\\"values\\\": [\\\"hidden\\\", \\\"visible\\\"]},\\\\n    \\\"background\\\":                  {\\\"values\\\": []},\\\\n    \\\"background-attachment\\\":       {\\\"values\\\": [\\\"fixed\\\", \\\"local\\\", \\\"scroll\\\", \\\"inherit\\\"]},\\\\n    \\\"background-blend-mode\\\":       {\\\"values\\\": [\\\"color\\\", \\\"color-burn\\\", \\\"color-dodge\\\", \\\"darken\\\", \\\"difference\\\", \\\"exclusion\\\", \\\"hard-light\\\", \\\"hue\\\", \\\"lighten\\\", \\\"luminosity\\\", \\\"normal\\\", \\\"multiply\\\", \\\"overlay\\\", \\\"saturation\\\", \\\"screen\\\", \\\"soft-light\\\"]},\\\\n    \\\"background-clip\\\":             {\\\"values\\\": [\\\"border-box\\\", \\\"content-box\\\", \\\"padding-box\\\", \\\"inherit\\\"]},\\\\n    \\\"background-color\\\":            {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"background-image\\\":            {\\\"values\\\": [\\\"image()\\\", \\\"linear-gradient()\\\", \\\"radial-gradient()\\\", \\\"repeating-linear-gradient()\\\", \\\"repeating-radial-gradient()\\\", \\\"url()\\\"]},\\\\n    \\\"background-origin\\\":           {\\\"values\\\": [\\\"border-box\\\", \\\"content-box\\\", \\\"padding-box\\\", \\\"inherit\\\"]},\\\\n    \\\"background-position\\\":         {\\\"values\\\": [\\\"left\\\", \\\"center\\\", \\\"right\\\", \\\"bottom\\\", \\\"top\\\"]},\\\\n    \\\"background-repeat\\\":           {\\\"values\\\": [\\\"no-repeat\\\", \\\"repeat\\\", \\\"repeat-x\\\", \\\"repeat-y\\\", \\\"round\\\", \\\"space\\\"]},\\\\n    \\\"background-size\\\":             {\\\"values\\\": [\\\"auto\\\", \\\"contain\\\", \\\"cover\\\"]},\\\\n    \\\"border\\\":                      {\\\"values\\\": []},\\\\n    \\\"border-collapse\\\":             {\\\"values\\\": [\\\"collapse\\\", \\\"separate\\\", \\\"inherit\\\"]},\\\\n    \\\"border-color\\\":                {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"border-spacing\\\":              {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"border-style\\\":                {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"border-bottom\\\":               {\\\"values\\\": []},\\\\n    \\\"border-bottom-color\\\":         {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"border-bottom-left-radius\\\":   {\\\"values\\\": []},\\\\n    \\\"border-bottom-right-radius\\\":  {\\\"values\\\": []},\\\\n    \\\"border-bottom-style\\\":         {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"border-bottom-width\\\":         {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"border-image\\\":                {\\\"values\\\": [ \\\"url()\\\" ]},\\\\n    \\\"border-image-outset\\\":         {\\\"values\\\": []},\\\\n    \\\"border-image-slice\\\":          {\\\"values\\\": []},\\\\n    \\\"border-image-source\\\":         {\\\"values\\\": []},\\\\n    \\\"border-image-repeat\\\":         {\\\"values\\\": [\\\"repeat\\\", \\\"round\\\", \\\"space\\\", \\\"stretch\\\"]},\\\\n    \\\"border-image-width\\\":          {\\\"values\\\": [\\\"auto\\\"]},    \\\\n    \\\"border-left\\\":                 {\\\"values\\\": []},\\\\n    \\\"border-left-color\\\":           {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"border-left-style\\\":           {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"border-left-width\\\":           {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"border-radius\\\":               {\\\"values\\\": []},\\\\n    \\\"border-right\\\":                {\\\"values\\\": []},\\\\n    \\\"border-right-color\\\":          {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"border-right-style\\\":          {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"border-right-width\\\":          {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"border-top\\\":                  {\\\"values\\\": []},\\\\n    \\\"border-top-color\\\":            {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"border-top-left-radius\\\":      {\\\"values\\\": []},\\\\n    \\\"border-top-right-radius\\\":     {\\\"values\\\": []},\\\\n    \\\"border-top-style\\\":            {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"border-top-width\\\":            {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"border-width\\\":                {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"box-decoration-break\\\":        {\\\"values\\\": []},\\\\n    \\\"box-shadow\\\":                  {\\\"values\\\": []},\\\\n    \\\"box-sizing\\\":                  {\\\"values\\\": [\\\"border-box\\\", \\\"content-box\\\", \\\"padding-box\\\", \\\"inherit\\\"]},\\\\n    \\\"bottom\\\":                      {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"break-after\\\":                 {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\", \\\"column\\\", \\\"left\\\", \\\"page\\\", \\\"region\\\", \\\"right\\\"]},\\\\n    \\\"break-before\\\":                {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\", \\\"column\\\", \\\"left\\\", \\\"page\\\", \\\"region\\\", \\\"right\\\"]},\\\\n    \\\"break-inside\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\"]},\\\\n    \\\"caption-side\\\":                {\\\"values\\\": [\\\"bottom\\\", \\\"top\\\", \\\"inherit\\\"]},\\\\n    \\\"clear\\\":                       {\\\"values\\\": [\\\"both\\\", \\\"left\\\", \\\"none\\\", \\\"right\\\", \\\"inherit\\\"]},\\\\n    \\\"clip\\\":                        {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"color\\\":                       {\\\"values\\\": [\\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"columns\\\":                     {\\\"values\\\": []},\\\\n    \\\"column-count\\\":                {\\\"values\\\": []},\\\\n    \\\"column-fill\\\":                 {\\\"values\\\": [\\\"auto\\\", \\\"balance\\\"]},\\\\n    \\\"column-gap\\\":                  {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"column-rule\\\":                 {\\\"values\\\": []},\\\\n    \\\"column-rule-color\\\":           {\\\"values\\\": [], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"column-rule-style\\\":           {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"column-rule-width\\\":           {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"column-span\\\":                 {\\\"values\\\": [\\\"all\\\", \\\"none\\\"]},\\\\n    \\\"column-width\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"content\\\":                     {\\\"values\\\": [\\\"attr()\\\", \\\"close-quote\\\", \\\"no-close-quote\\\", \\\"no-open-quote\\\", \\\"normal\\\", \\\"none\\\", \\\"open-quote\\\", \\\"inherit\\\"]},\\\\n    \\\"counter-increment\\\":           {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"counter-reset\\\":               {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"cursor\\\":                      {\\\"values\\\": [\\\"alias\\\", \\\"all-scroll\\\", \\\"auto\\\", \\\"cell\\\", \\\"col-resize\\\", \\\"context-menu\\\", \\\"copy\\\", \\\"crosshair\\\", \\\"default\\\", \\\"e-resize\\\", \\\"ew-resize\\\", \\\"grab\\\", \\\"grabbing\\\", \\\"help\\\", \\\"inherit\\\", \\\"move\\\", \\\"n-resize\\\", \\\"ne-resize\\\", \\\"nesw-resize\\\", \\\"no-drop\\\", \\\"none\\\", \\\"not-allowed\\\", \\\"ns-resize\\\", \\\"nw-resize\\\", \\\"nwse-resize\\\", \\\"pointer\\\", \\\"progress\\\", \\\"row-resize\\\", \\\"s-resize\\\", \\\"se-resize\\\", \\\"sw-resize\\\", \\\"text\\\", \\\"vertical-text\\\", \\\"w-resize\\\", \\\"wait\\\", \\\"zoom-in\\\", \\\"zoom-out\\\"]},\\\\n    \\\"direction\\\":                   {\\\"values\\\": [\\\"ltr\\\", \\\"rtl\\\", \\\"inherit\\\"]},\\\\n    \\\"display\\\":                     {\\\"values\\\": [\\\"block\\\", \\\"flex\\\", \\\"grid\\\", \\\"inline\\\", \\\"inline-block\\\", \\\"inline-flex\\\", \\\"inline-grid\\\", \\\"inline-table\\\", \\\"list-item\\\", \\\"none\\\", \\\"run-in\\\", \\\"table\\\", \\\"table-caption\\\", \\\"table-cell\\\", \\\"table-column\\\", \\\"table-column-group\\\", \\\"table-footer-group\\\", \\\"table-header-group\\\", \\\"table-row\\\", \\\"table-row-group\\\", \\\"inherit\\\"]},\\\\n    \\\"empty-cells\\\":                 {\\\"values\\\": [\\\"hide\\\", \\\"show\\\", \\\"inherit\\\"]},\\\\n    \\\"filter\\\":                      {\\\"values\\\": [\\\"blur()\\\", \\\"brightness()\\\", \\\"contrast()\\\", \\\"custom()\\\", \\\"drop-shadow()\\\", \\\"grayscale()\\\", \\\"hue-rotate()\\\", \\\"invert()\\\", \\\"none\\\", \\\"opacity()\\\", \\\"sepia()\\\", \\\"saturate()\\\", \\\"url()\\\"]},\\\\n    \\\"flex\\\":                        {\\\"values\\\": [\\\"auto\\\", \\\"initial\\\", \\\"none\\\"]},\\\\n    \\\"flex-basis\\\":                  {\\\"values\\\": [\\\"auto\\\"]},\\\\n    \\\"flex-direction\\\":              {\\\"values\\\": [\\\"column\\\", \\\"column-reverse\\\", \\\"row\\\", \\\"row-reverse\\\"]},\\\\n    \\\"flex-flow\\\":                   {\\\"values\\\": [\\\"column\\\", \\\"column-reverse\\\", \\\"nowrap\\\", \\\"row\\\", \\\"row-reverse\\\", \\\"wrap\\\", \\\"wrap-reverse\\\"]},\\\\n    \\\"flex-grow\\\":                   {\\\"values\\\": []},\\\\n    \\\"flex-shrink\\\":                 {\\\"values\\\": []},\\\\n    \\\"flex-wrap\\\":                   {\\\"values\\\": [\\\"nowrap\\\", \\\"wrap\\\", \\\"wrap-reverse\\\"]},\\\\n    \\\"float\\\":                       {\\\"values\\\": [\\\"left\\\", \\\"right\\\", \\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"flow-into\\\":                   {\\\"values\\\": [\\\"none\\\"], \\\"type\\\": \\\"named-flow\\\"},\\\\n    \\\"flow-from\\\":                   {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"], \\\"type\\\": \\\"named-flow\\\"},\\\\n    \\\"font\\\":                        {\\\"values\\\": []},\\\\n    \\\"font-family\\\":                 {\\\"values\\\": [\\\"cursive\\\", \\\"fantasy\\\", \\\"inherit\\\", \\\"monospace\\\", \\\"sans-serif\\\", \\\"serif\\\"]},\\\\n    \\\"font-feature-settings\\\":       {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"font-kerning\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"none\\\", \\\"normal\\\"]},\\\\n    \\\"font-language-override\\\":      {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"font-size\\\":                   {\\\"values\\\": []},\\\\n    \\\"font-size-adjust\\\":            {\\\"values\\\": [\\\"auto\\\", \\\"none\\\"]},\\\\n    \\\"font-stretch\\\":                {\\\"values\\\": [\\\"condensed\\\", \\\"expanded\\\", \\\"extra-condensed\\\", \\\"extra-expanded\\\", \\\"normal\\\", \\\"semi-condensed\\\", \\\"semi-expanded\\\", \\\"ultra-condensed\\\", \\\"ultra-expanded\\\"]},\\\\n    \\\"font-style\\\":                  {\\\"values\\\": [\\\"italic\\\", \\\"normal\\\", \\\"oblique\\\"]},\\\\n    \\\"font-synthesis\\\":              {\\\"values\\\": [\\\"none\\\", \\\"style\\\", \\\"weight\\\"]},\\\\n    \\\"font-variant\\\":                {\\\"values\\\": [\\\"normal\\\", \\\"small-caps\\\", \\\"inherit\\\"]},\\\\n    \\\"font-variant-alternates\\\":     {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"font-variant-caps\\\":           {\\\"values\\\": [\\\"normal\\\", \\\"small-caps\\\", \\\"all-small-caps\\\", \\\"petite-caps\\\", \\\"all-petite-caps\\\", \\\"unicase\\\", \\\"titling-caps\\\"]},\\\\n    \\\"font-variant-east-asian\\\":     {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"font-variant-ligatures\\\":      {\\\"values\\\": [\\\"normal\\\", \\\"none\\\"]},\\\\n    \\\"font-variant-numeric\\\":        {\\\"values\\\": [\\\"normal\\\"]},\\\\n    \\\"font-variant-position\\\":       {\\\"values\\\": [\\\"normal\\\", \\\"sub\\\", \\\"super\\\"]},\\\\n    \\\"font-weight\\\":                 {\\\"values\\\": [\\\"bold\\\", \\\"bolder\\\", \\\"lighter\\\", \\\"normal\\\", \\\"100\\\", \\\"200\\\", \\\"300\\\", \\\"400\\\", \\\"500\\\", \\\"600\\\", \\\"700\\\", \\\"800\\\", \\\"900\\\", \\\"inherit\\\"]},\\\\n    \\\"height\\\":                      {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"hyphens\\\":                     {\\\"values\\\": [\\\"auto\\\", \\\"manual\\\", \\\"none\\\"]},\\\\n    \\\"image-orientation\\\":           {\\\"values\\\": []},\\\\n    \\\"image-resolution\\\":            {\\\"values\\\": [\\\"from-image\\\", \\\"snap\\\"]},\\\\n    \\\"justify-content\\\":             {\\\"values\\\": [\\\"center\\\", \\\"flex-end\\\", \\\"flex-start\\\", \\\"space-around\\\", \\\"space-between\\\"]},\\\\n    \\\"left\\\":                        {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"letter-spacing\\\":              {\\\"values\\\": [\\\"normal\\\", \\\"inherit\\\"]},\\\\n    \\\"line-height\\\":                 {\\\"values\\\": [\\\"normal\\\", \\\"inherit\\\"]},\\\\n    \\\"list-style\\\":                  {\\\"values\\\": [\\\"armenian\\\", \\\"circle\\\", \\\"decimal\\\", \\\"decimal-leading-zero\\\", \\\"disc\\\", \\\"georgian\\\", \\\"inherit\\\", \\\"inside\\\", \\\"lower-alpha\\\", \\\"lower-greek\\\", \\\"lower-latin\\\", \\\"lower-roman\\\", \\\"none\\\", \\\"outside\\\", \\\"square\\\", \\\"upper-alpha\\\", \\\"upper-latin\\\", \\\"upper-roman\\\", \\\"url()\\\"]},\\\\n    \\\"list-style-image\\\":            {\\\"values\\\": [\\\"none\\\", \\\"url()\\\", \\\"inherit\\\"]},\\\\n    \\\"list-style-position\\\":         {\\\"values\\\": [\\\"inside\\\", \\\"outside\\\", \\\"inherit\\\"]},\\\\n    \\\"list-style-type\\\":             {\\\"values\\\": [\\\"armenian\\\", \\\"circle\\\", \\\"decimal\\\", \\\"decimal-leading-zero\\\", \\\"disc\\\", \\\"georgian\\\", \\\"lower-alpha\\\", \\\"lower-greek\\\", \\\"lower-latin\\\", \\\"lower-roman\\\", \\\"none\\\", \\\"square\\\", \\\"upper-alpha\\\", \\\"upper-latin\\\", \\\"upper-roman\\\", \\\"inherit\\\"]},\\\\n    \\\"margin\\\":                      {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"margin-bottom\\\":               {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"margin-left\\\":                 {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"margin-right\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"margin-top\\\":                  {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"max-height\\\":                  {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"max-width\\\":                   {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"min-height\\\":                  {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"min-width\\\":                   {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"object-fit\\\":                  {\\\"values\\\": [\\\"contain\\\", \\\"cover\\\", \\\"fill\\\", \\\"none\\\", \\\"scale-down\\\"]},\\\\n    \\\"object-position\\\":             {\\\"values\\\": [\\\"left\\\", \\\"center\\\", \\\"right\\\", \\\"bottom\\\", \\\"top\\\"]},\\\\n    \\\"opacity\\\":                     {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"order\\\":                       {\\\"values\\\": []},\\\\n    \\\"orphans\\\":                     {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"outline\\\":                     {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"outline-color\\\":               {\\\"values\\\": [\\\"invert\\\", \\\"inherit\\\"], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"outline-offset\\\":              {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"outline-style\\\":               {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"groove\\\", \\\"hidden\\\", \\\"inset\\\", \\\"none\\\", \\\"outset\\\", \\\"ridge\\\", \\\"solid\\\", \\\"inherit\\\"]},\\\\n    \\\"outline-width\\\":               {\\\"values\\\": [\\\"medium\\\", \\\"thin\\\", \\\"thick\\\", \\\"inherit\\\"]},\\\\n    \\\"overflow\\\":                    {\\\"values\\\": [\\\"auto\\\", \\\"hidden\\\", \\\"scroll\\\", \\\"visible\\\", \\\"inherit\\\"]},\\\\n    \\\"overflow-x\\\":                  {\\\"values\\\": [\\\"auto\\\", \\\"hidden\\\", \\\"scroll\\\", \\\"visible\\\", \\\"inherit\\\"]},\\\\n    \\\"overflow-y\\\":                  {\\\"values\\\": [\\\"auto\\\", \\\"hidden\\\", \\\"scroll\\\", \\\"visible\\\", \\\"inherit\\\"]},\\\\n    \\\"padding\\\":                     {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"padding-bottom\\\":              {\\\"values\\\": []},\\\\n    \\\"padding-left\\\":                {\\\"values\\\": []},\\\\n    \\\"padding-right\\\":               {\\\"values\\\": []},\\\\n    \\\"padding-top\\\":                 {\\\"values\\\": []},\\\\n    \\\"page-break-after\\\":            {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"left\\\", \\\"right\\\", \\\"inherit\\\"]},\\\\n    \\\"page-break-before\\\":           {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"left\\\", \\\"right\\\", \\\"inherit\\\"]},\\\\n    \\\"page-break-inside\\\":           {\\\"values\\\": [\\\"auto\\\", \\\"avoid\\\", \\\"inherit\\\"]},\\\\n    \\\"perspective\\\":                 {\\\"values\\\": [\\\"none\\\"]},\\\\n    \\\"perspective-origin\\\":          {\\\"values\\\": [\\\"bottom\\\", \\\"center\\\", \\\"left\\\", \\\"right\\\", \\\"top\\\"]},\\\\n    \\\"pointer-events\\\":              {\\\"values\\\": [\\\"all\\\", \\\"auto\\\", \\\"fill\\\", \\\"inherit\\\", \\\"none\\\", \\\"painted\\\", \\\"stroke\\\", \\\"visible\\\", \\\"visibleFill\\\", \\\"visiblePainted\\\", \\\"visibleStroke\\\"]},\\\\n    \\\"position\\\":                    {\\\"values\\\": [\\\"absolute\\\", \\\"fixed\\\", \\\"relative\\\", \\\"static\\\", \\\"sticky\\\", \\\"inherit\\\"]},\\\\n    \\\"quotes\\\":                      {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\"]},\\\\n    \\\"region-break-after\\\":          {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\", \\\"column\\\", \\\"left\\\", \\\"page\\\", \\\"region\\\", \\\"right\\\"]},\\\\n    \\\"region-break-before\\\":         {\\\"values\\\": [\\\"always\\\", \\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\", \\\"column\\\", \\\"left\\\", \\\"page\\\", \\\"region\\\", \\\"right\\\"]},\\\\n    \\\"region-break-inside\\\":         {\\\"values\\\": [\\\"auto\\\", \\\"avoid\\\", \\\"avoid-column\\\", \\\"avoid-page\\\", \\\"avoid-region\\\"]},\\\\n    \\\"region-fragment\\\":             {\\\"values\\\": [\\\"auto\\\", \\\"break\\\"]},\\\\n    \\\"resize\\\":                      {\\\"values\\\": [\\\"both\\\", \\\"horizontal\\\", \\\"none\\\", \\\"vertical\\\", \\\"inherit\\\"]},\\\\n    \\\"right\\\":                       {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"src\\\":                         {\\\"values\\\": [ \\\"url()\\\"]},\\\\n    \\\"shape-image-threshold\\\":       {\\\"values\\\": []},\\\\n    \\\"shape-inside\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"circle()\\\", \\\"ellipse()\\\", \\\"inherit\\\", \\\"outside-shape\\\", \\\"polygon()\\\", \\\"rectangle()\\\"]},\\\\n    \\\"shape-margin\\\":                {\\\"values\\\": []},\\\\n    \\\"shape-outside\\\":               {\\\"values\\\": [\\\"none\\\", \\\"inherit\\\", \\\"circle()\\\", \\\"ellipse()\\\", \\\"polygon()\\\", \\\"inset()\\\", \\\"margin-box\\\", \\\"border-box\\\", \\\"padding-box\\\", \\\"content-box\\\", \\\"url()\\\", \\\"image()\\\", \\\"linear-gradient()\\\", \\\"radial-gradient()\\\", \\\"repeating-linear-gradient()\\\", \\\"repeating-radial-gradient()\\\"]},\\\\n    \\\"table-layout\\\":                {\\\"values\\\": [\\\"auto\\\", \\\"fixed\\\", \\\"inherit\\\"]},\\\\n    \\\"text-align\\\":                  {\\\"values\\\": [\\\"center\\\", \\\"left\\\", \\\"justify\\\", \\\"right\\\", \\\"inherit\\\"]},\\\\n    \\\"text-align-last\\\":             {\\\"values\\\": [\\\"center\\\", \\\"left\\\", \\\"justify\\\", \\\"right\\\", \\\"inherit\\\"]},\\\\n    \\\"text-decoration\\\":             {\\\"values\\\": [\\\"line-through\\\", \\\"none\\\", \\\"overline\\\", \\\"underline\\\", \\\"inherit\\\"]},\\\\n    \\\"text-decoration-color\\\":       {\\\"values\\\": [], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"text-decoration-line\\\":        {\\\"values\\\": [\\\"line-through\\\", \\\"none\\\", \\\"overline\\\", \\\"underline\\\"]},\\\\n    \\\"text-decoration-skip\\\":        {\\\"values\\\": [\\\"edges\\\", \\\"ink\\\", \\\"none\\\", \\\"objects\\\", \\\"spaces\\\"]},\\\\n    \\\"text-decoration-style\\\":       {\\\"values\\\": [\\\"dashed\\\", \\\"dotted\\\", \\\"double\\\", \\\"solid\\\", \\\"wavy\\\"]},\\\\n    \\\"text-emphasis\\\":               {\\\"values\\\": []},\\\\n    \\\"text-emphasis-color\\\":         {\\\"values\\\": [], \\\"type\\\": \\\"color\\\"},\\\\n    \\\"text-emphasis-position\\\":      {\\\"values\\\": [\\\"above\\\", \\\"below\\\", \\\"left\\\", \\\"right\\\"]},\\\\n    \\\"text-emphasis-style\\\":         {\\\"values\\\": [\\\"circle\\\", \\\"dot\\\", \\\"double-circle\\\", \\\"filled\\\", \\\"none\\\", \\\"open\\\", \\\"sesame\\\", \\\"triangle\\\"]},\\\\n    \\\"text-indent\\\":                 {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"text-overflow\\\":               {\\\"values\\\": [\\\"clip\\\", \\\"ellipsis\\\", \\\"inherit\\\"]},\\\\n    \\\"text-shadow\\\":                 {\\\"values\\\": []},\\\\n    \\\"text-rendering\\\":              {\\\"values\\\": [\\\"auto\\\", \\\"geometricPrecision\\\", \\\"optimizeLegibility\\\", \\\"optimizeSpeed\\\"]},\\\\n    \\\"text-transform\\\":              {\\\"values\\\": [\\\"capitalize\\\", \\\"full-width\\\", \\\"lowercase\\\", \\\"none\\\", \\\"uppercase\\\", \\\"inherit\\\"]},\\\\n    \\\"text-underline-position\\\":     {\\\"values\\\": [\\\"alphabetic\\\", \\\"auto\\\", \\\"below\\\", \\\"left\\\", \\\"right\\\"]},\\\\n    \\\"top\\\":                         {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"transform\\\":                   {\\\"values\\\": [\\\"matrix()\\\", \\\"matrix3d()\\\", \\\"none\\\", \\\"perspective()\\\", \\\"rotate()\\\", \\\"rotate3d()\\\", \\\"rotateX()\\\", \\\"rotateY()\\\", \\\"rotateZ()\\\", \\\"scale()\\\", \\\"scale3d()\\\", \\\"scaleX()\\\", \\\"scaleY()\\\", \\\"scaleZ()\\\", \\\"skewX()\\\", \\\"skewY()\\\", \\\"translate()\\\", \\\"translate3d()\\\", \\\"translateX()\\\", \\\"translateY()\\\", \\\"translateZ()\\\"]},\\\\n    \\\"transform-origin\\\":            {\\\"values\\\": [\\\"bottom\\\", \\\"center\\\", \\\"left\\\", \\\"right\\\", \\\"top\\\"]},\\\\n    \\\"transform-style\\\":             {\\\"values\\\": [\\\"flat\\\", \\\"preserve-3d\\\"]},\\\\n    \\\"transition\\\":                  {\\\"values\\\": []},\\\\n    \\\"transition-delay\\\":            {\\\"values\\\": []},\\\\n    \\\"transition-duration\\\":         {\\\"values\\\": []},\\\\n    \\\"transition-property\\\":         {\\\"values\\\": [\\\"all\\\", \\\"none\\\"]},\\\\n    \\\"transition-timing-function\\\":  {\\\"values\\\": [\\\"cubic-bezier(.42, 0, .58, 1)\\\", \\\"ease\\\", \\\"ease-in\\\", \\\"ease-in-out\\\", \\\"ease-out\\\", \\\"linear\\\", \\\"step-end\\\", \\\"step-start\\\", \\\"steps()\\\"]},\\\\n    \\\"unicode-bidi\\\":                {\\\"values\\\": [\\\"bidi-override\\\", \\\"embed\\\", \\\"normal\\\", \\\"inherit\\\"]},\\\\n    \\\"unicode-range\\\":               {\\\"values\\\": []},\\\\n    \\\"vertical-align\\\":              {\\\"values\\\": [\\\"baseline\\\", \\\"bottom\\\", \\\"middle\\\", \\\"sub\\\", \\\"super\\\", \\\"text-bottom\\\", \\\"text-top\\\", \\\"top\\\", \\\"inherit\\\"]},\\\\n    \\\"visibility\\\":                  {\\\"values\\\": [\\\"collapse\\\", \\\"hidden\\\", \\\"visible\\\", \\\"inherit\\\"]},\\\\n    \\\"white-space\\\":                 {\\\"values\\\": [\\\"normal\\\", \\\"nowrap\\\", \\\"pre\\\", \\\"pre-line\\\", \\\"pre-wrap\\\", \\\"inherit\\\"]},\\\\n    \\\"widows\\\":                      {\\\"values\\\": [\\\"inherit\\\"]},\\\\n    \\\"width\\\":                       {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]},\\\\n    \\\"word-break\\\":                  {\\\"values\\\": [\\\"normal\\\", \\\"break-all\\\", \\\"keep-all\\\"]},\\\\n    \\\"word-spacing\\\":                {\\\"values\\\": [\\\"normal\\\", \\\"inherit\\\"]},\\\\n    \\\"word-wrap\\\":                   {\\\"values\\\": [\\\"break-word\\\", \\\"normal\\\"]},\\\\n    \\\"z-index\\\":                     {\\\"values\\\": [\\\"auto\\\", \\\"inherit\\\"]}\\\\n}\\\\n\\\\n\\';});\\n\\n//# sourceURL=/text!CSSProperties.json\");\n\n","eval(\"/*\\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50, regexp: true */\\n/*global define, brackets, $ */\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\',\\'text!CSSProperties.json\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    var AppInit         = brackets.getModule(\\\"utils/AppInit\\\"),\\n        ExtensionUtils  = brackets.getModule(\\\"utils/ExtensionUtils\\\"),\\n        CodeHintManager = brackets.getModule(\\\"editor/CodeHintManager\\\"),\\n        CSSUtils        = brackets.getModule(\\\"language/CSSUtils\\\"),\\n        HTMLUtils       = brackets.getModule(\\\"language/HTMLUtils\\\"),\\n        LanguageManager = brackets.getModule(\\\"language/LanguageManager\\\"),\\n        TokenUtils      = brackets.getModule(\\\"utils/TokenUtils\\\"),\\n        StringMatch     = brackets.getModule(\\\"utils/StringMatch\\\"),\\n        ColorUtils      = brackets.getModule(\\\"utils/ColorUtils\\\"),\\n        CSSProperties   = require(\\\"text!CSSProperties.json\\\"),\\n        properties      = JSON.parse(CSSProperties);\\n    \\n    // Context of the last request for hints: either CSSUtils.PROP_NAME,\\n    // CSSUtils.PROP_VALUE or null.\\n    var lastContext,\\n        stringMatcherOptions = { preferPrefixMatches: true };\\n    \\n    /**\\n     * @constructor\\n     */\\n    function CssPropHints() {\\n        this.primaryTriggerKeys = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-()\\\";\\n        this.secondaryTriggerKeys = \\\":\\\";\\n        this.exclusion = null;\\n    }\\n\\n    /**\\n     * Get the CSS style text of the file open in the editor for this hinting session.\\n     * For a CSS file, this is just the text of the file. For an HTML file,\\n     * this will be only the text in the <style> tags.\\n     *\\n     * @return {string} the \\\"css\\\" text that can be sent to CSSUtils to extract all named flows.\\n     */\\n    CssPropHints.prototype.getCssStyleText = function () {\\n        if (LanguageManager.getLanguageForPath(this.editor.document.file.fullPath).getId() === \\\"html\\\") {\\n            // Collect text in all style blocks\\n            var text = \\\"\\\",\\n                styleBlocks = HTMLUtils.findBlocks(this.editor, \\\"css\\\");\\n            \\n            styleBlocks.forEach(function (styleBlock) {\\n                text += styleBlock.text;\\n            });\\n            \\n            return text;\\n        } else {\\n            // css file, just return the text\\n            return this.editor.document.getText();\\n        }\\n    };\\n    \\n    /**\\n     * Extract all the named flows from any \\\"flow-from\\\" or \\\"flow-into\\\" properties \\n     * in the current document. If we have the cached list of named flows and the \\n     * cursor is still on the same line as the cached cursor, then the cached list\\n     * is returned. Otherwise, we recollect all named flows and update the cache.\\n     *\\n     * @return {Array.<string>} All named flows available in the current document.\\n     */\\n    CssPropHints.prototype.getNamedFlows = function () {\\n        if (this.namedFlowsCache) {\\n            // If the cursor is no longer on the same line, then the cache is stale.\\n            // Delete cache so we can extract all named flows again.\\n            if (this.namedFlowsCache.cursor.line !== this.cursor.line) {\\n                this.namedFlowsCache = null;\\n            }\\n        }\\n        \\n        if (!this.namedFlowsCache) {\\n            this.namedFlowsCache = {};\\n            this.namedFlowsCache.flows = CSSUtils.extractAllNamedFlows(this.getCssStyleText());\\n            this.namedFlowsCache.cursor = { line: this.cursor.line, ch: this.cursor.ch };\\n        }\\n        \\n        return this.namedFlowsCache.flows;\\n    };\\n    \\n    /**\\n     * Check whether the exclusion is still the same as text after the cursor. \\n     * If not, reset it to null.\\n     *\\n     * @param {boolean} propNameOnly\\n     * true to indicate that we update the exclusion only if the cursor is inside property name context.\\n     * Otherwise, we also update exclusion for property value context.\\n     */\\n    CssPropHints.prototype.updateExclusion = function (propNameOnly) {\\n        var textAfterCursor;\\n        if (this.exclusion && this.info) {\\n            if (this.info.context === CSSUtils.PROP_NAME) {\\n                textAfterCursor = this.info.name.substr(this.info.offset);\\n            } else if (!propNameOnly && this.info.context === CSSUtils.PROP_VALUE) {\\n                textAfterCursor = this.info.value.substr(this.info.offset);\\n            }\\n            if (!CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                this.exclusion = null;\\n            }\\n        }\\n    };\\n    \\n    /**\\n     * Determines whether CSS propertyname or -name hints are available in the current editor\\n     * context.\\n     * \\n     * @param {Editor} editor \\n     * A non-null editor object for the active window.\\n     *\\n     * @param {String} implicitChar \\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {Boolean} \\n     * Determines whether the current provider is able to provide hints for\\n     * the given editor context and, in case implicitChar is non- null,\\n     * whether it is appropriate to do so.\\n     */\\n    CssPropHints.prototype.hasHints = function (editor, implicitChar) {\\n        this.editor = editor;\\n        var cursor = this.editor.getCursorPos();\\n\\n        lastContext = null;\\n        this.info = CSSUtils.getInfoAtPos(editor, cursor);\\n        \\n        if (this.info.context !== CSSUtils.PROP_NAME && this.info.context !== CSSUtils.PROP_VALUE) {\\n            return false;\\n        }\\n        \\n        if (implicitChar) {\\n            this.updateExclusion(false);\\n            if (this.info.context === CSSUtils.PROP_NAME) {\\n                // Check if implicitChar is the first character typed before an existing property name.\\n                if (!this.exclusion && this.info.offset === 1 && implicitChar === this.info.name[0]) {\\n                    this.exclusion = this.info.name.substr(this.info.offset);\\n                }\\n            }\\n            \\n            return (this.primaryTriggerKeys.indexOf(implicitChar) !== -1) ||\\n                   (this.secondaryTriggerKeys.indexOf(implicitChar) !== -1);\\n        } else if (this.info.context === CSSUtils.PROP_NAME) {\\n            if (this.info.offset === 0) {\\n                this.exclusion = this.info.name;\\n            } else {\\n                this.updateExclusion(true);\\n            }\\n        }\\n        \\n        return true;\\n    };\\n\\n    /**\\n     * Returns a sorted and formatted list of hints with the query substring\\n     * highlighted.\\n     * \\n     * @param {Array.<Object>} hints - the list of hints to format\\n     * @param {string} query - querystring used for highlighting matched\\n     *      portions of each hint\\n     * @return {Array.jQuery} sorted Array of jQuery DOM elements to insert\\n     */\\n    function formatHints(hints, query) {\\n        var hasColorSwatch = hints.some(function (token) {\\n            return token.color;\\n        });\\n\\n        StringMatch.basicMatchSort(hints);\\n        return hints.map(function (token) {\\n            var $hintObj = $(\\\"<span>\\\").addClass(\\\"brackets-css-hints\\\");\\n\\n            // highlight the matched portion of each hint\\n            if (token.stringRanges) {\\n                token.stringRanges.forEach(function (item) {\\n                    if (item.matched) {\\n                        $hintObj.append($(\\\"<span>\\\")\\n                            .text(item.text)\\n                            .addClass(\\\"matched-hint\\\"));\\n                    } else {\\n                        $hintObj.append(item.text);\\n                    }\\n                });\\n            } else {\\n                $hintObj.text(token.value);\\n            }\\n\\n            if (hasColorSwatch) {\\n                $hintObj = ColorUtils.formatColorHint($hintObj, token.color);\\n            }\\n\\n            return $hintObj;\\n        });\\n    }\\n    \\n    /**\\n     * Returns a list of availble CSS propertyname or -value hints if possible for the current\\n     * editor context. \\n     * \\n     * @param {Editor} implicitChar \\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {jQuery.Deferred|{\\n     *              hints: Array.<string|jQueryObject>,\\n     *              match: string,\\n     *              selectInitial: boolean,\\n     *              handleWideResults: boolean}}\\n     * Null if the provider wishes to end the hinting session. Otherwise, a\\n     * response object that provides:\\n     * 1. a sorted array hints that consists of strings\\n     * 2. a string match that is used by the manager to emphasize matching\\n     *    substrings when rendering the hint list\\n     * 3. a boolean that indicates whether the first result, if one exists,\\n     *    should be selected by default in the hint list window.\\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\\n     *    to allow result string to stretch width of display.\\n     */\\n    CssPropHints.prototype.getHints = function (implicitChar) {\\n        this.cursor = this.editor.getCursorPos();\\n        this.info = CSSUtils.getInfoAtPos(this.editor, this.cursor);\\n        \\n        var needle = this.info.name,\\n            valueNeedle = \\\"\\\",\\n            context = this.info.context,\\n            valueArray,\\n            type,\\n            namedFlows,\\n            result,\\n            selectInitial = false;\\n            \\n        // Clear the exclusion if the user moves the cursor with left/right arrow key.\\n        this.updateExclusion(true);\\n        \\n        if (context === CSSUtils.PROP_VALUE) {\\n            \\n            // Always select initial value\\n            selectInitial = true;\\n            \\n            // When switching from a NAME to a VALUE context, restart the session\\n            // to give other more specialized providers a chance to intervene.\\n            if (lastContext === CSSUtils.PROP_NAME) {\\n                return true;\\n            } else {\\n                lastContext = CSSUtils.PROP_VALUE;\\n            }\\n            \\n            if (!properties[needle]) {\\n                return null;\\n            }\\n            \\n            // Cursor is in an existing property value or partially typed value\\n            if (!this.info.isNewItem && this.info.index !== -1) {\\n                valueNeedle = this.info.values[this.info.index].trim();\\n                valueNeedle = valueNeedle.substr(0, this.info.offset);\\n            }\\n            \\n            valueArray = properties[needle].values;\\n            type = properties[needle].type;\\n            if (type === \\\"named-flow\\\") {\\n                namedFlows = this.getNamedFlows();\\n                \\n                if (valueNeedle.length === this.info.offset && namedFlows.indexOf(valueNeedle) !== -1) {\\n                    // Exclude the partially typed named flow at cursor since it\\n                    // is not an existing one used in other css rule.\\n                    namedFlows.splice(namedFlows.indexOf(valueNeedle), 1);\\n                }\\n                \\n                valueArray = valueArray.concat(namedFlows);\\n            } else if (type === \\\"color\\\") {\\n                valueArray = valueArray.concat(ColorUtils.COLOR_NAMES.map(function (color) {\\n                    return { text: color, color: color };\\n                }));\\n                valueArray.push(\\\"transparent\\\", \\\"currentColor\\\");\\n            }\\n            \\n            result = $.map(valueArray, function (pvalue) {\\n                var result = StringMatch.stringMatch(pvalue.text || pvalue, valueNeedle, stringMatcherOptions);\\n                if (result) {\\n                    if (pvalue.color) {\\n                        result.color = pvalue.color;\\n                    }\\n\\n                    return result;\\n                }\\n            });\\n\\n            return {\\n                hints: formatHints(result, valueNeedle),\\n                match: null, // the CodeHintManager should not format the results\\n                selectInitial: selectInitial\\n            };\\n        } else if (context === CSSUtils.PROP_NAME) {\\n            \\n            // Select initial property if anything has been typed\\n            if (this.primaryTriggerKeys.indexOf(implicitChar) !== -1 || needle !== \\\"\\\") {\\n                selectInitial = true;\\n            }\\n            \\n            lastContext = CSSUtils.PROP_NAME;\\n            needle = needle.substr(0, this.info.offset);\\n   \\n            result = $.map(properties, function (pvalues, pname) {\\n                var result = StringMatch.stringMatch(pname, needle, stringMatcherOptions);\\n                if (result) {\\n                    return result;\\n                }\\n            });\\n            \\n            return {\\n                hints: formatHints(result, needle),\\n                match: null, // the CodeHintManager should not format the results\\n                selectInitial: selectInitial,\\n                handleWideResults: false\\n            };\\n        }\\n        return null;\\n    };\\n    \\n    /**\\n     * Inserts a given CSS protertyname or -value hint into the current editor context. \\n     * \\n     * @param {String} hint \\n     * The hint to be inserted into the editor context.\\n     * \\n     * @return {Boolean} \\n     * Indicates whether the manager should follow hint insertion with an\\n     * additional explicit hint request.\\n     */\\n    CssPropHints.prototype.insertHint = function (hint) {\\n        var offset = this.info.offset,\\n            cursor = this.editor.getCursorPos(),\\n            start = {line: -1, ch: -1},\\n            end = {line: -1, ch: -1},\\n            keepHints = false,\\n            adjustCursor = false,\\n            newCursor,\\n            ctx;\\n        \\n        if (hint.jquery) {\\n            hint = hint.text();\\n        }\\n        \\n        if (this.info.context !== CSSUtils.PROP_NAME && this.info.context !== CSSUtils.PROP_VALUE) {\\n            return false;\\n        }\\n        \\n        start.line = end.line = cursor.line;\\n        start.ch = cursor.ch - offset;\\n\\n        if (this.info.context === CSSUtils.PROP_NAME) {\\n            keepHints = true;\\n            var textAfterCursor = this.info.name.substr(this.info.offset);\\n            if (this.info.name.length === 0 || CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                // It\\'s a new insertion, so append a colon and set keepHints\\n                // to show property value hints.\\n                hint += \\\": \\\";\\n                end.ch = start.ch;\\n                end.ch += offset;\\n                    \\n                if (this.exclusion) {\\n                    // Append a space to the end of hint to insert and then adjust\\n                    // the cursor before that space.\\n                    hint += \\\" \\\";\\n                    adjustCursor = true;\\n                    newCursor = { line: cursor.line,\\n                                  ch: start.ch + hint.length - 1 };\\n                    this.exclusion = null;\\n                }\\n            } else {\\n                // It\\'s a replacement of an existing one or just typed in property.\\n                // So we need to check whether there is an existing colon following \\n                // the current property name. If a colon already exists, then we also \\n                // adjust the cursor position and show code hints for property values.\\n                end.ch = start.ch + this.info.name.length;\\n                ctx = TokenUtils.getInitialContext(this.editor._codeMirror, cursor);\\n                if (ctx.token.string.length > 0 && !/\\\\S/.test(ctx.token.string)) {\\n                    // We\\'re at the very beginning of a property name. So skip it \\n                    // before we locate the colon following it.\\n                    TokenUtils.moveNextToken(ctx);\\n                }\\n                if (TokenUtils.moveSkippingWhitespace(TokenUtils.moveNextToken, ctx) && ctx.token.string === \\\":\\\") {\\n                    adjustCursor = true;\\n                    newCursor = { line: cursor.line,\\n                                  ch: cursor.ch + (hint.length - this.info.name.length) };\\n                    // Adjust cursor to the position after any whitespace that follows the colon, if there is any.\\n                    if (TokenUtils.moveNextToken(ctx) && ctx.token.string.length > 0 && !/\\\\S/.test(ctx.token.string)) {\\n                        newCursor.ch += ctx.token.string.length;\\n                    }\\n                } else {\\n                    hint += \\\": \\\";\\n                }\\n            }\\n        } else {\\n            if (!this.info.isNewItem && this.info.index !== -1) {\\n                // Replacing an existing property value or partially typed value\\n                end.ch = start.ch + this.info.values[this.info.index].length;\\n            } else {\\n                // Inserting a new property value\\n                end.ch = start.ch;\\n            }\\n\\n            var parenMatch = hint.match(/\\\\(.*?\\\\)/);\\n            if (parenMatch) {\\n                // value has (...), so place cursor inside opening paren\\n                // and keep hints open\\n                adjustCursor = true;\\n                newCursor = { line: cursor.line,\\n                              ch: start.ch + parenMatch.index + 1 };\\n                keepHints = true;\\n            }\\n        }\\n        \\n        // HACK (tracking adobe/brackets#1688): We talk to the private CodeMirror instance\\n        // directly to replace the range instead of using the Document, as we should. The\\n        // reason is due to a flaw in our current document synchronization architecture when\\n        // inline editors are open.\\n        this.editor._codeMirror.replaceRange(hint, start, end);\\n        \\n        if (adjustCursor) {\\n            this.editor.setCursorPos(newCursor);\\n        }\\n        \\n        return keepHints;\\n    };\\n    \\n    AppInit.appReady(function () {\\n        var cssPropHints = new CssPropHints();\\n        CodeHintManager.registerHintProvider(cssPropHints, [\\\"css\\\", \\\"scss\\\", \\\"less\\\"], 0);\\n        \\n        ExtensionUtils.loadStyleSheet(module, \\\"styles/brackets-css-hints.css\\\");\\n        \\n        // For unit testing\\n        exports.cssPropHintProvider = cssPropHints;\\n    });\\n});\\n\\n//# sourceURL=/main.js\");\n\n"]}