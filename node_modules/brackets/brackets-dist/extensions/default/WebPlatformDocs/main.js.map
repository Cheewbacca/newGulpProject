{"version":3,"file":"main.js","sources":["../../../thirdparty/text/text.js","InlineDocsViewer.html!text","InlineDocsViewer.js","main.js"],"names":["eval"],"mappings":"AAAAA,KAAA,yqfCCAA,KAAA,u+BAEAA,KCHA,m+QAEAA,KCFA","sourcesContent":["eval(\"/**\\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\\n * Available via the MIT or new BSD license.\\n * see: http://github.com/requirejs/text for details\\n */\\n/*jslint regexp: true */\\n/*global require, XMLHttpRequest, ActiveXObject,\\n  define, window, process, Packages,\\n  java, location, Components, FileUtils */\\n\\ndefine(\\'text\\',[\\'module\\'], function (module) {\\n    \\'use strict\\';\\n\\n    var text, fs, Cc, Ci, xpcIsWindows,\\n        progIds = [\\'Msxml2.XMLHTTP\\', \\'Microsoft.XMLHTTP\\', \\'Msxml2.XMLHTTP.4.0\\'],\\n        xmlRegExp = /^\\\\s*<\\\\?xml(\\\\s)+version=[\\\\\\'\\\\\\\"](\\\\d)*.(\\\\d)*[\\\\\\'\\\\\\\"](\\\\s)*\\\\?>/im,\\n        bodyRegExp = /<body[^>]*>\\\\s*([\\\\s\\\\S]+)\\\\s*<\\\\/body>/im,\\n        hasLocation = typeof location !== \\'undefined\\' && location.href,\\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\\\:/, \\'\\'),\\n        defaultHostName = hasLocation && location.hostname,\\n        defaultPort = hasLocation && (location.port || undefined),\\n        buildMap = {},\\n        masterConfig = (module.config && module.config()) || {};\\n\\n    text = {\\n        version: \\'2.0.10\\',\\n\\n        strip: function (content) {\\n            //Strips <?xml ...?> declarations so that external SVG and XML\\n            //documents can be added to a document without worry. Also, if the string\\n            //is an HTML document, only the part inside the body tag is returned.\\n            if (content) {\\n                content = content.replace(xmlRegExp, \\\"\\\");\\n                var matches = content.match(bodyRegExp);\\n                if (matches) {\\n                    content = matches[1];\\n                }\\n            } else {\\n                content = \\\"\\\";\\n            }\\n            return content;\\n        },\\n\\n        jsEscape: function (content) {\\n            return content.replace(/([\\'\\\\\\\\])/g, \\'\\\\\\\\$1\\')\\n                .replace(/[\\\\f]/g, \\\"\\\\\\\\f\\\")\\n                .replace(/[\\\\b]/g, \\\"\\\\\\\\b\\\")\\n                .replace(/[\\\\n]/g, \\\"\\\\\\\\n\\\")\\n                .replace(/[\\\\t]/g, \\\"\\\\\\\\t\\\")\\n                .replace(/[\\\\r]/g, \\\"\\\\\\\\r\\\")\\n                .replace(/[\\\\u2028]/g, \\\"\\\\\\\\u2028\\\")\\n                .replace(/[\\\\u2029]/g, \\\"\\\\\\\\u2029\\\");\\n        },\\n\\n        createXhr: masterConfig.createXhr || function () {\\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\\n            var xhr, i, progId;\\n            if (typeof XMLHttpRequest !== \\\"undefined\\\") {\\n                return new XMLHttpRequest();\\n            } else if (typeof ActiveXObject !== \\\"undefined\\\") {\\n                for (i = 0; i < 3; i += 1) {\\n                    progId = progIds[i];\\n                    try {\\n                        xhr = new ActiveXObject(progId);\\n                    } catch (e) {}\\n\\n                    if (xhr) {\\n                        progIds = [progId];  // so faster next time\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return xhr;\\n        },\\n\\n        /**\\n         * Parses a resource name into its component parts. Resource names\\n         * look like: module/name.ext!strip, where the !strip part is\\n         * optional.\\n         * @param {String} name the resource name\\n         * @returns {Object} with properties \\\"moduleName\\\", \\\"ext\\\" and \\\"strip\\\"\\n         * where strip is a boolean.\\n         */\\n        parseName: function (name) {\\n            var modName, ext, temp,\\n                strip = false,\\n                index = name.indexOf(\\\".\\\"),\\n                isRelative = name.indexOf(\\'./\\') === 0 ||\\n                             name.indexOf(\\'../\\') === 0;\\n\\n            if (index !== -1 && (!isRelative || index > 1)) {\\n                modName = name.substring(0, index);\\n                ext = name.substring(index + 1, name.length);\\n            } else {\\n                modName = name;\\n            }\\n\\n            temp = ext || modName;\\n            index = temp.indexOf(\\\"!\\\");\\n            if (index !== -1) {\\n                //Pull off the strip arg.\\n                strip = temp.substring(index + 1) === \\\"strip\\\";\\n                temp = temp.substring(0, index);\\n                if (ext) {\\n                    ext = temp;\\n                } else {\\n                    modName = temp;\\n                }\\n            }\\n\\n            return {\\n                moduleName: modName,\\n                ext: ext,\\n                strip: strip\\n            };\\n        },\\n\\n        xdRegExp: /^((\\\\w+)\\\\:)?\\\\/\\\\/([^\\\\/\\\\\\\\]+)/,\\n\\n        /**\\n         * Is an URL on another domain. Only works for browser use, returns\\n         * false in non-browser environments. Only used to know if an\\n         * optimized .js version of a text resource should be loaded\\n         * instead.\\n         * @param {String} url\\n         * @returns Boolean\\n         */\\n        useXhr: function (url, protocol, hostname, port) {\\n            var uProtocol, uHostName, uPort,\\n                match = text.xdRegExp.exec(url);\\n            if (!match) {\\n                return true;\\n            }\\n            uProtocol = match[2];\\n            uHostName = match[3];\\n\\n            uHostName = uHostName.split(\\':\\');\\n            uPort = uHostName[1];\\n            uHostName = uHostName[0];\\n\\n            return (!uProtocol || uProtocol === protocol) &&\\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\\n                   ((!uPort && !uHostName) || uPort === port);\\n        },\\n\\n        finishLoad: function (name, strip, content, onLoad) {\\n            content = strip ? text.strip(content) : content;\\n            if (masterConfig.isBuild) {\\n                buildMap[name] = content;\\n            }\\n            onLoad(content);\\n        },\\n\\n        load: function (name, req, onLoad, config) {\\n            //Name has format: some.module.filext!strip\\n            //The strip part is optional.\\n            //if strip is present, then that means only get the string contents\\n            //inside a body tag in an HTML string. For XML/SVG content it means\\n            //removing the <?xml ...?> declarations so the content can be inserted\\n            //into the current doc without problems.\\n\\n            // Do not bother with the work if a build and text will\\n            // not be inlined.\\n            if (config.isBuild && !config.inlineText) {\\n                onLoad();\\n                return;\\n            }\\n\\n            masterConfig.isBuild = config.isBuild;\\n\\n            var parsed = text.parseName(name),\\n                nonStripName = parsed.moduleName +\\n                    (parsed.ext ? \\'.\\' + parsed.ext : \\'\\'),\\n                url = req.toUrl(nonStripName),\\n                useXhr = (masterConfig.useXhr) ||\\n                         text.useXhr;\\n\\n            // Do not load if it is an empty: url\\n            if (url.indexOf(\\'empty:\\') === 0) {\\n                onLoad();\\n                return;\\n            }\\n\\n            //Load the text. Use XHR if possible and in a browser.\\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\\n                text.get(url, function (content) {\\n                    text.finishLoad(name, parsed.strip, content, onLoad);\\n                }, function (err) {\\n                    if (onLoad.error) {\\n                        onLoad.error(err);\\n                    }\\n                });\\n            } else {\\n                //Need to fetch the resource across domains. Assume\\n                //the resource has been optimized into a JS module. Fetch\\n                //by the module name + extension, but do not include the\\n                //!strip part to avoid file system issues.\\n                req([nonStripName], function (content) {\\n                    text.finishLoad(parsed.moduleName + \\'.\\' + parsed.ext,\\n                                    parsed.strip, content, onLoad);\\n                });\\n            }\\n        },\\n\\n        write: function (pluginName, moduleName, write, config) {\\n            if (buildMap.hasOwnProperty(moduleName)) {\\n                var content = text.jsEscape(buildMap[moduleName]);\\n                write.asModule(pluginName + \\\"!\\\" + moduleName,\\n                               \\\"define(function () { return \\'\\\" +\\n                                   content +\\n                               \\\"\\';});\\\\n\\\");\\n            }\\n        },\\n\\n        writeFile: function (pluginName, moduleName, req, write, config) {\\n            var parsed = text.parseName(moduleName),\\n                extPart = parsed.ext ? \\'.\\' + parsed.ext : \\'\\',\\n                nonStripName = parsed.moduleName + extPart,\\n                //Use a \\'.js\\' file name so that it indicates it is a\\n                //script that can be loaded across domains.\\n                fileName = req.toUrl(parsed.moduleName + extPart) + \\'.js\\';\\n\\n            //Leverage own load() method to load plugin value, but only\\n            //write out values that do not have the strip argument,\\n            //to avoid any potential issues with ! in file names.\\n            text.load(nonStripName, req, function (value) {\\n                //Use own write() method to construct full module value.\\n                //But need to create shell that translates writeFile\\'s\\n                //write() to the right interface.\\n                var textWrite = function (contents) {\\n                    return write(fileName, contents);\\n                };\\n                textWrite.asModule = function (moduleName, contents) {\\n                    return write.asModule(moduleName, fileName, contents);\\n                };\\n\\n                text.write(pluginName, nonStripName, textWrite, config);\\n            }, config);\\n        }\\n    };\\n\\n    if (masterConfig.env === \\'node\\' || (!masterConfig.env &&\\n            typeof process !== \\\"undefined\\\" &&\\n            process.versions &&\\n            !!process.versions.node &&\\n            !process.versions[\\'node-webkit\\'])) {\\n        //Using special require.nodeRequire, something added by r.js.\\n        fs = require.nodeRequire(\\'fs\\');\\n\\n        text.get = function (url, callback, errback) {\\n            try {\\n                var file = fs.readFileSync(url, \\'utf8\\');\\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\\n                if (file.indexOf(\\'\\\\uFEFF\\') === 0) {\\n                    file = file.substring(1);\\n                }\\n                callback(file);\\n            } catch (e) {\\n                errback(e);\\n            }\\n        };\\n    } else if (masterConfig.env === \\'xhr\\' || (!masterConfig.env &&\\n            text.createXhr())) {\\n        text.get = function (url, callback, errback, headers) {\\n            var xhr = text.createXhr(), header;\\n            xhr.open(\\'GET\\', url, true);\\n\\n            //Allow plugins direct access to xhr headers\\n            if (headers) {\\n                for (header in headers) {\\n                    if (headers.hasOwnProperty(header)) {\\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\\n                    }\\n                }\\n            }\\n\\n            //Allow overrides specified in config\\n            if (masterConfig.onXhr) {\\n                masterConfig.onXhr(xhr, url);\\n            }\\n\\n            xhr.onreadystatechange = function (evt) {\\n                var status, err;\\n                //Do not explicitly handle errors, those should be\\n                //visible via console output in the browser.\\n                if (xhr.readyState === 4) {\\n                    status = xhr.status;\\n                    if (status > 399 && status < 600) {\\n                        //An http 4xx or 5xx error. Signal an error.\\n                        err = new Error(url + \\' HTTP status: \\' + status);\\n                        err.xhr = xhr;\\n                        errback(err);\\n                    } else {\\n                        callback(xhr.responseText);\\n                    }\\n\\n                    if (masterConfig.onXhrComplete) {\\n                        masterConfig.onXhrComplete(xhr, url);\\n                    }\\n                }\\n            };\\n            xhr.send(null);\\n        };\\n    } else if (masterConfig.env === \\'rhino\\' || (!masterConfig.env &&\\n            typeof Packages !== \\'undefined\\' && typeof java !== \\'undefined\\')) {\\n        //Why Java, why is this so awkward?\\n        text.get = function (url, callback) {\\n            var stringBuffer, line,\\n                encoding = \\\"utf-8\\\",\\n                file = new java.io.File(url),\\n                lineSeparator = java.lang.System.getProperty(\\\"line.separator\\\"),\\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\\n                content = \\'\\';\\n            try {\\n                stringBuffer = new java.lang.StringBuffer();\\n                line = input.readLine();\\n\\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\\n                // http://www.unicode.org/faq/utf_bom.html\\n\\n                // Note that when we use utf-8, the BOM should appear as \\\"EF BB BF\\\", but it doesn\\'t due to this bug in the JDK:\\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\\n                    // Eat the BOM, since we\\'ve already found the encoding on this file,\\n                    // and we plan to concatenating this buffer with others; the BOM should\\n                    // only appear at the top of a file.\\n                    line = line.substring(1);\\n                }\\n\\n                if (line !== null) {\\n                    stringBuffer.append(line);\\n                }\\n\\n                while ((line = input.readLine()) !== null) {\\n                    stringBuffer.append(lineSeparator);\\n                    stringBuffer.append(line);\\n                }\\n                //Make sure we return a JavaScript string and not a Java string.\\n                content = String(stringBuffer.toString()); //String\\n            } finally {\\n                input.close();\\n            }\\n            callback(content);\\n        };\\n    } else if (masterConfig.env === \\'xpconnect\\' || (!masterConfig.env &&\\n            typeof Components !== \\'undefined\\' && Components.classes &&\\n            Components.interfaces)) {\\n        //Avert your gaze!\\n        Cc = Components.classes,\\n        Ci = Components.interfaces;\\n        Components.utils[\\'import\\'](\\'resource://gre/modules/FileUtils.jsm\\');\\n        xpcIsWindows = (\\'@mozilla.org/windows-registry-key;1\\' in Cc);\\n\\n        text.get = function (url, callback) {\\n            var inStream, convertStream, fileObj,\\n                readData = {};\\n\\n            if (xpcIsWindows) {\\n                url = url.replace(/\\\\//g, \\'\\\\\\\\\\');\\n            }\\n\\n            fileObj = new FileUtils.File(url);\\n\\n            //XPCOM, you so crazy\\n            try {\\n                inStream = Cc[\\'@mozilla.org/network/file-input-stream;1\\']\\n                           .createInstance(Ci.nsIFileInputStream);\\n                inStream.init(fileObj, 1, 0, false);\\n\\n                convertStream = Cc[\\'@mozilla.org/intl/converter-input-stream;1\\']\\n                                .createInstance(Ci.nsIConverterInputStream);\\n                convertStream.init(inStream, \\\"utf-8\\\", inStream.available(),\\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\\n\\n                convertStream.readString(inStream.available(), readData);\\n                convertStream.close();\\n                inStream.close();\\n                callback(readData.value);\\n            } catch (e) {\\n                throw new Error((fileObj && fileObj.path || \\'\\') + \\': \\' + e);\\n            }\\n        };\\n    }\\n    return text;\\n});\\n\\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js\");\n\n","\neval(\"define(\\'text!InlineDocsViewer.html\\',[],function () { return \\'<div class=\\\"css-prop-defn\\\" tabIndex=\\\"0\\\"> <!-- tabIndex needed: otherwise click focuses CodeMirror scroller and Esc won\\\\\\'t work -->\\\\n    <div class=\\\"css-prop-summary\\\">\\\\n        <h1>{{propName}}</h1>\\\\n        <div>{{{summary}}}</div>\\\\n    </div>\\\\n    <div class=\\\"divider-holder no-focus\\\">\\\\n        <div class=\\\"divider\\\"></div>\\\\n    </div>\\\\n    <div class=\\\"css-prop-values quiet-scrollbars\\\">\\\\n        <div class=\\\"scroller\\\" tabIndex=\\\"0\\\"> <!-- tabIndex needed: otherwise can\\\\\\'t be focused on open or via click -->\\\\n            <dl>\\\\n                {{#propValues}}\\\\n                <dt>{{{value}}}</dt>\\\\n                <dd>{{{description}}}</dd>\\\\n                {{/propValues}}\\\\n            </dl>\\\\n        </div>\\\\n    </div>\\\\n    <div class=\\\"content-bottom\\\"></div>\\\\n    <a class=\\\"more-info\\\" href=\\\"{{url}}\\\" title=\\\"{{url}}\\\">{{Strings.DOCS_MORE_LINK}}</a>\\\\n</div>\\';});\\n\\n//# sourceURL=/text!InlineDocsViewer.html\");\n\n","eval(\"/*\\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\\n/*global define, brackets, $, window, Mustache */\\n\\n/**\\n * Inline widget to display WebPlatformDocs JSON data nicely formatted\\n */\\ndefine(\\'InlineDocsViewer\\',[\\'require\\',\\'exports\\',\\'module\\',\\'text!InlineDocsViewer.html\\'],function (require, exports, module) {\\n    \\'use strict\\';\\n    \\n    // Load Brackets modules\\n    var ExtensionUtils  = brackets.getModule(\\\"utils/ExtensionUtils\\\"),\\n        InlineWidget    = brackets.getModule(\\\"editor/InlineWidget\\\").InlineWidget,\\n        KeyEvent        = brackets.getModule(\\\"utils/KeyEvent\\\"),\\n        Strings         = brackets.getModule(\\\"strings\\\");\\n    \\n    // Load template\\n    var inlineEditorTemplate = require(\\\"text!InlineDocsViewer.html\\\");\\n    \\n    // Lines height for scrolling\\n    var SCROLL_LINE_HEIGHT = 40;\\n    \\n    // Load CSS\\n    ExtensionUtils.loadStyleSheet(module, \\\"WebPlatformDocs.less\\\");\\n    \\n    \\n    /**\\n     * @param {!string} cssPropName\\n     * @param {!{SUMMARY:string, URL:string, VALUES:?Array.<{value:string, description:string}>}} cssPropDetails\\n     */\\n    function InlineDocsViewer(cssPropName, cssPropDetails) {\\n        InlineWidget.call(this);\\n        \\n        var templateVars = {\\n            propName    : cssPropName,\\n            summary     : cssPropDetails.SUMMARY,\\n            propValues  : cssPropDetails.VALUES || [],\\n            url         : cssPropDetails.URL,\\n            Strings     : Strings\\n        };\\n        \\n        var html = Mustache.render(inlineEditorTemplate, templateVars);\\n        \\n        this.$wrapperDiv = $(html);\\n        this.$htmlContent.append(this.$wrapperDiv);\\n        \\n        // Preprocess link tags to make URLs absolute\\n        this.$wrapperDiv.find(\\\"a\\\").each(function (index, elem) {\\n            var $elem = $(elem);\\n            var url = $elem.attr(\\\"href\\\");\\n            if (url) {\\n                if (url.charAt(0) === \\\"#\\\") {\\n                    // Anchors in JSON data are relative to page URL\\n                    url = templateVars.url + url;\\n                } else if (url.substr(0, 4) !== \\\"http\\\") {\\n                    // URLs in JSON data are relative\\n                    url = \\\"http://docs.webplatform.org\\\" + (url.charAt(0) !== \\\"/\\\" ? \\\"/\\\" : \\\"\\\") + url;\\n                }\\n                $elem.attr(\\\"href\\\", url);\\n            }\\n            $elem.attr(\\\"title\\\", url);\\n        });\\n        \\n        this._sizeEditorToContent   = this._sizeEditorToContent.bind(this);\\n        this._handleWheelScroll     = this._handleWheelScroll.bind(this);\\n\\n        this.$scroller = this.$wrapperDiv.find(\\\".scroller\\\");\\n        this.$scroller.on(\\\"mousewheel\\\", this._handleWheelScroll);\\n        this._onKeydown = this._onKeydown.bind(this);\\n    }\\n    \\n    InlineDocsViewer.prototype = Object.create(InlineWidget.prototype);\\n    InlineDocsViewer.prototype.constructor = InlineDocsViewer;\\n    InlineDocsViewer.prototype.parentClass = InlineWidget.prototype;\\n    \\n    InlineDocsViewer.prototype.$wrapperDiv = null;\\n    InlineDocsViewer.prototype.$scroller = null;\\n    \\n    /**\\n     * Handle scrolling.\\n     *\\n     * @param {Event} event Keyboard event or mouse scrollwheel event\\n     * @param {boolean} scrollingUp Is event to scroll up?\\n     * @param {DOMElement} scroller Element to scroll\\n     * @return {boolean} indication whether key was handled\\n     */\\n    InlineDocsViewer.prototype._handleScrolling = function (event, scrollingUp, scroller) {\\n        // We need to block the event from both the host CodeMirror code (by stopping bubbling) and the\\n        // browser\\'s native behavior (by preventing default). We preventDefault() *only* when the docs\\n        // scroller is at its limit (when an ancestor would get scrolled instead); otherwise we\\'d block\\n        // normal scrolling of the docs themselves.\\n        event.stopPropagation();\\n        if (scrollingUp && scroller.scrollTop === 0) {\\n            event.preventDefault();\\n            return true;\\n        } else if (!scrollingUp && scroller.scrollTop + scroller.clientHeight >= scroller.scrollHeight) {\\n            event.preventDefault();\\n            return true;\\n        }\\n        \\n        return false;\\n    };\\n    \\n    /** Don\\'t allow scrollwheel/trackpad to bubble up to host editor - makes scrolling docs painful */\\n    InlineDocsViewer.prototype._handleWheelScroll = function (event) {\\n        var scrollingUp = (event.originalEvent.wheelDeltaY > 0),\\n            scroller = event.currentTarget;\\n        \\n        // If content has no scrollbar, let host editor scroll normally\\n        if (scroller.clientHeight >= scroller.scrollHeight) {\\n            return;\\n        }\\n        \\n        this._handleScrolling(event, scrollingUp, scroller);\\n    };\\n    \\n    \\n    /**\\n     * Convert keydown events into navigation actions.\\n     *\\n     * @param {KeyboardEvent} event\\n     * @return {boolean} indication whether key was handled\\n     */\\n    InlineDocsViewer.prototype._onKeydown = function (event) {\\n        var keyCode  = event.keyCode,\\n            scroller = this.$scroller[0],\\n            scrollPos;\\n\\n        // Ignore key events with modifier keys\\n        if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\\n            return false;\\n        }\\n\\n        // Handle keys that we\\'re interested in\\n        scrollPos = scroller.scrollTop;\\n\\n        switch (keyCode) {\\n        case KeyEvent.DOM_VK_UP:\\n            scrollPos = Math.max(0, scrollPos - SCROLL_LINE_HEIGHT);\\n            break;\\n        case KeyEvent.DOM_VK_PAGE_UP:\\n            scrollPos = Math.max(0, scrollPos - scroller.clientHeight);\\n            break;\\n        case KeyEvent.DOM_VK_DOWN:\\n            scrollPos = Math.min(scroller.scrollHeight - scroller.clientHeight,\\n                                 scrollPos + SCROLL_LINE_HEIGHT);\\n            break;\\n        case KeyEvent.DOM_VK_PAGE_DOWN:\\n            scrollPos = Math.min(scroller.scrollHeight - scroller.clientHeight,\\n                                 scrollPos + scroller.clientHeight);\\n            break;\\n        default:\\n            // Ignore other keys\\n            return false;\\n        }\\n\\n        scroller.scrollTop = scrollPos;\\n\\n        // Disallow further processing\\n        event.stopPropagation();\\n        event.preventDefault();\\n        return true;\\n    };\\n    \\n    InlineDocsViewer.prototype.onAdded = function () {\\n        InlineDocsViewer.prototype.parentClass.onAdded.apply(this, arguments);\\n        \\n        // Set height initially, and again whenever width might have changed (word wrap)\\n        this._sizeEditorToContent();\\n        $(window).on(\\\"resize\\\", this._sizeEditorToContent);\\n\\n        // Set focus\\n        this.$scroller[0].focus();\\n        this.$wrapperDiv[0].addEventListener(\\\"keydown\\\", this._onKeydown, true);\\n    };\\n    \\n    InlineDocsViewer.prototype.onClosed = function () {\\n        InlineDocsViewer.prototype.parentClass.onClosed.apply(this, arguments);\\n        \\n        $(window).off(\\\"resize\\\", this._sizeEditorToContent);\\n        this.$wrapperDiv[0].removeEventListener(\\\"keydown\\\", this._onKeydown, true);\\n    };\\n    \\n    InlineDocsViewer.prototype._sizeEditorToContent = function () {\\n        this.hostEditor.setInlineWidgetHeight(this, this.$wrapperDiv.height() + 20, true);\\n    };\\n    \\n    \\n    module.exports = InlineDocsViewer;\\n});\\n\\n//# sourceURL=/InlineDocsViewer.js\");\n\n","eval(\"/*\\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\\n/*global $, define, brackets */\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\',\\'InlineDocsViewer\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    // Core modules\\n    var EditorManager        = brackets.getModule(\\\"editor/EditorManager\\\"),\\n        FileSystem           = brackets.getModule(\\\"filesystem/FileSystem\\\"),\\n        FileUtils            = brackets.getModule(\\\"file/FileUtils\\\"),\\n        ExtensionUtils       = brackets.getModule(\\\"utils/ExtensionUtils\\\"),\\n        CSSUtils             = brackets.getModule(\\\"language/CSSUtils\\\");\\n    \\n    // Extension modules\\n    var InlineDocsViewer = require(\\\"InlineDocsViewer\\\");\\n    \\n    \\n    /** @type {?$.Promise} */\\n    var _cssDocsPromise = null;\\n    \\n    /**\\n     * Lazily loads JSON docs files. Returns a Promise the is resolved with the parsed Object, or\\n     * rejected if the file is missing/corrupt.\\n     * @return {!$.Promise}\\n     */\\n    function getCSSDocs() {\\n        if (!_cssDocsPromise) {\\n            var result = new $.Deferred();\\n            \\n            var path = ExtensionUtils.getModulePath(module, \\\"css.json\\\"),\\n                file = FileSystem.getFileForPath(path);\\n            \\n            FileUtils.readAsText(file)\\n                .done(function (text) {\\n                    var jsonData;\\n                    try {\\n                        jsonData = JSON.parse(text);\\n                    } catch (ex) {\\n                        console.error(\\\"Malformed CSS documentation database: \\\", ex);\\n                        result.reject();\\n                    }\\n                    result.resolve(jsonData);  // ignored if we already reject()ed above\\n                })\\n                .fail(function (err) {\\n                    console.error(\\\"Unable to load CSS documentation database: \\\", err);\\n                    result.reject();\\n                });\\n            \\n            _cssDocsPromise = result.promise();\\n        }\\n        \\n        return _cssDocsPromise;\\n    }\\n    \\n    \\n    /**\\n     * Inline docs provider. Currently looks up docs based on CSS properties only.\\n     *\\n     * @param {!Editor} editor\\n     * @param {!{line:Number, ch:Number}} pos\\n     * @return {?$.Promise} resolved with an InlineWidget; null if we\\'re not going to provide anything\\n     */\\n    function inlineProvider(hostEditor, pos) {\\n        var langId = hostEditor.getLanguageForSelection().getId();\\n        // Only provide docs when cursor is in CSS content\\n        if (langId !== \\\"css\\\" && langId !== \\\"scss\\\" && langId !== \\\"less\\\") {\\n            return null;\\n        }\\n        \\n        // Only provide docs if the selection is within a single line\\n        var sel = hostEditor.getSelection();\\n        if (sel.start.line !== sel.end.line) {\\n            return null;\\n        }\\n        \\n        // Explicitly use selection start rather than pos, which is usually selection end\\n        var cssInfo = CSSUtils.getInfoAtPos(hostEditor, sel.start);\\n        \\n        // Are we at a propety name (or in a value where name is discernible?)\\n        if (cssInfo && cssInfo.name) {\\n            var cssPropName = cssInfo.name,\\n                result = new $.Deferred();\\n            \\n            // Load JSON file if not done yet\\n            getCSSDocs()\\n                .done(function (cssDocs) {\\n                    // Construct inline widget (if we have docs for this property)\\n                    var cssPropDetails = cssDocs.PROPERTIES[\\\"css/properties/\\\" + cssPropName];\\n                    if (!cssPropDetails) {\\n                        cssPropName = cssPropName.replace(/^-(webkit|moz|ms|o)-/, \\\"\\\"); // remove possible vendor prefixes\\n                        if (cssPropName) {\\n                            cssPropDetails = cssDocs.PROPERTIES[\\\"css/properties/\\\" + cssPropName];\\n                        }\\n                    }\\n                    if (cssPropDetails) {\\n                        var inlineWidget = new InlineDocsViewer(cssPropName, cssPropDetails);\\n                        inlineWidget.load(hostEditor);\\n                        result.resolve(inlineWidget);\\n                        \\n                    } else {\\n                        result.reject();\\n                    }\\n                })\\n                .fail(function () {\\n                    result.reject();\\n                });\\n            \\n            return result.promise();\\n            \\n        } else {\\n            return null;\\n        }\\n    }\\n    \\n    // Register as inline docs provider\\n    EditorManager.registerInlineDocsProvider(inlineProvider);\\n\\n    exports._getCSSDocs      = getCSSDocs;\\n    exports._inlineProvider  = inlineProvider;\\n});\\n\\n//# sourceURL=/main.js\");\n\n"]}