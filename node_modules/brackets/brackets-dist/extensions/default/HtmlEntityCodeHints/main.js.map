{"version":3,"file":"main.js","sources":["../../../thirdparty/text/text.js","SpecialChars.json!text","main.js"],"names":["eval"],"mappings":"AAAAA,KAAA,yqfCCAA,KAAA,yyICDAA,KAAA","sourcesContent":["eval(\"/**\\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\\n * Available via the MIT or new BSD license.\\n * see: http://github.com/requirejs/text for details\\n */\\n/*jslint regexp: true */\\n/*global require, XMLHttpRequest, ActiveXObject,\\n  define, window, process, Packages,\\n  java, location, Components, FileUtils */\\n\\ndefine(\\'text\\',[\\'module\\'], function (module) {\\n    \\'use strict\\';\\n\\n    var text, fs, Cc, Ci, xpcIsWindows,\\n        progIds = [\\'Msxml2.XMLHTTP\\', \\'Microsoft.XMLHTTP\\', \\'Msxml2.XMLHTTP.4.0\\'],\\n        xmlRegExp = /^\\\\s*<\\\\?xml(\\\\s)+version=[\\\\\\'\\\\\\\"](\\\\d)*.(\\\\d)*[\\\\\\'\\\\\\\"](\\\\s)*\\\\?>/im,\\n        bodyRegExp = /<body[^>]*>\\\\s*([\\\\s\\\\S]+)\\\\s*<\\\\/body>/im,\\n        hasLocation = typeof location !== \\'undefined\\' && location.href,\\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\\\:/, \\'\\'),\\n        defaultHostName = hasLocation && location.hostname,\\n        defaultPort = hasLocation && (location.port || undefined),\\n        buildMap = {},\\n        masterConfig = (module.config && module.config()) || {};\\n\\n    text = {\\n        version: \\'2.0.10\\',\\n\\n        strip: function (content) {\\n            //Strips <?xml ...?> declarations so that external SVG and XML\\n            //documents can be added to a document without worry. Also, if the string\\n            //is an HTML document, only the part inside the body tag is returned.\\n            if (content) {\\n                content = content.replace(xmlRegExp, \\\"\\\");\\n                var matches = content.match(bodyRegExp);\\n                if (matches) {\\n                    content = matches[1];\\n                }\\n            } else {\\n                content = \\\"\\\";\\n            }\\n            return content;\\n        },\\n\\n        jsEscape: function (content) {\\n            return content.replace(/([\\'\\\\\\\\])/g, \\'\\\\\\\\$1\\')\\n                .replace(/[\\\\f]/g, \\\"\\\\\\\\f\\\")\\n                .replace(/[\\\\b]/g, \\\"\\\\\\\\b\\\")\\n                .replace(/[\\\\n]/g, \\\"\\\\\\\\n\\\")\\n                .replace(/[\\\\t]/g, \\\"\\\\\\\\t\\\")\\n                .replace(/[\\\\r]/g, \\\"\\\\\\\\r\\\")\\n                .replace(/[\\\\u2028]/g, \\\"\\\\\\\\u2028\\\")\\n                .replace(/[\\\\u2029]/g, \\\"\\\\\\\\u2029\\\");\\n        },\\n\\n        createXhr: masterConfig.createXhr || function () {\\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\\n            var xhr, i, progId;\\n            if (typeof XMLHttpRequest !== \\\"undefined\\\") {\\n                return new XMLHttpRequest();\\n            } else if (typeof ActiveXObject !== \\\"undefined\\\") {\\n                for (i = 0; i < 3; i += 1) {\\n                    progId = progIds[i];\\n                    try {\\n                        xhr = new ActiveXObject(progId);\\n                    } catch (e) {}\\n\\n                    if (xhr) {\\n                        progIds = [progId];  // so faster next time\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return xhr;\\n        },\\n\\n        /**\\n         * Parses a resource name into its component parts. Resource names\\n         * look like: module/name.ext!strip, where the !strip part is\\n         * optional.\\n         * @param {String} name the resource name\\n         * @returns {Object} with properties \\\"moduleName\\\", \\\"ext\\\" and \\\"strip\\\"\\n         * where strip is a boolean.\\n         */\\n        parseName: function (name) {\\n            var modName, ext, temp,\\n                strip = false,\\n                index = name.indexOf(\\\".\\\"),\\n                isRelative = name.indexOf(\\'./\\') === 0 ||\\n                             name.indexOf(\\'../\\') === 0;\\n\\n            if (index !== -1 && (!isRelative || index > 1)) {\\n                modName = name.substring(0, index);\\n                ext = name.substring(index + 1, name.length);\\n            } else {\\n                modName = name;\\n            }\\n\\n            temp = ext || modName;\\n            index = temp.indexOf(\\\"!\\\");\\n            if (index !== -1) {\\n                //Pull off the strip arg.\\n                strip = temp.substring(index + 1) === \\\"strip\\\";\\n                temp = temp.substring(0, index);\\n                if (ext) {\\n                    ext = temp;\\n                } else {\\n                    modName = temp;\\n                }\\n            }\\n\\n            return {\\n                moduleName: modName,\\n                ext: ext,\\n                strip: strip\\n            };\\n        },\\n\\n        xdRegExp: /^((\\\\w+)\\\\:)?\\\\/\\\\/([^\\\\/\\\\\\\\]+)/,\\n\\n        /**\\n         * Is an URL on another domain. Only works for browser use, returns\\n         * false in non-browser environments. Only used to know if an\\n         * optimized .js version of a text resource should be loaded\\n         * instead.\\n         * @param {String} url\\n         * @returns Boolean\\n         */\\n        useXhr: function (url, protocol, hostname, port) {\\n            var uProtocol, uHostName, uPort,\\n                match = text.xdRegExp.exec(url);\\n            if (!match) {\\n                return true;\\n            }\\n            uProtocol = match[2];\\n            uHostName = match[3];\\n\\n            uHostName = uHostName.split(\\':\\');\\n            uPort = uHostName[1];\\n            uHostName = uHostName[0];\\n\\n            return (!uProtocol || uProtocol === protocol) &&\\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\\n                   ((!uPort && !uHostName) || uPort === port);\\n        },\\n\\n        finishLoad: function (name, strip, content, onLoad) {\\n            content = strip ? text.strip(content) : content;\\n            if (masterConfig.isBuild) {\\n                buildMap[name] = content;\\n            }\\n            onLoad(content);\\n        },\\n\\n        load: function (name, req, onLoad, config) {\\n            //Name has format: some.module.filext!strip\\n            //The strip part is optional.\\n            //if strip is present, then that means only get the string contents\\n            //inside a body tag in an HTML string. For XML/SVG content it means\\n            //removing the <?xml ...?> declarations so the content can be inserted\\n            //into the current doc without problems.\\n\\n            // Do not bother with the work if a build and text will\\n            // not be inlined.\\n            if (config.isBuild && !config.inlineText) {\\n                onLoad();\\n                return;\\n            }\\n\\n            masterConfig.isBuild = config.isBuild;\\n\\n            var parsed = text.parseName(name),\\n                nonStripName = parsed.moduleName +\\n                    (parsed.ext ? \\'.\\' + parsed.ext : \\'\\'),\\n                url = req.toUrl(nonStripName),\\n                useXhr = (masterConfig.useXhr) ||\\n                         text.useXhr;\\n\\n            // Do not load if it is an empty: url\\n            if (url.indexOf(\\'empty:\\') === 0) {\\n                onLoad();\\n                return;\\n            }\\n\\n            //Load the text. Use XHR if possible and in a browser.\\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\\n                text.get(url, function (content) {\\n                    text.finishLoad(name, parsed.strip, content, onLoad);\\n                }, function (err) {\\n                    if (onLoad.error) {\\n                        onLoad.error(err);\\n                    }\\n                });\\n            } else {\\n                //Need to fetch the resource across domains. Assume\\n                //the resource has been optimized into a JS module. Fetch\\n                //by the module name + extension, but do not include the\\n                //!strip part to avoid file system issues.\\n                req([nonStripName], function (content) {\\n                    text.finishLoad(parsed.moduleName + \\'.\\' + parsed.ext,\\n                                    parsed.strip, content, onLoad);\\n                });\\n            }\\n        },\\n\\n        write: function (pluginName, moduleName, write, config) {\\n            if (buildMap.hasOwnProperty(moduleName)) {\\n                var content = text.jsEscape(buildMap[moduleName]);\\n                write.asModule(pluginName + \\\"!\\\" + moduleName,\\n                               \\\"define(function () { return \\'\\\" +\\n                                   content +\\n                               \\\"\\';});\\\\n\\\");\\n            }\\n        },\\n\\n        writeFile: function (pluginName, moduleName, req, write, config) {\\n            var parsed = text.parseName(moduleName),\\n                extPart = parsed.ext ? \\'.\\' + parsed.ext : \\'\\',\\n                nonStripName = parsed.moduleName + extPart,\\n                //Use a \\'.js\\' file name so that it indicates it is a\\n                //script that can be loaded across domains.\\n                fileName = req.toUrl(parsed.moduleName + extPart) + \\'.js\\';\\n\\n            //Leverage own load() method to load plugin value, but only\\n            //write out values that do not have the strip argument,\\n            //to avoid any potential issues with ! in file names.\\n            text.load(nonStripName, req, function (value) {\\n                //Use own write() method to construct full module value.\\n                //But need to create shell that translates writeFile\\'s\\n                //write() to the right interface.\\n                var textWrite = function (contents) {\\n                    return write(fileName, contents);\\n                };\\n                textWrite.asModule = function (moduleName, contents) {\\n                    return write.asModule(moduleName, fileName, contents);\\n                };\\n\\n                text.write(pluginName, nonStripName, textWrite, config);\\n            }, config);\\n        }\\n    };\\n\\n    if (masterConfig.env === \\'node\\' || (!masterConfig.env &&\\n            typeof process !== \\\"undefined\\\" &&\\n            process.versions &&\\n            !!process.versions.node &&\\n            !process.versions[\\'node-webkit\\'])) {\\n        //Using special require.nodeRequire, something added by r.js.\\n        fs = require.nodeRequire(\\'fs\\');\\n\\n        text.get = function (url, callback, errback) {\\n            try {\\n                var file = fs.readFileSync(url, \\'utf8\\');\\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\\n                if (file.indexOf(\\'\\\\uFEFF\\') === 0) {\\n                    file = file.substring(1);\\n                }\\n                callback(file);\\n            } catch (e) {\\n                errback(e);\\n            }\\n        };\\n    } else if (masterConfig.env === \\'xhr\\' || (!masterConfig.env &&\\n            text.createXhr())) {\\n        text.get = function (url, callback, errback, headers) {\\n            var xhr = text.createXhr(), header;\\n            xhr.open(\\'GET\\', url, true);\\n\\n            //Allow plugins direct access to xhr headers\\n            if (headers) {\\n                for (header in headers) {\\n                    if (headers.hasOwnProperty(header)) {\\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\\n                    }\\n                }\\n            }\\n\\n            //Allow overrides specified in config\\n            if (masterConfig.onXhr) {\\n                masterConfig.onXhr(xhr, url);\\n            }\\n\\n            xhr.onreadystatechange = function (evt) {\\n                var status, err;\\n                //Do not explicitly handle errors, those should be\\n                //visible via console output in the browser.\\n                if (xhr.readyState === 4) {\\n                    status = xhr.status;\\n                    if (status > 399 && status < 600) {\\n                        //An http 4xx or 5xx error. Signal an error.\\n                        err = new Error(url + \\' HTTP status: \\' + status);\\n                        err.xhr = xhr;\\n                        errback(err);\\n                    } else {\\n                        callback(xhr.responseText);\\n                    }\\n\\n                    if (masterConfig.onXhrComplete) {\\n                        masterConfig.onXhrComplete(xhr, url);\\n                    }\\n                }\\n            };\\n            xhr.send(null);\\n        };\\n    } else if (masterConfig.env === \\'rhino\\' || (!masterConfig.env &&\\n            typeof Packages !== \\'undefined\\' && typeof java !== \\'undefined\\')) {\\n        //Why Java, why is this so awkward?\\n        text.get = function (url, callback) {\\n            var stringBuffer, line,\\n                encoding = \\\"utf-8\\\",\\n                file = new java.io.File(url),\\n                lineSeparator = java.lang.System.getProperty(\\\"line.separator\\\"),\\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\\n                content = \\'\\';\\n            try {\\n                stringBuffer = new java.lang.StringBuffer();\\n                line = input.readLine();\\n\\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\\n                // http://www.unicode.org/faq/utf_bom.html\\n\\n                // Note that when we use utf-8, the BOM should appear as \\\"EF BB BF\\\", but it doesn\\'t due to this bug in the JDK:\\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\\n                    // Eat the BOM, since we\\'ve already found the encoding on this file,\\n                    // and we plan to concatenating this buffer with others; the BOM should\\n                    // only appear at the top of a file.\\n                    line = line.substring(1);\\n                }\\n\\n                if (line !== null) {\\n                    stringBuffer.append(line);\\n                }\\n\\n                while ((line = input.readLine()) !== null) {\\n                    stringBuffer.append(lineSeparator);\\n                    stringBuffer.append(line);\\n                }\\n                //Make sure we return a JavaScript string and not a Java string.\\n                content = String(stringBuffer.toString()); //String\\n            } finally {\\n                input.close();\\n            }\\n            callback(content);\\n        };\\n    } else if (masterConfig.env === \\'xpconnect\\' || (!masterConfig.env &&\\n            typeof Components !== \\'undefined\\' && Components.classes &&\\n            Components.interfaces)) {\\n        //Avert your gaze!\\n        Cc = Components.classes,\\n        Ci = Components.interfaces;\\n        Components.utils[\\'import\\'](\\'resource://gre/modules/FileUtils.jsm\\');\\n        xpcIsWindows = (\\'@mozilla.org/windows-registry-key;1\\' in Cc);\\n\\n        text.get = function (url, callback) {\\n            var inStream, convertStream, fileObj,\\n                readData = {};\\n\\n            if (xpcIsWindows) {\\n                url = url.replace(/\\\\//g, \\'\\\\\\\\\\');\\n            }\\n\\n            fileObj = new FileUtils.File(url);\\n\\n            //XPCOM, you so crazy\\n            try {\\n                inStream = Cc[\\'@mozilla.org/network/file-input-stream;1\\']\\n                           .createInstance(Ci.nsIFileInputStream);\\n                inStream.init(fileObj, 1, 0, false);\\n\\n                convertStream = Cc[\\'@mozilla.org/intl/converter-input-stream;1\\']\\n                                .createInstance(Ci.nsIConverterInputStream);\\n                convertStream.init(inStream, \\\"utf-8\\\", inStream.available(),\\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\\n\\n                convertStream.readString(inStream.available(), readData);\\n                convertStream.close();\\n                inStream.close();\\n                callback(readData.value);\\n            } catch (e) {\\n                throw new Error((fileObj && fileObj.path || \\'\\') + \\': \\' + e);\\n            }\\n        };\\n    }\\n    return text;\\n});\\n\\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js\");\n\n","\neval(\"define(\\'text!SpecialChars.json\\',[],function () { return \\'[\\\\n    \\\"&#33\\\",\\\\n    \\\"&#35\\\",\\\\n    \\\"&#36\\\",\\\\n    \\\"&#37\\\",\\\\n    \\\"&#39\\\",\\\\n    \\\"&#40\\\",\\\\n    \\\"&#41\\\",\\\\n    \\\"&#42\\\",\\\\n    \\\"&#43\\\",\\\\n    \\\"&#44\\\",\\\\n    \\\"&#45\\\",\\\\n    \\\"&#46\\\",\\\\n    \\\"&#58\\\",\\\\n    \\\"&#59\\\",\\\\n    \\\"&#61\\\",\\\\n    \\\"&#63\\\",\\\\n    \\\"&#64\\\",\\\\n    \\\"&#91\\\",\\\\n    \\\"&#92\\\",\\\\n    \\\"&#93\\\",\\\\n    \\\"&#94\\\",\\\\n    \\\"&#95\\\",\\\\n    \\\"&#96\\\",\\\\n    \\\"&#123\\\",\\\\n    \\\"&#124\\\",\\\\n    \\\"&#125\\\",\\\\n    \\\"&#126\\\",\\\\n    \\\"&#8226\\\",\\\\n    \\\"&#9679\\\",\\\\n    \\\\n    \\\"&aacute\\\",\\\\n    \\\"&Aacute\\\",\\\\n    \\\"&acirc\\\",\\\\n    \\\"&Acirc\\\",\\\\n    \\\"&acute\\\",\\\\n    \\\"&aelig\\\",\\\\n    \\\"&AElig\\\",\\\\n    \\\"&agrave\\\",\\\\n    \\\"&Agrave\\\",\\\\n    \\\"&alefsym\\\",\\\\n    \\\"&alpha\\\",\\\\n    \\\"&Alpha\\\",\\\\n    \\\"&amp\\\",\\\\n    \\\"&and\\\",\\\\n    \\\"&ang\\\",\\\\n    \\\"&aring\\\",\\\\n    \\\"&Aring\\\",\\\\n    \\\"&asymp\\\",\\\\n    \\\"&atilde\\\",\\\\n    \\\"&Atilde\\\",\\\\n    \\\"&auml\\\",\\\\n    \\\"&Auml\\\",\\\\n    \\\"&bdquo\\\",\\\\n    \\\"&beta\\\",\\\\n    \\\"&Beta\\\",\\\\n    \\\"&brvbar\\\",\\\\n    \\\"&bull\\\",\\\\n    \\\"&cap\\\",\\\\n    \\\"&ccedil\\\",\\\\n    \\\"&Ccedil\\\",\\\\n    \\\"&cedil\\\",\\\\n    \\\"&cent\\\",\\\\n    \\\"&chi\\\",\\\\n    \\\"&Chi\\\",\\\\n    \\\"&circ\\\",\\\\n    \\\"&clubs\\\",\\\\n    \\\"&cong\\\",\\\\n    \\\"&copy\\\",\\\\n    \\\"&crarr\\\",\\\\n    \\\"&cup\\\",\\\\n    \\\"&curren\\\",\\\\n    \\\"&dagger\\\",\\\\n    \\\"&Dagger\\\",\\\\n    \\\"&darr\\\",\\\\n    \\\"&dArr\\\",\\\\n    \\\"&deg\\\",\\\\n    \\\"&delta\\\",\\\\n    \\\"&Delta\\\",\\\\n    \\\"&diams\\\",\\\\n    \\\"&die\\\",\\\\n    \\\"&divide\\\",\\\\n    \\\"&eacute\\\",\\\\n    \\\"&Eacute\\\",\\\\n    \\\"&ecirc\\\",\\\\n    \\\"&Ecirc\\\",\\\\n    \\\"&egrave\\\",\\\\n    \\\"&Egrave\\\",\\\\n    \\\"&empty\\\",\\\\n    \\\"&emsp\\\",\\\\n    \\\"&ensp\\\",\\\\n    \\\"&epsilon\\\",\\\\n    \\\"&Epsilon\\\",\\\\n    \\\"&equiv\\\",\\\\n    \\\"&eta\\\",\\\\n    \\\"&Eta\\\",\\\\n    \\\"&eth\\\",\\\\n    \\\"&ETH\\\",\\\\n    \\\"&euml\\\",\\\\n    \\\"&Euml\\\",\\\\n    \\\"&euro\\\",\\\\n    \\\"&exist\\\",\\\\n    \\\"&forall\\\",\\\\n    \\\"&frac12\\\",\\\\n    \\\"&frac14\\\",\\\\n    \\\"&frac34\\\",\\\\n    \\\"&frasl\\\",\\\\n    \\\"&gamma\\\",\\\\n    \\\"&Gamma\\\",\\\\n    \\\"&ge\\\",\\\\n    \\\"&gt\\\",\\\\n    \\\"&harr\\\",\\\\n    \\\"&hArr\\\",\\\\n    \\\"&hearts\\\",\\\\n    \\\"&hellip\\\",\\\\n    \\\"&iacute\\\",\\\\n    \\\"&Iacute\\\",\\\\n    \\\"&icirc\\\",\\\\n    \\\"&Icirc\\\",\\\\n    \\\"&iexcl\\\",\\\\n    \\\"&igrave\\\",\\\\n    \\\"&Igrave\\\",\\\\n    \\\"&image\\\",\\\\n    \\\"&infin\\\",\\\\n    \\\"&int\\\",\\\\n    \\\"&iota\\\",\\\\n    \\\"&Iota\\\",\\\\n    \\\"&iquest\\\",\\\\n    \\\"&isin\\\",\\\\n    \\\"&iuml\\\",\\\\n    \\\"&Iuml\\\",\\\\n    \\\"&kappa\\\",\\\\n    \\\"&Kappa\\\",\\\\n    \\\"&lambda\\\",\\\\n    \\\"&Lambda\\\",\\\\n    \\\"&lang\\\",\\\\n    \\\"&laquo\\\",\\\\n    \\\"&larr\\\",\\\\n    \\\"&lArr\\\",\\\\n    \\\"&lceil\\\",\\\\n    \\\"&ldquo\\\",\\\\n    \\\"&le\\\",\\\\n    \\\"&lfloor\\\",\\\\n    \\\"&lowast\\\",\\\\n    \\\"&loz\\\",\\\\n    \\\"&lrm\\\",\\\\n    \\\"&lsaquo\\\",\\\\n    \\\"&lsquo\\\",\\\\n    \\\"&lt\\\",\\\\n    \\\"&macr\\\",\\\\n    \\\"&mdash\\\",\\\\n    \\\"&micro\\\",\\\\n    \\\"&middot\\\",\\\\n    \\\"&minus\\\",\\\\n    \\\"&mu\\\",\\\\n    \\\"&Mu\\\",\\\\n    \\\"&nabla\\\",\\\\n    \\\"&nbsp\\\",\\\\n    \\\"&ndash\\\",\\\\n    \\\"&ne\\\",\\\\n    \\\"&ni\\\",\\\\n    \\\"&not\\\",\\\\n    \\\"&notin\\\",\\\\n    \\\"&nsub\\\",\\\\n    \\\"&ntilde\\\",\\\\n    \\\"&Ntilde\\\",\\\\n    \\\"&nu\\\",\\\\n    \\\"&Nu\\\",\\\\n    \\\"&oacute\\\",\\\\n    \\\"&Oacute\\\",\\\\n    \\\"&ocirc\\\",\\\\n    \\\"&Ocirc\\\",\\\\n    \\\"&ograve\\\",\\\\n    \\\"&Ograve\\\",\\\\n    \\\"&oline\\\",\\\\n    \\\"&omega\\\",\\\\n    \\\"&Omega\\\",\\\\n    \\\"&omicron\\\",\\\\n    \\\"&Omicron\\\",\\\\n    \\\"&oplus\\\",\\\\n    \\\"&or\\\",\\\\n    \\\"&ordf\\\",\\\\n    \\\"&ordm\\\",\\\\n    \\\"&oslash\\\",\\\\n    \\\"&Oslash\\\",\\\\n    \\\"&otilde\\\",\\\\n    \\\"&Otilde\\\",\\\\n    \\\"&otimes\\\",\\\\n    \\\"&ouml\\\",\\\\n    \\\"&Ouml\\\",\\\\n    \\\"&para\\\",\\\\n    \\\"&part\\\",\\\\n    \\\"&permil\\\",\\\\n    \\\"&perp\\\",\\\\n    \\\"&phi\\\",\\\\n    \\\"&Phi\\\",\\\\n    \\\"&pi\\\",\\\\n    \\\"&Pi\\\",\\\\n    \\\"&piv\\\",\\\\n    \\\"&plusmn\\\",\\\\n    \\\"&pound\\\",\\\\n    \\\"&prime\\\",\\\\n    \\\"&Prime\\\",\\\\n    \\\"&prod\\\",\\\\n    \\\"&prop\\\",\\\\n    \\\"&psi\\\",\\\\n    \\\"&Psi\\\",\\\\n    \\\"&quot\\\",\\\\n    \\\"&radic\\\",\\\\n    \\\"&rang\\\",\\\\n    \\\"&raquo\\\",\\\\n    \\\"&rarr\\\",\\\\n    \\\"&rArr\\\",\\\\n    \\\"&rceil\\\",\\\\n    \\\"&rdquo\\\",\\\\n    \\\"&real\\\",\\\\n    \\\"&reg\\\",\\\\n    \\\"&rfloor\\\",\\\\n    \\\"&rho\\\",\\\\n    \\\"&Rho\\\",\\\\n    \\\"&rlm\\\",\\\\n    \\\"&rsaquo\\\",\\\\n    \\\"&rsquo\\\",\\\\n    \\\"&sbquo\\\",\\\\n    \\\"&Scaron\\\",\\\\n    \\\"&scaron\\\",\\\\n    \\\"&sdot\\\",\\\\n    \\\"&sect\\\",\\\\n    \\\"&shy\\\",\\\\n    \\\"&sigma\\\",\\\\n    \\\"&Sigma\\\",\\\\n    \\\"&sim\\\",\\\\n    \\\"&spades\\\",\\\\n    \\\"&sub\\\",\\\\n    \\\"&sube\\\",\\\\n    \\\"&sum\\\",\\\\n    \\\"&sup\\\",\\\\n    \\\"&supe\\\",\\\\n    \\\"&sup1\\\",\\\\n    \\\"&sup2\\\",\\\\n    \\\"&sup3\\\",\\\\n    \\\"&szlig\\\",\\\\n    \\\"&tau\\\",\\\\n    \\\"&Tau\\\",\\\\n    \\\"&there4\\\",\\\\n    \\\"&theta\\\",\\\\n    \\\"&Theta\\\",\\\\n    \\\"&thetasym\\\",\\\\n    \\\"&thinsp\\\",\\\\n    \\\"&thorn\\\",\\\\n    \\\"&THORN\\\",\\\\n    \\\"&times\\\",\\\\n    \\\"&tilde\\\",\\\\n    \\\"&trade\\\",\\\\n    \\\"&uacute\\\",\\\\n    \\\"&Uacute\\\",\\\\n    \\\"&uarr\\\",\\\\n    \\\"&uArr\\\",\\\\n    \\\"&ucirc\\\",\\\\n    \\\"&Ucirc\\\",\\\\n    \\\"&ugrave\\\",\\\\n    \\\"&Ugrave\\\",\\\\n    \\\"&uml\\\",\\\\n    \\\"&upsih\\\",\\\\n    \\\"&upsilon\\\",\\\\n    \\\"&Upsilon\\\",\\\\n    \\\"&uuml\\\",\\\\n    \\\"&Uuml\\\",\\\\n    \\\"&weierp\\\",\\\\n    \\\"&xi\\\",\\\\n    \\\"&Xi\\\",\\\\n    \\\"&yacute\\\",\\\\n    \\\"&Yacute\\\",\\\\n    \\\"&yen\\\",\\\\n    \\\"&yuml\\\",\\\\n    \\\"&zeta\\\",\\\\n    \\\"&Zeta\\\",\\\\n    \\\"&zwnj\\\"\\\\n]\\';});\\n\\n//# sourceURL=/text!SpecialChars.json\");\n\n","eval(\"/*\\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\\n/*global define, brackets, $ */\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\',\\'text!SpecialChars.json\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    // Load dependent modules\\n    var AppInit             = brackets.getModule(\\\"utils/AppInit\\\"),\\n        CodeHintManager     = brackets.getModule(\\\"editor/CodeHintManager\\\"),\\n        ExtensionUtils      = brackets.getModule(\\\"utils/ExtensionUtils\\\"),\\n        HTMLUtils           = brackets.getModule(\\\"language/HTMLUtils\\\"),\\n        HtmlSpecialChars    = require(\\\"text!SpecialChars.json\\\"),\\n        specialChars;\\n\\n    /**\\n     * Encodes the special Char value given. \\n     * \\n     * @param {string} value\\n     * The value to encode\\n     *\\n     * @return {string}\\n     * The encoded string\\n     */\\n    function _encodeValue(value) {\\n        return value.replace(\\\"&\\\", \\\"&amp;\\\").replace(\\\"#\\\", \\\"&#35;\\\");\\n    }\\n    \\n    /**\\n     * Decodes the special Char value given. \\n     * \\n     * @param {string} value\\n     * The value to decode\\n     *\\n     * @return {string}\\n     * The decoded string\\n     */\\n    function _decodeValue(value) {\\n        return value.replace(\\\"&amp;\\\", \\\"&\\\").replace(\\\"&#35;\\\", \\\"#\\\");\\n    }\\n    \\n    /**\\n     * @constructor\\n     */\\n    function SpecialCharHints() {\\n        this.primaryTriggerKeys = \\\"&ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz#0123456789\\\";\\n        this.currentQuery = \\\"\\\";\\n    }\\n    \\n    /**\\n     * Determines whether HtmlSpecialChar hints are available in the current editor\\n     * context.\\n     * \\n     * @param {Editor} editor \\n     * A non-null editor object for the active window.\\n     *\\n     * @param {string} implicitChar\\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {boolean}\\n     * Determines whether the current provider is able to provide hints for\\n     * the given editor context and, in case implicitChar is non- null,\\n     * whether it is appropriate to do so.\\n     */\\n    SpecialCharHints.prototype.hasHints = function (editor, implicitChar) {\\n        this.editor = editor;\\n\\n        return this._getQuery() !== null;\\n    };\\n       \\n    /**\\n     * Returns a list of avaliable HtmlSpecialChar hints if possible for the current\\n     * editor context. \\n     * \\n     * @param {string} implicitChar\\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {jQuery.Deferred|{\\n     *              hints: Array.<string|jQueryObject>,\\n     *              match: string,\\n     *              selectInitial: boolean,\\n     *              handleWideResults: boolean}}\\n     * Null if the provider wishes to end the hinting session. Otherwise, a\\n     * response object that provides:\\n     * 1. a sorted array hints that consists of strings\\n     * 2. a string match that is used by the manager to emphasize matching\\n     *    substrings when rendering the hint list\\n     * 3. a boolean that indicates whether the first result, if one exists,\\n     *    should be selected by default in the hint list window.\\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\\n     *    to allow result string to stretch width of display.\\n     */\\n    SpecialCharHints.prototype.getHints = function (implicitChar) {\\n        var query,\\n            result;\\n\\n        if (implicitChar === null || this.primaryTriggerKeys.indexOf(implicitChar) !== -1) {\\n            this.currentQuery = query = this._getQuery();\\n            result = $.map(specialChars, function (value, index) {\\n                if (value.indexOf(query) === 0) {\\n                    var shownValue = _encodeValue(value);\\n                    return shownValue  + \\\"; <span class=\\'entity-display-character\\'>\\\" + value + \\\";</span>\\\";\\n                }\\n            }).sort(this._internalSort);\\n            \\n            if (query !== null) {\\n                query = _encodeValue(query);\\n            }\\n            \\n            return {\\n                hints: result,\\n                match: query,\\n                selectInitial: true,\\n                handleWideResults: false\\n            };\\n        }\\n        \\n        return null;\\n    };\\n    \\n    /**\\n     * Sort function used internally when sorting the Hints\\n     * \\n     * @param {string} value\\n     * The value to decode\\n     *\\n     * @return {string}\\n     * The decoded string\\n     */\\n    SpecialCharHints.prototype._internalSort = function (a, b) {\\n        a = _decodeValue(a.slice(0, a.indexOf(\\\" \\\"))).toLowerCase();\\n        b = _decodeValue(b.slice(0, b.indexOf(\\\" \\\"))).toLowerCase();\\n        \\n        if (a.indexOf(\\\"#\\\") !== -1 && b.indexOf(\\\"#\\\") !== -1) {\\n            var num1 = parseInt(a.slice(a.indexOf(\\\"#\\\") + 1, a.length - 1), 10),\\n                num2 = parseInt(b.slice(b.indexOf(\\\"#\\\") + 1, b.length - 1), 10);\\n                    \\n            return (num1 - num2);\\n        }\\n                \\n        return a.localeCompare(b);\\n    };\\n    \\n    /**\\n     * Returns a query for the Hints\\n     * \\n     * @return {string}\\n     * The Query for which to search\\n     */\\n    SpecialCharHints.prototype._getQuery = function () {\\n        var query,\\n            lineContentBeforeCursor,\\n            startChar,\\n            endChar,\\n            cursor = this.editor.getCursorPos();\\n        \\n        if (HTMLUtils.getTagInfo(this.editor, cursor).tagName !== \\\"\\\") {\\n            return null;\\n        }\\n                \\n        lineContentBeforeCursor = this.editor.document.getRange({\\n            line: cursor.line,\\n            ch: 0\\n        }, cursor);\\n        \\n        startChar = lineContentBeforeCursor.lastIndexOf(\\\"&\\\");\\n        endChar = lineContentBeforeCursor.lastIndexOf(\\\";\\\");\\n        \\n        // If no startChar was found or the endChar is greater than the startChar then it is no entity\\n        if (startChar === -1 || endChar > startChar) {\\n            return null;\\n        }\\n        \\n        query = this.editor.document.getRange({\\n            line: cursor.line,\\n            ch: startChar\\n        }, cursor);\\n        \\n        return query;\\n    };\\n    \\n    /**\\n     * Inserts a given HtmlSpecialChar hint into the current editor context. \\n     * \\n     * @param {string} completition\\n     * The hint to be inserted into the editor context.\\n     * \\n     * @return {boolean}\\n     * Indicates whether the manager should follow hint insertion with an\\n     * additional explicit hint request.\\n     */\\n    SpecialCharHints.prototype.insertHint = function (completion) {\\n        var start = {line: -1, ch: -1},\\n            end = {line: -1, ch: -1},\\n            cursor = this.editor.getCursorPos(),\\n            line = this.editor.document.getLine(cursor.line),\\n            subLine,\\n            ampersandPos,\\n            semicolonPos,\\n            entityMatch;\\n\\n        end.line = start.line = cursor.line;\\n        start.ch = cursor.ch - this.currentQuery.length;\\n        subLine = line.slice(cursor.ch);\\n        ampersandPos = subLine.indexOf(\\\"&\\\");\\n        semicolonPos = subLine.indexOf(\\\";\\\");\\n        end.ch = start.ch + this.currentQuery.length;\\n\\n        // We\\'re looking for \\';\\' in line before next \\'&\\'\\n        if (semicolonPos !== -1 && (ampersandPos === -1 || ampersandPos > semicolonPos)) {\\n\\n            subLine = subLine.slice(0, semicolonPos);\\n\\n            // regexp must match entire subLine string\\n            entityMatch = subLine.match(/^(#?[0-9]+)|([a-zA-Z]+)$/);\\n            if (entityMatch && entityMatch.length > 0 && entityMatch.index === 0 &&\\n                    entityMatch[0].length === subLine.length) {\\n                // replace entity\\n                end.ch = line.indexOf(\\\";\\\", start.ch) + 1;\\n            }\\n        }\\n        \\n        completion = completion.slice(0, completion.indexOf(\\\" \\\"));\\n        completion = _decodeValue(completion);\\n        if (start.ch !== end.ch) {\\n            this.editor.document.replaceRange(completion, start, end);\\n        } else {\\n            this.editor.document.replaceRange(completion, start);\\n        }\\n        \\n        return false;\\n    };\\n\\n    AppInit.appReady(function () {\\n        ExtensionUtils.loadStyleSheet(module, \\\"styles.css\\\");\\n        // Parse JSON files\\n        specialChars = JSON.parse(HtmlSpecialChars);\\n        \\n        // Register code hint providers\\n        var specialCharHints = new SpecialCharHints();\\n        \\n        CodeHintManager.registerHintProvider(specialCharHints, [\\\"html\\\"], 1);\\n    });\\n    \\n    //Export Hints for Unit Tests\\n    exports.SpecialCharHints = SpecialCharHints;\\n});\\n//# sourceURL=/main.js\");\n\n"]}