eval('/*\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets */\n\ndefine(\'main\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n\n    var Menus               = brackets.getModule("command/Menus"),\n        CommandManager      = brackets.getModule("command/CommandManager"),\n        Commands            = brackets.getModule("command/Commands"),\n        MainViewManager     = brackets.getModule("view/MainViewManager"),\n        Strings             = brackets.getModule("strings"),\n        PreferencesManager  = brackets.getModule("preferences/PreferencesManager"),\n        workingSetListCmenu = Menus.getContextMenu(Menus.ContextMenuIds.WORKING_SET_CONTEXT_MENU);\n\n    // Constants\n    var closeOthers             = "file.close_others",\n        closeAbove              = "file.close_above",\n        closeBelow              = "file.close_below";\n\n    // Global vars and preferences\n    var prefs                   = PreferencesManager.getExtensionPrefs("closeOthers"),\n        menuEntriesShown        = {};\n    \n    prefs.definePreference("below",  "boolean", true);\n    prefs.definePreference("others", "boolean", true);\n    prefs.definePreference("above",  "boolean", true);\n    \n    \n    /**\n     * Handle the different Close Other commands\n     * @param {string} mode\n     */\n    function handleClose(mode) {\n        var targetIndex  = MainViewManager.findInWorkingSet(MainViewManager.ACTIVE_PANE, MainViewManager.getCurrentlyViewedPath(MainViewManager.ACTIVE_PANE)),\n            workingSetList = MainViewManager.getWorkingSet(MainViewManager.ACTIVE_PANE),\n            start        = (mode === closeBelow) ? (targetIndex + 1) : 0,\n            end          = (mode === closeAbove) ? (targetIndex) : (workingSetList.length),\n            files        = [],\n            i;\n\n        for (i = start; i < end; i++) {\n            if ((mode === closeOthers && i !== targetIndex) || (mode !== closeOthers)) {\n                files.push(workingSetList[i]);\n            }\n        }\n        \n        CommandManager.execute(Commands.FILE_CLOSE_LIST, {fileList: files});\n    }\n    \n    /**\n     * Enable/Disable the menu items depending on which document is selected in the working set\n     */\n    function contextMenuOpenHandler() {\n        var file = MainViewManager.getCurrentlyViewedFile(MainViewManager.ACTIVE_PANE);\n        \n        if (file) {\n            var targetIndex  = MainViewManager.findInWorkingSet(MainViewManager.ACTIVE_PANE, file.fullPath),\n                workingSetListSize = MainViewManager.getWorkingSetSize(MainViewManager.ACTIVE_PANE);\n            \n            if (targetIndex === workingSetListSize - 1) { // hide "Close Others Below" if the last file in Working Files is selected\n                CommandManager.get(closeBelow).setEnabled(false);\n            } else {\n                CommandManager.get(closeBelow).setEnabled(true);\n            }\n            \n            if (workingSetListSize === 1) { // hide "Close Others" if there is only one file in Working Files\n                CommandManager.get(closeOthers).setEnabled(false);\n            } else {\n                CommandManager.get(closeOthers).setEnabled(true);\n            }\n            \n            if (targetIndex === 0) { // hide "Close Others Above" if the first file in Working Files is selected\n                CommandManager.get(closeAbove).setEnabled(false);\n            } else {\n                CommandManager.get(closeAbove).setEnabled(true);\n            }\n        }\n    }\n    \n    \n    /**\n     * Returns the preferences used to add/remove the menu items\n     * @return {{closeBelow: boolean, closeOthers: boolean, closeAbove: boolean}}\n     */\n    function getPreferences() {\n        // It\'s senseless to look prefs up for the current file, instead look them up for\n        // the current project (or globally)\n        return {\n            closeBelow  : prefs.get("below",  PreferencesManager.CURRENT_PROJECT),\n            closeOthers : prefs.get("others", PreferencesManager.CURRENT_PROJECT),\n            closeAbove  : prefs.get("above",  PreferencesManager.CURRENT_PROJECT)\n        };\n    }\n    \n    /**\n     * When the preferences changed, add/remove the required menu items\n     */\n    function prefChangeHandler() {\n        var prefs = getPreferences();\n        \n        if (prefs.closeBelow !== menuEntriesShown.closeBelow) {\n            if (prefs.closeBelow) {\n                workingSetListCmenu.addMenuItem(closeBelow, "", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeBelow);\n            }\n        }\n        \n        if (prefs.closeOthers !== menuEntriesShown.closeOthers) {\n            if (prefs.closeOthers) {\n                workingSetListCmenu.addMenuItem(closeOthers, "", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeOthers);\n            }\n        }\n        \n        if (prefs.closeAbove !== menuEntriesShown.closeAbove) {\n            if (prefs.closeAbove) {\n                workingSetListCmenu.addMenuItem(closeAbove, "", Menus.AFTER, Commands.FILE_CLOSE);\n            } else {\n                workingSetListCmenu.removeMenuItem(closeAbove);\n            }\n        }\n        \n        menuEntriesShown = prefs;\n    }\n    \n    /**\n     * Register the Commands and add the Menu Items, if required\n     */\n    function initializeCommands() {\n        var prefs = getPreferences();\n        \n        CommandManager.register(Strings.CMD_FILE_CLOSE_BELOW, closeBelow, function () {\n            handleClose(closeBelow);\n        });\n        CommandManager.register(Strings.CMD_FILE_CLOSE_OTHERS, closeOthers, function () {\n            handleClose(closeOthers);\n        });\n        CommandManager.register(Strings.CMD_FILE_CLOSE_ABOVE, closeAbove, function () {\n            handleClose(closeAbove);\n        });\n        \n        if (prefs.closeBelow) {\n            workingSetListCmenu.addMenuItem(closeBelow, "", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        if (prefs.closeOthers) {\n            workingSetListCmenu.addMenuItem(closeOthers, "", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        if (prefs.closeAbove) {\n            workingSetListCmenu.addMenuItem(closeAbove, "", Menus.AFTER, Commands.FILE_CLOSE);\n        }\n        menuEntriesShown = prefs;\n    }\n\n    \n    // Initialize using the prefs\n    initializeCommands();\n\n    // Add a context menu open handler\n    workingSetListCmenu.on("beforeContextMenuOpen", contextMenuOpenHandler);\n\n    prefs.on("change", prefChangeHandler);\n});\n\n//# sourceURL=/main.js');
//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map