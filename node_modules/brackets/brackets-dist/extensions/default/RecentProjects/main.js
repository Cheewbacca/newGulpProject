eval("/**\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine('text',['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci, xpcIsWindows,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = {},\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.10',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            // Do not load if it is an empty: url\n            if (url.indexOf('empty:') === 0) {\n                onLoad();\n                return;\n            }\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node &&\n            !process.versions['node-webkit'])) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback, errback) {\n            try {\n                var file = fs.readFileSync(url, 'utf8');\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n                if (file.indexOf('\\uFEFF') === 0) {\n                    file = file.substring(1);\n                }\n                callback(file);\n            } catch (e) {\n                errback(e);\n            }\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n\n                    if (masterConfig.onXhrComplete) {\n                        masterConfig.onXhrComplete(xhr, url);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                if (line !== null) {\n                    stringBuffer.append(line);\n                }\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n        xpcIsWindows = ('@mozilla.org/windows-registry-key;1' in Cc);\n\n        text.get = function (url, callback) {\n            var inStream, convertStream, fileObj,\n                readData = {};\n\n            if (xpcIsWindows) {\n                url = url.replace(/\\//g, '\\\\');\n            }\n\n            fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js"),eval('define(\'text!htmlContent/projects-menu.html\',[],function () { return \'<ul id="project-dropdown" class="dropdown-menu" tabindex="-1">\\n    <li><a id="open-folder-link">{{Strings.CMD_OPEN_FOLDER}}</a></li>\\n    \\n    {{#projectList.length}}\\n    <li class="divider"></li>\\n    {{/projectList.length}}\\n    \\n    {{#projectList}}\\n    <li>\\n        <a class="recent-folder-link" data-path="{{path}}">\\n            <span class="recent-folder">{{folder}}</span>\\n            <span class="recent-folder-path">{{rest}}</span>\\n        </a>\\n    </li>\\n    {{/projectList}}\\n</ul>\\n\';});\n\n//# sourceURL=/text!htmlContent/projects-menu.html'),eval('define(\'text!keyboard.json\',[],function () { return \'{\\n    "recentProjects": [\\n        {\\n            "key": "Ctrl-Alt-R"\\n        }\\n    ]\\n}\';});\n\n//# sourceURL=/text!keyboard.json'),eval('/*\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 4, maxerr: 50 */\n/*global define, brackets, window, $, Mustache */\n\ndefine(\'main\',[\'require\',\'exports\',\'module\',\'text!htmlContent/projects-menu.html\',\'text!keyboard.json\'],function (require, exports, module) {\n    "use strict";\n\n    // Brackets modules\n    var ProjectManager          = brackets.getModule("project/ProjectManager"),\n        SidebarView             = brackets.getModule("project/SidebarView"),\n        PreferencesManager      = brackets.getModule("preferences/PreferencesManager"),\n        Commands                = brackets.getModule("command/Commands"),\n        CommandManager          = brackets.getModule("command/CommandManager"),\n        KeyBindingManager       = brackets.getModule("command/KeyBindingManager"),\n        Menus                   = brackets.getModule("command/Menus"),\n        MainViewManager         = brackets.getModule("view/MainViewManager"),\n        ExtensionUtils          = brackets.getModule("utils/ExtensionUtils"),\n        FileSystem              = brackets.getModule("filesystem/FileSystem"),\n        AppInit                 = brackets.getModule("utils/AppInit"),\n        KeyEvent                = brackets.getModule("utils/KeyEvent"),\n        FileUtils               = brackets.getModule("file/FileUtils"),\n        PopUpManager            = brackets.getModule("widgets/PopUpManager"),\n        Strings                 = brackets.getModule("strings"),\n        ProjectsMenuTemplate    = require("text!htmlContent/projects-menu.html");\n\n    var KeyboardPrefs = JSON.parse(require("text!keyboard.json"));\n\n    \n    /** @const {string} Recent Projects commands ID */\n    var TOGGLE_DROPDOWN = "recentProjects.toggle";\n\n    /** @const {number} Maximum number of displayed recent projects */\n    var MAX_PROJECTS = 20;\n\n    /** @type {$.Element} jQuery elements used for the dropdown menu */\n    var $dropdownItem,\n        $dropdown,\n        $links;\n\n    /**\n     * Get the stored list of recent projects, fixing up paths as appropriate.\n     * Warning: unlike most paths in Brackets, these lack a trailing "/"\n     */\n    function getRecentProjects() {\n        var recentProjects = PreferencesManager.getViewState("recentProjects") || [],\n            i;\n\n        for (i = 0; i < recentProjects.length; i++) {\n            // We have to canonicalize & then de-canonicalize the path here, since our pref format uses no trailing "/"\n            recentProjects[i] = FileUtils.stripTrailingSlash(ProjectManager.updateWelcomeProjectPath(recentProjects[i] + "/"));\n        }\n        return recentProjects;\n    }\n\n    /**\n     * Add a project to the stored list of recent projects, up to MAX_PROJECTS.\n     */\n    function add() {\n        var root = FileUtils.stripTrailingSlash(ProjectManager.getProjectRoot().fullPath),\n            recentProjects = getRecentProjects(),\n            index = recentProjects.indexOf(root);\n\n        if (index !== -1) {\n            recentProjects.splice(index, 1);\n        }\n        recentProjects.unshift(root);\n        if (recentProjects.length > MAX_PROJECTS) {\n            recentProjects = recentProjects.slice(0, MAX_PROJECTS);\n        }\n        PreferencesManager.setViewState("recentProjects", recentProjects);\n    }\n\n    /**\n     * Check the list of items to see if any of them are hovered, and if so trigger a mouseenter.\n     * Normally the mouseenter event handles this, but when a previous item is deleted and the next\n     * item moves up to be underneath the mouse, we don\'t get a mouseenter event for that item.\n     */\n    function checkHovers(pageX, pageY) {\n        $dropdown.children().each(function () {\n            var offset = $(this).offset(),\n                width  = $(this).outerWidth(),\n                height = $(this).outerHeight();\n\n            if (pageX >= offset.left && pageX <= offset.left + width &&\n                    pageY >= offset.top && pageY <= offset.top + height) {\n                $(".recent-folder-link", this).triggerHandler("mouseenter");\n            }\n        });\n    }\n\n    /**\n     * Create the "delete" button that shows up when you hover over a project.\n     */\n    function renderDelete() {\n        return $("<div id=\'recent-folder-delete\' class=\'trash-icon\'>&times;</div>")\n            .mouseup(function (e) {\n                // Don\'t let the click bubble upward.\n                e.stopPropagation();\n\n                // Remove the project from the preferences.\n                var recentProjects = getRecentProjects(),\n                    index = recentProjects.indexOf($(this).parent().data("path")),\n                    newProjects = [],\n                    i;\n                for (i = 0; i < recentProjects.length; i++) {\n                    if (i !== index) {\n                        newProjects.push(recentProjects[i]);\n                    }\n                }\n                PreferencesManager.setViewState("recentProjects", newProjects);\n                $(this).closest("li").remove();\n                checkHovers(e.pageX, e.pageY);\n\n                if (newProjects.length === 1) {\n                    $dropdown.find(".divider").remove();\n                }\n            });\n    }\n\n    /**\n     * Hide the delete button.\n     */\n    function removeDeleteButton() {\n        $("#recent-folder-delete").remove();\n    }\n\n    /**\n     * Show the delete button over a given target.\n     */\n    function addDeleteButton($target) {\n        removeDeleteButton();\n        renderDelete()\n            .css("top", $target.position().top + 6)\n            .appendTo($target);\n    }\n\n\n    /**\n     * Selects the next or previous item in the list\n     * @param {number} direction  +1 for next, -1 for prev\n     */\n    function selectNextItem(direction) {\n        var $links   = $dropdown.find("a"),\n            index    = $dropdownItem ? $links.index($dropdownItem) : (direction > 0 ? -1 : 0),\n            $newItem = $links.eq((index + direction) % $links.length);\n\n        if ($dropdownItem) {\n            $dropdownItem.removeClass("selected");\n        }\n        $newItem.addClass("selected");\n\n        $dropdownItem = $newItem;\n        removeDeleteButton();\n    }\n\n    /**\n     * Deletes the selected item and\n     * move the focus to next item in list.\n     *\n     * @return {boolean} TRUE if project is removed\n     */\n    function removeSelectedItem(e) {\n        var recentProjects = getRecentProjects(),\n            $cacheItem = $dropdownItem,\n            index = recentProjects.indexOf($cacheItem.data("path"));\n\n        // When focus is not on project item\n        if (index === -1) {\n            return false;\n        }\n\n        // remove project\n        recentProjects.splice(index, 1);\n        PreferencesManager.setViewState("recentProjects", recentProjects);\n        checkHovers(e.pageX, e.pageY);\n\n        if (recentProjects.length === 1) {\n            $dropdown.find(".divider").remove();\n        }\n        selectNextItem(+1);\n        $cacheItem.closest("li").remove();\n        return true;\n    }\n\n    /**\n     * Handles the Key Down events\n     * @param {KeyboardEvent} event\n     * @return {boolean} True if the key was handled\n     */\n    function keydownHook(event) {\n        var keyHandled = false;\n\n        switch (event.keyCode) {\n        case KeyEvent.DOM_VK_UP:\n            selectNextItem(-1);\n            keyHandled = true;\n            break;\n        case KeyEvent.DOM_VK_DOWN:\n            selectNextItem(+1);\n            keyHandled = true;\n            break;\n        case KeyEvent.DOM_VK_ENTER:\n        case KeyEvent.DOM_VK_RETURN:\n            if ($dropdownItem) {\n                $dropdownItem.trigger("click");\n            }\n            keyHandled = true;\n            break;\n        case KeyEvent.DOM_VK_BACK_SPACE:\n        case KeyEvent.DOM_VK_DELETE:\n            if ($dropdownItem) {\n                removeSelectedItem(event);\n                keyHandled = true;\n            }\n            break;\n        }\n\n        if (keyHandled) {\n            event.stopImmediatePropagation();\n            event.preventDefault();\n        }\n        return keyHandled;\n    }\n\n\n    /**\n     * Close the dropdown.\n     */\n    function closeDropdown() {\n        // Since we passed "true" for autoRemove to addPopUp(), this will\n        // automatically remove the dropdown from the DOM. Also, PopUpManager\n        // will call cleanupDropdown().\n        if ($dropdown) {\n            PopUpManager.removePopUp($dropdown);\n        }\n    }\n\n    /**\n     * Remove the various event handlers that close the dropdown. This is called by the\n     * PopUpManager when the dropdown is closed.\n     */\n    function cleanupDropdown() {\n        $("html").off("click", closeDropdown);\n        $("#project-files-container").off("scroll", closeDropdown);\n        $("#titlebar .nav").off("click", closeDropdown);\n        $dropdown = null;\n\n        MainViewManager.focusActivePane();\n\n        $(window).off("keydown", keydownHook);\n    }\n\n\n    /**\n     * Adds the click and mouse enter/leave events to the dropdown\n     */\n    function _handleListEvents() {\n        $dropdown\n            .on("click", "a", function () {\n                var $link = $(this),\n                    id    = $link.attr("id"),\n                    path  = $link.data("path");\n\n                if (path) {\n                    ProjectManager.openProject(path)\n                        .fail(function () {\n                            // Remove the project from the list only if it does not exist on disk\n                            var recentProjects = getRecentProjects(),\n                                index = recentProjects.indexOf(path);\n                            if (index !== -1) {\n                                FileSystem.resolve(path, function (err, item) {\n                                    if (err) {\n                                        recentProjects.splice(index, 1);\n                                    }\n                                });\n                            }\n                        });\n                    closeDropdown();\n\n                } else if (id === "open-folder-link") {\n                    CommandManager.execute(Commands.FILE_OPEN_FOLDER);\n                }\n\n            })\n            .on("mouseenter", "a", function () {\n                if ($dropdownItem) {\n                    $dropdownItem.removeClass("selected");\n                }\n                $dropdownItem = $(this).addClass("selected");\n\n                if ($dropdownItem.hasClass("recent-folder-link")) {\n                    // Note: we can\'t depend on the event here because this can be triggered\n                    // manually from checkHovers().\n                    addDeleteButton($(this));\n                }\n            })\n            .on("mouseleave", "a", function () {\n                var $link = $(this).removeClass("selected");\n\n                if ($link.get(0) === $dropdownItem.get(0)) {\n                    $dropdownItem = null;\n                }\n                if ($link.hasClass("recent-folder-link")) {\n                    removeDeleteButton();\n                }\n            });\n    }\n\n    /**\n     * Parses the path and returns an object with the full path, the folder name and the path without the folder.\n     * @param {string} path The full path to the folder.\n     * @return {{path: string, folder: string, rest: string}}\n     */\n    function parsePath(path) {\n        var lastSlash = path.lastIndexOf("/"), folder, rest;\n        if (lastSlash === path.length - 1) {\n            lastSlash = path.slice(0, path.length - 1).lastIndexOf("/");\n        }\n        if (lastSlash >= 0) {\n            rest = " - " + (lastSlash ? path.slice(0, lastSlash) : "/");\n            folder = path.slice(lastSlash + 1);\n        } else {\n            rest = "/";\n            folder = path;\n        }\n\n        return {path: path, folder: folder, rest: rest};\n    }\n\n    /**\n     * Create the list of projects in the dropdown menu.\n     * @return {string} The html content\n     */\n    function renderList() {\n        var recentProjects = getRecentProjects(),\n            currentProject = FileUtils.stripTrailingSlash(ProjectManager.getProjectRoot().fullPath),\n            templateVars   = {\n                projectList : [],\n                Strings     : Strings\n            };\n\n        recentProjects.forEach(function (root) {\n            if (root !== currentProject) {\n                templateVars.projectList.push(parsePath(root));\n            }\n        });\n\n        return Mustache.render(ProjectsMenuTemplate, templateVars);\n    }\n\n    /**\n     * Show or hide the recent projects dropdown.\n     *\n     * @param {{pageX:number, pageY:number}} position - the absolute position where to open the dropdown\n     */\n    function showDropdown(position) {\n        // If the dropdown is already visible, just return (so the root click handler on html\n        // will close it).\n        if ($dropdown) {\n            return;\n        }\n\n        Menus.closeAll();\n\n        $dropdown = $(renderList())\n            .css({\n                left: position.pageX,\n                top: position.pageY\n            })\n            .appendTo($("body"));\n\n        PopUpManager.addPopUp($dropdown, cleanupDropdown, true);\n\n        // TODO: should use capture, otherwise clicking on the menus doesn\'t close it. More fallout\n        // from the fact that we can\'t use the Boostrap (1.4) dropdowns.\n        $("html").on("click", closeDropdown);\n\n        // Hide the menu if the user scrolls in the project tree. Otherwise the Lion scrollbar\n        // overlaps it.\n        // TODO: This duplicates logic that\'s already in ProjectManager (which calls Menus.close()).\n        // We should fix this when the popup handling is centralized in PopupManager, as well\n        // as making Esc close the dropdown. See issue #1381.\n        $("#project-files-container").on("scroll", closeDropdown);\n        \n        // Note: PopUpManager will automatically hide the sidebar in other cases, such as when a\n        // command is run, Esc is pressed, or the menu is focused.\n\n        // Hacky: if we detect a click in the menubar, close ourselves.\n        // TODO: again, we should have centralized popup management.\n        $("#titlebar .nav").on("click", closeDropdown);\n\n        _handleListEvents();\n        $(window).on("keydown", keydownHook);\n    }\n\n\n    /**\n     * Show or hide the recent projects dropdown from the toogle command.\n     */\n    function handleKeyEvent() {\n        if (!$dropdown) {\n            if (!SidebarView.isVisible()) {\n                SidebarView.show();\n            }\n            \n            $("#project-dropdown-toggle").trigger("click");\n            \n            $dropdown.focus();\n            $links = $dropdown.find("a");\n            // By default, select the most recent project (which is at the top of the list underneath Open Folder),\n            // but if there are none, select Open Folder instead.\n            $dropdownItem = $links.eq($links.length > 1 ? 1 : 0);\n            $dropdownItem.addClass("selected");\n\n            // If focusing the dropdown caused a modal bar to close, we need to refocus the dropdown\n            window.setTimeout(function () {\n                $dropdown.focus();\n            }, 0);\n        }\n    }\n\n    PreferencesManager.convertPreferences(module, {"recentProjects": "user"}, true);\n\n    // Register command handlers\n    CommandManager.register(Strings.CMD_TOGGLE_RECENT_PROJECTS, TOGGLE_DROPDOWN, handleKeyEvent);\n    KeyBindingManager.addBinding(TOGGLE_DROPDOWN, KeyboardPrefs.recentProjects);\n\n    // Initialize extension\n    AppInit.appReady(function () {\n        ExtensionUtils.loadStyleSheet(module, "styles/styles.less");\n\n        ProjectManager.on("projectOpen", add);\n        ProjectManager.on("beforeProjectClose", add);\n    });\n\n    AppInit.htmlReady(function () {\n        $("#project-title")\n            .wrap("<div id=\'project-dropdown-toggle\' class=\'btn-alt-quiet\'></div>")\n            .after("<span class=\'dropdown-arrow\'></span>");\n\n        var cmenuAdapter = {\n            open: showDropdown,\n            close: closeDropdown,\n            isOpen: function () {\n                return !!$dropdown;\n            }\n        };\n        Menus.ContextMenu.assignContextMenuToSelector("#project-dropdown-toggle", cmenuAdapter);\n    });\n});\n\n//# sourceURL=/main.js');

//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map