eval('/*\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\n *  \n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the "Software"), \n * to deal in the Software without restriction, including without limitation \n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \n * and/or sell copies of the Software, and to permit persons to whom the \n * Software is furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \n * DEALINGS IN THE SOFTWARE.\n * \n */\n\n/*jslint vars: true, plusplus: true, devel: true, regexp: true, nomen: true, indent: 4, maxerr: 50 */\n/*global define, $, brackets */\n\n\n\ndefine(\'main\',[\'require\',\'exports\',\'module\'],function (require, exports, module) {\n    "use strict";\n\n    var EditorManager       = brackets.getModule("editor/EditorManager"),\n        QuickOpen           = brackets.getModule("search/QuickOpen"),\n        DocumentManager     = brackets.getModule("document/DocumentManager"),\n        StringMatch         = brackets.getModule("utils/StringMatch");\n\n\n   /** \n    * FileLocation class\n    * @constructor\n    * @param {string} fullPath\n    * @param {number} line\n    * @param {number} chFrom column start position\n    * @param {number} chTo column end position\n    * @param {string} id\n    */\n    function FileLocation(fullPath, line, chFrom, chTo, id) {\n        this.fullPath = fullPath;\n        this.line = line;\n        this.chFrom = chFrom;\n        this.chTo = chTo;\n        this.id = id;\n    }\n\n    /**\n     * Returns a list of information about ID\'s for a single document. This array is populated\n     * by createIDList()\n     * @type {?Array.<FileLocation>}\n     */\n    function createIDList() {\n        var doc = DocumentManager.getCurrentDocument();\n        if (!doc) {\n            return;\n        }\n        \n        var idList = [];\n        var docText = doc.getText();\n        var lines = docText.split("\\n");\n\n        var regex = new RegExp(/\\s+id\\s*?=\\s*?["\'](.*?)["\']/gi);\n        var id, chFrom, chTo, i, line;\n        for (i = 0; i < lines.length; i++) {\n            line = lines[i];\n            var info;\n            while ((info = regex.exec(line)) !== null) {\n                id = info[1];\n                // TODO: this doesn\'t handle id\'s that share the \n                // same portion of a name on the same line or when\n                // the id and value are on different lines\n                chFrom = line.indexOf(id);\n                chTo = chFrom + id.length;\n                idList.push(new FileLocation(null, i, chFrom, chTo, id));\n            }\n        }\n        return idList;\n    }\n\n\n    /**\n     * @param {string} query what the user is searching for\n     * @return {Array.<SearchResult>} sorted and filtered results that match the query\n     */\n    function search(query, matcher) {\n        var idList = matcher.idList;\n        if (!idList) {\n            idList = createIDList();\n            matcher.idList = idList;\n        }\n        query = query.slice(query.indexOf("@") + 1, query.length);\n        \n        // Filter and rank how good each match is\n        var filteredList = $.map(idList, function (fileLocation) {\n            var searchResult = matcher.match(fileLocation.id, query);\n            if (searchResult) {\n                searchResult.fileLocation = fileLocation;\n            }\n            return searchResult;\n        });\n        \n        // Sort based on ranking & basic alphabetical order\n        StringMatch.basicMatchSort(filteredList);\n\n        return filteredList;\n    }\n\n    /**\n     * @param {string} query what the user is searching for\n     * @param {boolean} returns true if this plug-in wants to provide results for this query\n     */\n    function match(query) {\n        return (query[0] === "@");\n    }\n\n\n    /**\n     * Scroll to the selected item in the current document (unless no query string entered yet,\n     * in which case the topmost list item is irrelevant)\n     * @param {?SearchResult} selectedItem\n     * @param {string} query\n     * @param {boolean} explicit False if this is only highlighted due to being at top of list after search()\n     */\n    function itemFocus(selectedItem, query, explicit) {\n        if (!selectedItem || (query.length < 2 && !explicit)) {\n            return;\n        }\n        var fileLocation = selectedItem.fileLocation;\n        \n        var from = {line: fileLocation.line, ch: fileLocation.chFrom};\n        var to = {line: fileLocation.line, ch: fileLocation.chTo};\n        EditorManager.getCurrentFullEditor().setSelection(from, to, true);\n    }\n\n    function itemSelect(selectedItem, query) {\n        itemFocus(selectedItem, query, true);\n    }\n\n\n    QuickOpen.addQuickOpenPlugin(\n        {\n            name: "html ids",\n            languageIds: ["html"],\n            search: search,\n            match: match,\n            itemFocus: itemFocus,\n            itemSelect: itemSelect\n        }\n    );\n\n});\n//# sourceURL=/main.js');
//# sourceMappingURL=main.js
//# sourceMappingURL=main.js.map