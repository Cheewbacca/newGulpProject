{"version":3,"file":"main.js","sources":["../../../thirdparty/text/text.js","HtmlTags.json!text","HtmlAttributes.json!text","main.js"],"names":["eval"],"mappings":"AAAAA,KAAA,yqfCCAA,KAAA,01OCAAA,KAAA,grjBAEAA,KCHA","sourcesContent":["eval(\"/**\\n * @license RequireJS text 2.0.10 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\\n * Available via the MIT or new BSD license.\\n * see: http://github.com/requirejs/text for details\\n */\\n/*jslint regexp: true */\\n/*global require, XMLHttpRequest, ActiveXObject,\\n  define, window, process, Packages,\\n  java, location, Components, FileUtils */\\n\\ndefine(\\'text\\',[\\'module\\'], function (module) {\\n    \\'use strict\\';\\n\\n    var text, fs, Cc, Ci, xpcIsWindows,\\n        progIds = [\\'Msxml2.XMLHTTP\\', \\'Microsoft.XMLHTTP\\', \\'Msxml2.XMLHTTP.4.0\\'],\\n        xmlRegExp = /^\\\\s*<\\\\?xml(\\\\s)+version=[\\\\\\'\\\\\\\"](\\\\d)*.(\\\\d)*[\\\\\\'\\\\\\\"](\\\\s)*\\\\?>/im,\\n        bodyRegExp = /<body[^>]*>\\\\s*([\\\\s\\\\S]+)\\\\s*<\\\\/body>/im,\\n        hasLocation = typeof location !== \\'undefined\\' && location.href,\\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\\\:/, \\'\\'),\\n        defaultHostName = hasLocation && location.hostname,\\n        defaultPort = hasLocation && (location.port || undefined),\\n        buildMap = {},\\n        masterConfig = (module.config && module.config()) || {};\\n\\n    text = {\\n        version: \\'2.0.10\\',\\n\\n        strip: function (content) {\\n            //Strips <?xml ...?> declarations so that external SVG and XML\\n            //documents can be added to a document without worry. Also, if the string\\n            //is an HTML document, only the part inside the body tag is returned.\\n            if (content) {\\n                content = content.replace(xmlRegExp, \\\"\\\");\\n                var matches = content.match(bodyRegExp);\\n                if (matches) {\\n                    content = matches[1];\\n                }\\n            } else {\\n                content = \\\"\\\";\\n            }\\n            return content;\\n        },\\n\\n        jsEscape: function (content) {\\n            return content.replace(/([\\'\\\\\\\\])/g, \\'\\\\\\\\$1\\')\\n                .replace(/[\\\\f]/g, \\\"\\\\\\\\f\\\")\\n                .replace(/[\\\\b]/g, \\\"\\\\\\\\b\\\")\\n                .replace(/[\\\\n]/g, \\\"\\\\\\\\n\\\")\\n                .replace(/[\\\\t]/g, \\\"\\\\\\\\t\\\")\\n                .replace(/[\\\\r]/g, \\\"\\\\\\\\r\\\")\\n                .replace(/[\\\\u2028]/g, \\\"\\\\\\\\u2028\\\")\\n                .replace(/[\\\\u2029]/g, \\\"\\\\\\\\u2029\\\");\\n        },\\n\\n        createXhr: masterConfig.createXhr || function () {\\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\\n            var xhr, i, progId;\\n            if (typeof XMLHttpRequest !== \\\"undefined\\\") {\\n                return new XMLHttpRequest();\\n            } else if (typeof ActiveXObject !== \\\"undefined\\\") {\\n                for (i = 0; i < 3; i += 1) {\\n                    progId = progIds[i];\\n                    try {\\n                        xhr = new ActiveXObject(progId);\\n                    } catch (e) {}\\n\\n                    if (xhr) {\\n                        progIds = [progId];  // so faster next time\\n                        break;\\n                    }\\n                }\\n            }\\n\\n            return xhr;\\n        },\\n\\n        /**\\n         * Parses a resource name into its component parts. Resource names\\n         * look like: module/name.ext!strip, where the !strip part is\\n         * optional.\\n         * @param {String} name the resource name\\n         * @returns {Object} with properties \\\"moduleName\\\", \\\"ext\\\" and \\\"strip\\\"\\n         * where strip is a boolean.\\n         */\\n        parseName: function (name) {\\n            var modName, ext, temp,\\n                strip = false,\\n                index = name.indexOf(\\\".\\\"),\\n                isRelative = name.indexOf(\\'./\\') === 0 ||\\n                             name.indexOf(\\'../\\') === 0;\\n\\n            if (index !== -1 && (!isRelative || index > 1)) {\\n                modName = name.substring(0, index);\\n                ext = name.substring(index + 1, name.length);\\n            } else {\\n                modName = name;\\n            }\\n\\n            temp = ext || modName;\\n            index = temp.indexOf(\\\"!\\\");\\n            if (index !== -1) {\\n                //Pull off the strip arg.\\n                strip = temp.substring(index + 1) === \\\"strip\\\";\\n                temp = temp.substring(0, index);\\n                if (ext) {\\n                    ext = temp;\\n                } else {\\n                    modName = temp;\\n                }\\n            }\\n\\n            return {\\n                moduleName: modName,\\n                ext: ext,\\n                strip: strip\\n            };\\n        },\\n\\n        xdRegExp: /^((\\\\w+)\\\\:)?\\\\/\\\\/([^\\\\/\\\\\\\\]+)/,\\n\\n        /**\\n         * Is an URL on another domain. Only works for browser use, returns\\n         * false in non-browser environments. Only used to know if an\\n         * optimized .js version of a text resource should be loaded\\n         * instead.\\n         * @param {String} url\\n         * @returns Boolean\\n         */\\n        useXhr: function (url, protocol, hostname, port) {\\n            var uProtocol, uHostName, uPort,\\n                match = text.xdRegExp.exec(url);\\n            if (!match) {\\n                return true;\\n            }\\n            uProtocol = match[2];\\n            uHostName = match[3];\\n\\n            uHostName = uHostName.split(\\':\\');\\n            uPort = uHostName[1];\\n            uHostName = uHostName[0];\\n\\n            return (!uProtocol || uProtocol === protocol) &&\\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\\n                   ((!uPort && !uHostName) || uPort === port);\\n        },\\n\\n        finishLoad: function (name, strip, content, onLoad) {\\n            content = strip ? text.strip(content) : content;\\n            if (masterConfig.isBuild) {\\n                buildMap[name] = content;\\n            }\\n            onLoad(content);\\n        },\\n\\n        load: function (name, req, onLoad, config) {\\n            //Name has format: some.module.filext!strip\\n            //The strip part is optional.\\n            //if strip is present, then that means only get the string contents\\n            //inside a body tag in an HTML string. For XML/SVG content it means\\n            //removing the <?xml ...?> declarations so the content can be inserted\\n            //into the current doc without problems.\\n\\n            // Do not bother with the work if a build and text will\\n            // not be inlined.\\n            if (config.isBuild && !config.inlineText) {\\n                onLoad();\\n                return;\\n            }\\n\\n            masterConfig.isBuild = config.isBuild;\\n\\n            var parsed = text.parseName(name),\\n                nonStripName = parsed.moduleName +\\n                    (parsed.ext ? \\'.\\' + parsed.ext : \\'\\'),\\n                url = req.toUrl(nonStripName),\\n                useXhr = (masterConfig.useXhr) ||\\n                         text.useXhr;\\n\\n            // Do not load if it is an empty: url\\n            if (url.indexOf(\\'empty:\\') === 0) {\\n                onLoad();\\n                return;\\n            }\\n\\n            //Load the text. Use XHR if possible and in a browser.\\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\\n                text.get(url, function (content) {\\n                    text.finishLoad(name, parsed.strip, content, onLoad);\\n                }, function (err) {\\n                    if (onLoad.error) {\\n                        onLoad.error(err);\\n                    }\\n                });\\n            } else {\\n                //Need to fetch the resource across domains. Assume\\n                //the resource has been optimized into a JS module. Fetch\\n                //by the module name + extension, but do not include the\\n                //!strip part to avoid file system issues.\\n                req([nonStripName], function (content) {\\n                    text.finishLoad(parsed.moduleName + \\'.\\' + parsed.ext,\\n                                    parsed.strip, content, onLoad);\\n                });\\n            }\\n        },\\n\\n        write: function (pluginName, moduleName, write, config) {\\n            if (buildMap.hasOwnProperty(moduleName)) {\\n                var content = text.jsEscape(buildMap[moduleName]);\\n                write.asModule(pluginName + \\\"!\\\" + moduleName,\\n                               \\\"define(function () { return \\'\\\" +\\n                                   content +\\n                               \\\"\\';});\\\\n\\\");\\n            }\\n        },\\n\\n        writeFile: function (pluginName, moduleName, req, write, config) {\\n            var parsed = text.parseName(moduleName),\\n                extPart = parsed.ext ? \\'.\\' + parsed.ext : \\'\\',\\n                nonStripName = parsed.moduleName + extPart,\\n                //Use a \\'.js\\' file name so that it indicates it is a\\n                //script that can be loaded across domains.\\n                fileName = req.toUrl(parsed.moduleName + extPart) + \\'.js\\';\\n\\n            //Leverage own load() method to load plugin value, but only\\n            //write out values that do not have the strip argument,\\n            //to avoid any potential issues with ! in file names.\\n            text.load(nonStripName, req, function (value) {\\n                //Use own write() method to construct full module value.\\n                //But need to create shell that translates writeFile\\'s\\n                //write() to the right interface.\\n                var textWrite = function (contents) {\\n                    return write(fileName, contents);\\n                };\\n                textWrite.asModule = function (moduleName, contents) {\\n                    return write.asModule(moduleName, fileName, contents);\\n                };\\n\\n                text.write(pluginName, nonStripName, textWrite, config);\\n            }, config);\\n        }\\n    };\\n\\n    if (masterConfig.env === \\'node\\' || (!masterConfig.env &&\\n            typeof process !== \\\"undefined\\\" &&\\n            process.versions &&\\n            !!process.versions.node &&\\n            !process.versions[\\'node-webkit\\'])) {\\n        //Using special require.nodeRequire, something added by r.js.\\n        fs = require.nodeRequire(\\'fs\\');\\n\\n        text.get = function (url, callback, errback) {\\n            try {\\n                var file = fs.readFileSync(url, \\'utf8\\');\\n                //Remove BOM (Byte Mark Order) from utf8 files if it is there.\\n                if (file.indexOf(\\'\\\\uFEFF\\') === 0) {\\n                    file = file.substring(1);\\n                }\\n                callback(file);\\n            } catch (e) {\\n                errback(e);\\n            }\\n        };\\n    } else if (masterConfig.env === \\'xhr\\' || (!masterConfig.env &&\\n            text.createXhr())) {\\n        text.get = function (url, callback, errback, headers) {\\n            var xhr = text.createXhr(), header;\\n            xhr.open(\\'GET\\', url, true);\\n\\n            //Allow plugins direct access to xhr headers\\n            if (headers) {\\n                for (header in headers) {\\n                    if (headers.hasOwnProperty(header)) {\\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\\n                    }\\n                }\\n            }\\n\\n            //Allow overrides specified in config\\n            if (masterConfig.onXhr) {\\n                masterConfig.onXhr(xhr, url);\\n            }\\n\\n            xhr.onreadystatechange = function (evt) {\\n                var status, err;\\n                //Do not explicitly handle errors, those should be\\n                //visible via console output in the browser.\\n                if (xhr.readyState === 4) {\\n                    status = xhr.status;\\n                    if (status > 399 && status < 600) {\\n                        //An http 4xx or 5xx error. Signal an error.\\n                        err = new Error(url + \\' HTTP status: \\' + status);\\n                        err.xhr = xhr;\\n                        errback(err);\\n                    } else {\\n                        callback(xhr.responseText);\\n                    }\\n\\n                    if (masterConfig.onXhrComplete) {\\n                        masterConfig.onXhrComplete(xhr, url);\\n                    }\\n                }\\n            };\\n            xhr.send(null);\\n        };\\n    } else if (masterConfig.env === \\'rhino\\' || (!masterConfig.env &&\\n            typeof Packages !== \\'undefined\\' && typeof java !== \\'undefined\\')) {\\n        //Why Java, why is this so awkward?\\n        text.get = function (url, callback) {\\n            var stringBuffer, line,\\n                encoding = \\\"utf-8\\\",\\n                file = new java.io.File(url),\\n                lineSeparator = java.lang.System.getProperty(\\\"line.separator\\\"),\\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\\n                content = \\'\\';\\n            try {\\n                stringBuffer = new java.lang.StringBuffer();\\n                line = input.readLine();\\n\\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\\n                // http://www.unicode.org/faq/utf_bom.html\\n\\n                // Note that when we use utf-8, the BOM should appear as \\\"EF BB BF\\\", but it doesn\\'t due to this bug in the JDK:\\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\\n                    // Eat the BOM, since we\\'ve already found the encoding on this file,\\n                    // and we plan to concatenating this buffer with others; the BOM should\\n                    // only appear at the top of a file.\\n                    line = line.substring(1);\\n                }\\n\\n                if (line !== null) {\\n                    stringBuffer.append(line);\\n                }\\n\\n                while ((line = input.readLine()) !== null) {\\n                    stringBuffer.append(lineSeparator);\\n                    stringBuffer.append(line);\\n                }\\n                //Make sure we return a JavaScript string and not a Java string.\\n                content = String(stringBuffer.toString()); //String\\n            } finally {\\n                input.close();\\n            }\\n            callback(content);\\n        };\\n    } else if (masterConfig.env === \\'xpconnect\\' || (!masterConfig.env &&\\n            typeof Components !== \\'undefined\\' && Components.classes &&\\n            Components.interfaces)) {\\n        //Avert your gaze!\\n        Cc = Components.classes,\\n        Ci = Components.interfaces;\\n        Components.utils[\\'import\\'](\\'resource://gre/modules/FileUtils.jsm\\');\\n        xpcIsWindows = (\\'@mozilla.org/windows-registry-key;1\\' in Cc);\\n\\n        text.get = function (url, callback) {\\n            var inStream, convertStream, fileObj,\\n                readData = {};\\n\\n            if (xpcIsWindows) {\\n                url = url.replace(/\\\\//g, \\'\\\\\\\\\\');\\n            }\\n\\n            fileObj = new FileUtils.File(url);\\n\\n            //XPCOM, you so crazy\\n            try {\\n                inStream = Cc[\\'@mozilla.org/network/file-input-stream;1\\']\\n                           .createInstance(Ci.nsIFileInputStream);\\n                inStream.init(fileObj, 1, 0, false);\\n\\n                convertStream = Cc[\\'@mozilla.org/intl/converter-input-stream;1\\']\\n                                .createInstance(Ci.nsIConverterInputStream);\\n                convertStream.init(inStream, \\\"utf-8\\\", inStream.available(),\\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\\n\\n                convertStream.readString(inStream.available(), readData);\\n                convertStream.close();\\n                inStream.close();\\n                callback(readData.value);\\n            } catch (e) {\\n                throw new Error((fileObj && fileObj.path || \\'\\') + \\': \\' + e);\\n            }\\n        };\\n    }\\n    return text;\\n});\\n\\n//# sourceURL=/var/src/brackets/brackets-src/src/thirdparty/text/text.js\");\n\n","\neval(\"define(\\'text!HtmlTags.json\\',[],function () { return \\'{     \\\\n    \\\"a\\\":          { \\\"attributes\\\": [\\\"href\\\", \\\"hreflang\\\", \\\"media\\\", \\\"rel\\\", \\\"target\\\", \\\"type\\\"] },\\\\n    \\\"abbr\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"address\\\":    { \\\"attributes\\\": [] },\\\\n    \\\"area\\\":       { \\\"attributes\\\": [\\\"alt\\\", \\\"coords\\\", \\\"href\\\", \\\"hreflang\\\", \\\"media\\\", \\\"rel\\\", \\\"shape\\\", \\\"target\\\", \\\"type\\\"] },\\\\n    \\\"article\\\":    { \\\"attributes\\\": [] },\\\\n    \\\"aside\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"audio\\\":      { \\\"attributes\\\": [\\\"autoplay\\\", \\\"controls\\\", \\\"loop\\\", \\\"mediagroup\\\", \\\"muted\\\", \\\"preload\\\", \\\"src\\\"] },\\\\n    \\\"b\\\":          { \\\"attributes\\\": [] },\\\\n    \\\"base\\\":       { \\\"attributes\\\": [\\\"href\\\", \\\"target\\\"] },\\\\n    \\\"bdi\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"bdo\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"big\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"blockquote\\\": { \\\"attributes\\\": [\\\"cite\\\"] },\\\\n    \\\"body\\\":       { \\\"attributes\\\": [\\\"onafterprint\\\", \\\"onbeforeprint\\\", \\\"onbeforeunload\\\", \\\"onhashchange\\\", \\\"onmessage\\\", \\\"onoffline\\\", \\\"ononline\\\",\\\\n                                   \\\"onpagehide\\\", \\\"onpageshow\\\", \\\"onpopstate\\\", \\\"onredo\\\", \\\"onresize\\\", \\\"onstorage\\\", \\\"onundo\\\", \\\"onunload\\\"] },\\\\n    \\\"br\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"button\\\":     { \\\"attributes\\\": [\\\"autofocus\\\", \\\"disabled\\\", \\\"form\\\", \\\"formaction\\\", \\\"formenctype\\\", \\\"formmethod\\\", \\\"formnovalidate\\\", \\\"formtarget\\\", \\\\n                                   \\\"name\\\", \\\"type\\\", \\\"value\\\"] },\\\\n    \\\"canvas\\\":     { \\\"attributes\\\": [\\\"height\\\", \\\"width\\\"] },\\\\n    \\\"caption\\\":    { \\\"attributes\\\": [] },\\\\n    \\\"cite\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"code\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"col\\\":        { \\\"attributes\\\": [\\\"span\\\"] },\\\\n    \\\"colgroup\\\":   { \\\"attributes\\\": [\\\"span\\\"] },\\\\n    \\\"command\\\":    { \\\"attributes\\\": [\\\"checked\\\", \\\"disabled\\\", \\\"icon\\\", \\\"label\\\", \\\"radiogroup\\\", \\\"type\\\"] },\\\\n    \\\"datalist\\\":   { \\\"attributes\\\": [] },\\\\n    \\\"dd\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"del\\\":        { \\\"attributes\\\": [\\\"cite\\\", \\\"datetime\\\"] },\\\\n    \\\"details\\\":    { \\\"attributes\\\": [\\\"open\\\"] },\\\\n    \\\"dfn\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"dialog\\\":     { \\\"attributes\\\": [\\\"open\\\"] },\\\\n    \\\"div\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"dl\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"dt\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"em\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"embed\\\":      { \\\"attributes\\\": [\\\"height\\\", \\\"src\\\", \\\"type\\\", \\\"width\\\"] },\\\\n    \\\"fieldset\\\":   { \\\"attributes\\\": [\\\"disabled\\\", \\\"form\\\", \\\"name\\\"] },\\\\n    \\\"figcaption\\\": { \\\"attributes\\\": [] },\\\\n    \\\"figure\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"footer\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"form\\\":       { \\\"attributes\\\": [\\\"accept-charset\\\", \\\"action\\\", \\\"autocomplete\\\", \\\"enctype\\\", \\\"method\\\", \\\"name\\\", \\\"novalidate\\\", \\\"target\\\"] },\\\\n    \\\"h1\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"h2\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"h3\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"h4\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"h5\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"h6\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"head\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"header\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"hgroup\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"hr\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"html\\\":       { \\\"attributes\\\": [\\\"manifest\\\", \\\"xml:lang\\\", \\\"xmlns\\\"] },\\\\n    \\\"i\\\":          { \\\"attributes\\\": [] },\\\\n    \\\"iframe\\\":     { \\\"attributes\\\": [\\\"height\\\", \\\"name\\\", \\\"sandbox\\\", \\\"seamless\\\", \\\"src\\\", \\\"srcdoc\\\", \\\"width\\\"] },\\\\n    \\\"ilayer\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"img\\\":        { \\\"attributes\\\": [\\\"alt\\\", \\\"height\\\", \\\"ismap\\\", \\\"longdesc\\\", \\\"src\\\", \\\"usemap\\\", \\\"width\\\"] },\\\\n    \\\"input\\\":      { \\\"attributes\\\": [\\\"accept\\\", \\\"alt\\\", \\\"autocomplete\\\", \\\"autofocus\\\", \\\"checked\\\", \\\"dirname\\\", \\\"disabled\\\", \\\"form\\\", \\\"formaction\\\", \\\"formenctype\\\", \\\"formmethod\\\", \\\\n                                   \\\"formnovalidate\\\", \\\"formtarget\\\", \\\"height\\\", \\\"list\\\", \\\"max\\\", \\\"maxlength\\\", \\\"min\\\", \\\"multiple\\\", \\\"name\\\", \\\"pattern\\\", \\\"placeholder\\\", \\\"readonly\\\", \\\\n                                   \\\"required\\\", \\\"size\\\", \\\"src\\\", \\\"step\\\", \\\"type\\\", \\\"value\\\", \\\"width\\\"] },\\\\n    \\\"ins\\\":        { \\\"attributes\\\": [\\\"cite\\\", \\\"datetime\\\"] },\\\\n    \\\"kbd\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"keygen\\\":     { \\\"attributes\\\": [\\\"autofocus\\\", \\\"challenge\\\", \\\"disabled\\\", \\\"form\\\", \\\"keytype\\\", \\\"name\\\"] },\\\\n    \\\"label\\\":      { \\\"attributes\\\": [\\\"for\\\", \\\"form\\\"] },\\\\n    \\\"legend\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"li\\\":         { \\\"attributes\\\": [\\\"value\\\"] },\\\\n    \\\"link\\\":       { \\\"attributes\\\": [\\\"disabled\\\", \\\"href\\\", \\\"hreflang\\\", \\\"media\\\", \\\"rel\\\", \\\"sizes\\\", \\\"type\\\"] },\\\\n    \\\"main\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"map\\\":        { \\\"attributes\\\": [\\\"name\\\"] },\\\\n    \\\"mark\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"marquee\\\":    { \\\"attributes\\\": [\\\"align\\\", \\\"behavior\\\", \\\"bgcolor\\\", \\\"direction\\\", \\\"height\\\", \\\"hspace\\\", \\\"loop\\\", \\\"scrollamount\\\", \\\"scrolldelay\\\", \\\"truespeed\\\", \\\"vspace\\\", \\\"width\\\"] },\\\\n    \\\"menu\\\":       { \\\"attributes\\\": [\\\"label\\\", \\\"type\\\"] },\\\\n    \\\"meta\\\":       { \\\"attributes\\\": [\\\"charset\\\", \\\"content\\\", \\\"http-equiv\\\", \\\"name\\\"] },\\\\n    \\\"meter\\\":      { \\\"attributes\\\": [\\\"form\\\", \\\"high\\\", \\\"low\\\", \\\"max\\\", \\\"min\\\", \\\"optimum\\\", \\\"value\\\"] },\\\\n    \\\"nav\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"noscript\\\":   { \\\"attributes\\\": [] },\\\\n    \\\"object\\\":     { \\\"attributes\\\": [\\\"archive\\\", \\\"codebase\\\", \\\"codetype\\\", \\\"data\\\", \\\"declare\\\", \\\"form\\\", \\\"height\\\", \\\"name\\\", \\\"standby\\\", \\\"type\\\", \\\"usemap\\\", \\\"width\\\"] },\\\\n    \\\"ol\\\":         { \\\"attributes\\\": [\\\"reversed\\\", \\\"start\\\", \\\"type\\\"] },\\\\n    \\\"optgroup\\\":   { \\\"attributes\\\": [\\\"disabled\\\", \\\"label\\\"] },\\\\n    \\\"option\\\":     { \\\"attributes\\\": [\\\"disabled\\\", \\\"label\\\", \\\"selected\\\", \\\"value\\\"] },\\\\n    \\\"output\\\":     { \\\"attributes\\\": [\\\"for\\\", \\\"form\\\", \\\"name\\\"] },\\\\n    \\\"p\\\":          { \\\"attributes\\\": [] },\\\\n    \\\"param\\\":      { \\\"attributes\\\": [\\\"name\\\", \\\"value\\\"] },\\\\n    \\\"pre\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"progress\\\":   { \\\"attributes\\\": [\\\"form\\\", \\\"max\\\", \\\"value\\\"] },\\\\n    \\\"q\\\":          { \\\"attributes\\\": [\\\"cite\\\"] },\\\\n    \\\"rp\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"rt\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"ruby\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"samp\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"script\\\":     { \\\"attributes\\\": [\\\"async\\\", \\\"charset\\\", \\\"defer\\\", \\\"src\\\", \\\"type\\\"] },\\\\n    \\\"section\\\":    { \\\"attributes\\\": [] },\\\\n    \\\"select\\\":     { \\\"attributes\\\": [\\\"autofocus\\\", \\\"disabled\\\", \\\"form\\\", \\\"multiple\\\", \\\"name\\\", \\\"required\\\", \\\"size\\\"] },\\\\n    \\\"small\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"source\\\":     { \\\"attributes\\\": [\\\"media\\\", \\\"src\\\", \\\"type\\\"] },\\\\n    \\\"span\\\":       { \\\"attributes\\\": [] },\\\\n    \\\"strong\\\":     { \\\"attributes\\\": [] },\\\\n    \\\"style\\\":      { \\\"attributes\\\": [\\\"disabled\\\", \\\"media\\\", \\\"scoped\\\", \\\"type\\\"] },\\\\n    \\\"sub\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"summary\\\":    { \\\"attributes\\\": [] },\\\\n    \\\"sup\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"table\\\":      { \\\"attributes\\\": [\\\"border\\\"] },\\\\n    \\\"tbody\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"td\\\":         { \\\"attributes\\\": [\\\"colspan\\\", \\\"headers\\\", \\\"rowspan\\\"] },\\\\n    \\\"textarea\\\":   { \\\"attributes\\\": [\\\"autofocus\\\", \\\"cols\\\", \\\"dirname\\\", \\\"disabled\\\", \\\"form\\\", \\\"label\\\", \\\"maxlength\\\", \\\"name\\\", \\\"placeholder\\\", \\\"readonly\\\", \\\"required\\\", \\\"rows\\\", \\\"wrap\\\"] },\\\\n    \\\"tfoot\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"th\\\":         { \\\"attributes\\\": [\\\"colspan\\\", \\\"headers\\\", \\\"rowspan\\\", \\\"scope\\\"] },\\\\n    \\\"thead\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"time\\\":       { \\\"attributes\\\": [\\\"datetime\\\", \\\"pubdate\\\"] },\\\\n    \\\"title\\\":      { \\\"attributes\\\": [] },\\\\n    \\\"tr\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"track\\\":      { \\\"attributes\\\": [\\\"default\\\", \\\"kind\\\", \\\"label\\\", \\\"src\\\", \\\"srclang\\\"] },\\\\n    \\\"tt\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"ul\\\":         { \\\"attributes\\\": [] },\\\\n    \\\"var\\\":        { \\\"attributes\\\": [] },\\\\n    \\\"video\\\":      { \\\"attributes\\\": [\\\"autoplay\\\", \\\"controls\\\", \\\"height\\\", \\\"loop\\\", \\\"mediagroup\\\", \\\"muted\\\", \\\"poster\\\", \\\"preload\\\", \\\"src\\\", \\\"width\\\"] },\\\\n    \\\"wbr\\\":        { \\\"attributes\\\": [] }\\\\n}\\\\n\\';});\\n\\n//# sourceURL=/text!HtmlTags.json\");\n\n","\neval(\"define(\\'text!HtmlAttributes.json\\',[],function () { return \\'{\\\\n    \\\"accesskey\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"class\\\":              { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\", \\\"type\\\": \\\"cssStyle\\\" },\\\\n    \\\"contenteditable\\\":    { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\", \\\"type\\\": \\\"boolean\\\" },\\\\n    \\\"contextmenu\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"dir\\\":                { \\\"attribOption\\\": [\\\"ltr\\\", \\\"rtl\\\"], \\\"global\\\": \\\"true\\\"},\\\\n    \\\"draggable\\\":          { \\\"attribOption\\\": [\\\"auto\\\", \\\"false\\\", \\\"true\\\"], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"dropzone\\\":           { \\\"attribOption\\\": [\\\"copy\\\", \\\"move\\\", \\\"link\\\"], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"hidden\\\":             { \\\"attribOption\\\": [\\\"hidden\\\"], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"id\\\":                 { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\", \\\"type\\\": \\\"cssId\\\" },\\\\n    \\\"lang\\\":               { \\\"attribOption\\\": [\\\"ab\\\", \\\"aa\\\", \\\"af\\\", \\\"sq\\\", \\\"am\\\", \\\"ar\\\", \\\"an\\\", \\\"hy\\\", \\\"as\\\", \\\"ay\\\", \\\"az\\\", \\\"ba\\\", \\\"eu\\\", \\\"bn\\\", \\\"dz\\\", \\\"bh\\\", \\\"bi\\\", \\\"br\\\", \\\\n                                             \\\"bg\\\", \\\"my\\\", \\\"be\\\", \\\"km\\\", \\\"ca\\\", \\\"zh\\\", \\\"co\\\", \\\"hr\\\", \\\"cs\\\", \\\"da\\\", \\\"nl\\\", \\\"en\\\", \\\"eo\\\", \\\"et\\\", \\\"fo\\\", \\\"fa\\\", \\\"fi\\\", \\\"fr\\\", \\\\n                                             \\\"fy\\\", \\\"gl\\\", \\\"gd\\\", \\\"gv\\\", \\\"ka\\\", \\\"de\\\", \\\"el\\\", \\\"kl\\\", \\\"gn\\\", \\\"gu\\\", \\\"ht\\\", \\\"ha\\\", \\\"he\\\", \\\"hi\\\", \\\"hu\\\", \\\"is\\\", \\\"io\\\", \\\"id\\\", \\\\n                                             \\\"ia\\\", \\\"ie\\\", \\\"iu\\\", \\\"ik\\\", \\\"ga\\\", \\\"it\\\", \\\"ja\\\", \\\"jv\\\", \\\"kn\\\", \\\"ks\\\", \\\"kk\\\", \\\"rw\\\", \\\"ky\\\", \\\"rn\\\", \\\"ko\\\", \\\"ku\\\", \\\"lo\\\", \\\"la\\\", \\\\n                                             \\\"lv\\\", \\\"li\\\", \\\"ln\\\", \\\"lt\\\", \\\"mk\\\", \\\"mg\\\", \\\"ms\\\", \\\"ml\\\", \\\"mt\\\", \\\"mi\\\", \\\"mr\\\", \\\"mo\\\", \\\"mn\\\", \\\"na\\\", \\\"ne\\\", \\\"no\\\", \\\"oc\\\", \\\"or\\\", \\\\n                                             \\\"om\\\", \\\"ps\\\", \\\"pl\\\", \\\"pt\\\", \\\"pa\\\", \\\"qu\\\", \\\"rm\\\", \\\"ro\\\", \\\"ru\\\", \\\"sz\\\", \\\"sm\\\", \\\"sg\\\", \\\"sa\\\", \\\"sr\\\", \\\"sh\\\", \\\"st\\\", \\\"tn\\\", \\\"sn\\\", \\\\n                                             \\\"ii\\\", \\\"sd\\\", \\\"si\\\", \\\"ss\\\", \\\"sk\\\", \\\"sl\\\", \\\"so\\\", \\\"es\\\", \\\"su\\\", \\\"sw\\\", \\\"sv\\\", \\\"tl\\\", \\\"tg\\\", \\\"ta\\\", \\\"tt\\\", \\\"te\\\", \\\"th\\\", \\\"bo\\\", \\\\n                                             \\\"ti\\\", \\\"to\\\", \\\"ts\\\", \\\"tr\\\", \\\"tk\\\", \\\"tw\\\", \\\"ug\\\", \\\"uk\\\", \\\"ur\\\", \\\"uz\\\", \\\"vi\\\", \\\"vo\\\", \\\"wa\\\", \\\"cy\\\", \\\"wo\\\", \\\"xh\\\", \\\"yi\\\", \\\"yo\\\", \\\\n                                             \\\"zu\\\"], \\\\n                            \\\"global\\\": \\\"true\\\" },\\\\n    \\\"role\\\":               { \\\"attribOption\\\": [\\\"alert\\\", \\\"alertdialog\\\", \\\"article\\\", \\\"application\\\", \\\"banner\\\", \\\"button\\\", \\\"checkbox\\\", \\\"columnheader\\\", \\\"combobox\\\", \\\\n                                             \\\"complementary\\\", \\\"contentinfo\\\", \\\"definition\\\", \\\"directory\\\", \\\"dialog\\\", \\\"document\\\", \\\"form\\\", \\\"grid\\\", \\\"gridcell\\\", \\\\n                                             \\\"group\\\", \\\"heading\\\", \\\"img\\\", \\\"link\\\", \\\"list\\\", \\\"listbox\\\", \\\"listitem\\\", \\\"log\\\", \\\"main\\\", \\\"marquee\\\", \\\"math\\\", \\\"menu\\\", \\\\n                                             \\\"menubar\\\", \\\"menuitem\\\", \\\"menuitemcheckbox\\\", \\\"menuitemradio\\\", \\\"navigation\\\", \\\"note\\\", \\\"option\\\", \\\"presentation\\\", \\\\n                                             \\\"progressbar\\\", \\\"radio\\\", \\\"radiogroup\\\", \\\"region\\\", \\\"row\\\", \\\"rowgroup\\\", \\\"rowheader\\\", \\\"scrollbar\\\", \\\"search\\\", \\\\n                                             \\\"separator\\\", \\\"slider\\\", \\\"spinbutton\\\", \\\"status\\\", \\\"tab\\\", \\\"tablist\\\", \\\"tabpanel\\\", \\\"textbox\\\", \\\"timer\\\", \\\"toolbar\\\", \\\\n                                             \\\"tooltip\\\", \\\"tree\\\", \\\"treegrid\\\", \\\"treeitem\\\"], \\\\n                            \\\"global\\\": \\\"true\\\" },\\\\n    \\\"spellcheck\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\", \\\"type\\\": \\\"boolean\\\" },\\\\n    \\\"style\\\":              { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\", \\\"type\\\": \\\"style\\\" },\\\\n    \\\"tabindex\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"title\\\":              { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n  \\\\n    \\\"onabort\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onblur\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oncanplay\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oncanplaythrough\\\":   { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onchange\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onclick\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oncontextmenu\\\":      { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oncuechange\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondblclick\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondrag\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondragend\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondragenter\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondragleave\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondragover\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondragstart\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondrop\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ondurationchange\\\":   { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onemptied\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onended\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onerror\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onfocus\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oninput\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"oninvalid\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onkeydown\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onkeypress\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onkeyup\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onload\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onloadeddata\\\":       { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onloadedmetadata\\\":   { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onloadstart\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmousedown\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmousemove\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmouseout\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmouseover\\\":        { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmouseup\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onmousewheel\\\":       { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onpause\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onplay\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onplaying\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onprogress\\\":         { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onratechange\\\":       { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onreadystatechange\\\": { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onreset\\\":            { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onscroll\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onseeked\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onseeking\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onselect\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onshow\\\":             { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onstalled\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onsubmit\\\":           { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onsuspend\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"ontimeupdate\\\":       { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onvolumechange\\\":     { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n    \\\"onwaiting\\\":          { \\\"attribOption\\\": [], \\\"global\\\": \\\"true\\\" },\\\\n      \\\\n    \\\"accept\\\":             { \\\"attribOption\\\": [\\\"text/html\\\", \\\"text/plain\\\", \\\"application/msword\\\", \\\"application/msexcel\\\", \\\"application/postscript\\\",\\\\n                                             \\\"application/x-zip-compressed\\\", \\\"application/pdf\\\", \\\"application/rtf\\\", \\\"video/x-msvideo\\\", \\\"video/quicktime\\\",\\\\n                                             \\\"video/x-mpeg2\\\", \\\"audio/x-pn/realaudio\\\", \\\"audio/x-mpeg\\\", \\\"audio/x-waw\\\", \\\"audio/x-aiff\\\", \\\"audio/basic\\\",\\\\n                                             \\\"image/tiff\\\", \\\"image/jpeg\\\", \\\"image/gif\\\", \\\"image/x-png\\\", \\\"image/x-photo-cd\\\", \\\"image/x-MS-bmp\\\", \\\"image/x-rgb\\\",\\\\n                                             \\\"image/x-portable-pixmap\\\", \\\"image/x-portable-greymap\\\", \\\"image/x-portablebitmap\\\"] },\\\\n    \\\"accept-charset\\\":     { \\\"attribOption\\\": [] },\\\\n    \\\"action\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"align\\\":              { \\\"attribOption\\\": [] },\\\\n    \\\"alt\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"archive\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"async\\\":              { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"autocomplete\\\":       { \\\"attribOption\\\": [\\\"off\\\", \\\"on\\\"] },\\\\n    \\\"autofocus\\\":          { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"autoplay\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"behavior\\\":           { \\\"attribOption\\\": [\\\"scroll\\\", \\\"slide\\\", \\\"alternate\\\"] },\\\\n    \\\"bgcolor\\\":            { \\\"attribOption\\\": [], \\\"type\\\": \\\"color\\\" },\\\\n    \\\"border\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"challenge\\\":          { \\\"attribOption\\\": [] },\\\\n    \\\"charset\\\":            { \\\"attribOption\\\": [\\\"iso-8859-1\\\", \\\"utf-8\\\", \\\"shift_jis\\\", \\\"euc-jp\\\", \\\"big5\\\", \\\"gb2312\\\", \\\"euc-kr\\\", \\\"din_66003-kr\\\", \\\"ns_4551-1-kr\\\", \\\\n                                             \\\"sen_850200_b\\\", \\\"csISO2022jp\\\", \\\"hz-gb-2312\\\", \\\"ibm852\\\", \\\"ibm866\\\", \\\"irv\\\", \\\"iso-2022-kr\\\", \\\"iso-8859-2\\\", \\\\n                                             \\\"iso-8859-3\\\", \\\"iso-8859-4\\\", \\\"iso-8859-5\\\", \\\"iso-8859-6\\\", \\\"iso-8859-7\\\", \\\"iso-8859-8\\\", \\\"iso-8859-9\\\", \\\"koi8-r\\\", \\\\n                                             \\\"ks_c_5601\\\", \\\"windows-1250\\\", \\\"windows-1251\\\", \\\"windows-1252\\\", \\\"windows-1253\\\", \\\"windows-1254\\\", \\\"windows-1255\\\", \\\\n                                             \\\"windows-1256\\\", \\\"windows-1257\\\", \\\"windows-1258\\\", \\\"windows-874\\\", \\\"x-euc\\\", \\\"asmo-708\\\", \\\"dos-720\\\", \\\"dos-862\\\", \\\\n                                             \\\"dos-874\\\", \\\"cp866\\\", \\\"cp1256\\\"] },\\\\n    \\\"checked\\\":            { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"cite\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"codebase\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"codetype\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"cols\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"colspan\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"content\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"controls\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"coords\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"data\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"datetime\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"declare\\\":            { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"default\\\":            { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"defer\\\":              { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"direction\\\":          { \\\"attribOption\\\": [\\\"left\\\", \\\"right\\\", \\\"up\\\", \\\"down\\\"] },\\\\n    \\\"dirname\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"disabled\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"enctype\\\":            { \\\"attribOption\\\": [\\\"application/x-www-form-urlencoded\\\", \\\"multipart/form-data\\\", \\\"text/plain\\\"] },\\\\n    \\\"for\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"form\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"formaction\\\":         { \\\"attribOption\\\": [] },\\\\n    \\\"formenctype\\\":        { \\\"attribOption\\\": [\\\"application/x-www-form-urlencoded\\\", \\\"multipart/form-data\\\", \\\"text/plain\\\"] },\\\\n    \\\"formmethod\\\":         { \\\"attribOption\\\": [\\\"get\\\", \\\"post\\\"] },\\\\n    \\\"formnovalidate\\\":     { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"formtarget\\\":         { \\\"attribOption\\\": [\\\"_blank\\\", \\\"_parent\\\", \\\"_self\\\", \\\"_top\\\"] },\\\\n    \\\"headers\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"height\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"high\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"href\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"hreflang\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"hspace\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"http-equiv\\\":         { \\\"attribOption\\\": [\\\"content-type\\\", \\\"default-style\\\", \\\"refresh\\\"] },\\\\n    \\\"icon\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"ismap\\\":              { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"keytype\\\":            { \\\"attribOption\\\": [\\\"dsa\\\", \\\"ec\\\", \\\"rsa\\\"] },\\\\n    \\\"kind\\\":               { \\\"attribOption\\\": [\\\"captions\\\", \\\"chapters\\\", \\\"descriptions\\\", \\\"metadata\\\", \\\"subtitles\\\"] },\\\\n    \\\"label\\\":              { \\\"attribOption\\\": [] },\\\\n    \\\"list\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"longdesc\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"loop\\\":               { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"low\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"manifest\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"max\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"maxlength\\\":          { \\\"attribOption\\\": [] },\\\\n    \\\"media\\\":              { \\\"attribOption\\\": [\\\"screen\\\", \\\"tty\\\", \\\"tv\\\", \\\"projection\\\", \\\"handheld\\\", \\\"print\\\", \\\"aural\\\", \\\"braille\\\", \\\"embossed\\\", \\\"speech\\\", \\\"all\\\", \\\"width\\\",\\\\n                                             \\\"min-width\\\", \\\"max-width\\\", \\\"height\\\", \\\"min-height\\\", \\\"max-height\\\", \\\"device-width\\\", \\\"min-device-width\\\", \\\"max-device-width\\\",\\\\n                                             \\\"device-height\\\", \\\"min-device-height\\\", \\\"max-device-height\\\", \\\"orientation\\\", \\\"aspect-ratio\\\", \\\"min-aspect-ratio\\\",\\\\n                                             \\\"max-aspect-ratio\\\", \\\"device-aspect-ratio\\\", \\\"min-device-aspect-ratio\\\", \\\"max-device-aspect-ratio\\\", \\\"color\\\",\\\\n                                             \\\"min-color\\\", \\\"max-color\\\", \\\"color-index\\\", \\\"min-color-index\\\", \\\"max-color-index\\\", \\\"monochrome\\\", \\\"min-monochrome\\\",\\\\n                                             \\\"max-monochrome\\\", \\\"resolution\\\", \\\"min-resolution\\\", \\\"max-resolution\\\", \\\"scan\\\", \\\"grid\\\"],\\\\n                            \\\"allowMultipleValues\\\": \\\"true\\\" },\\\\n    \\\"mediagroup\\\":         { \\\"attribOption\\\": [] },\\\\n    \\\"method\\\":             { \\\"attribOption\\\": [\\\"get\\\", \\\"post\\\"] },\\\\n    \\\"min\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"multiple\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"muted\\\":              { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"name\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"meta/name\\\":          { \\\"attribOption\\\": [\\\"application-name\\\", \\\"author\\\", \\\"description\\\", \\\"generator\\\", \\\"keywords\\\"] },\\\\n    \\\"novalidate\\\":         { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"open\\\":               { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"optimum\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"pattern\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"placeholder\\\":        { \\\"attribOption\\\": [] },\\\\n    \\\"poster\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"preload\\\":            { \\\"attribOption\\\": [\\\"auto\\\", \\\"metadata\\\", \\\"none\\\"] },\\\\n    \\\"pubdate\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"radiogroup\\\":         { \\\"attribOption\\\": [] },\\\\n    \\\"rel\\\":                { \\\"attribOption\\\": [\\\"alternate\\\", \\\"author\\\", \\\"bookmark\\\", \\\"help\\\", \\\"license\\\", \\\"next\\\", \\\"nofollow\\\", \\\"noreferrer\\\", \\\"prefetch\\\", \\\\n                                             \\\"prev\\\", \\\"search\\\", \\\"sidebar\\\", \\\"tag\\\", \\\"external\\\"] },\\\\n    \\\"link/rel\\\":           { \\\"attribOption\\\": [\\\"alternate\\\", \\\"author\\\", \\\"help\\\", \\\"icon\\\", \\\"license\\\", \\\"next\\\", \\\"pingback\\\", \\\"prefetch\\\", \\\"prev\\\", \\\"search\\\", \\\\n                                             \\\"sidebar\\\", \\\"stylesheet\\\", \\\"tag\\\"] },\\\\n    \\\"readonly\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"required\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"reversed\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"rows\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"rowspan\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"sandbox\\\":            { \\\"attribOption\\\": [\\\"allow-forms\\\", \\\"allow-same-origin\\\", \\\"allow-scripts\\\", \\\"allow-top-navigation\\\"] },\\\\n    \\\"seamless\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"selected\\\":           { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"scope\\\":              { \\\"attribOption\\\": [\\\"col\\\", \\\"colgroup\\\", \\\"row\\\", \\\"rowgroup\\\"] },\\\\n    \\\"scoped\\\":             { \\\"attribOption\\\": [], \\\"type\\\": \\\"boolean\\\" },\\\\n    \\\"scrollamount\\\":       { \\\"attribOption\\\": [] },\\\\n    \\\"scrolldelay\\\":        { \\\"attribOption\\\": [] },\\\\n    \\\"shape\\\":              { \\\"attribOption\\\": [\\\"circle\\\", \\\"default\\\", \\\"poly\\\",\\\"rect\\\"] },\\\\n    \\\"size\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"sizes\\\":              { \\\"attribOption\\\": [\\\"any\\\"] },\\\\n    \\\"span\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"src\\\":                { \\\"attribOption\\\": [] },\\\\n    \\\"srcdoc\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"srclang\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"standby\\\":            { \\\"attribOption\\\": [] },\\\\n    \\\"start\\\":              { \\\"attribOption\\\": [] },\\\\n    \\\"step\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"target\\\":             { \\\"attribOption\\\": [\\\"_blank\\\", \\\"_parent\\\", \\\"_self\\\", \\\"_top\\\"] },\\\\n    \\\"truespeed\\\":          { \\\"attribOption\\\": [], \\\"type\\\": \\\"flag\\\" },\\\\n    \\\"type\\\":               { \\\"attribOption\\\": [] },\\\\n    \\\"button/type\\\":        { \\\"attribOption\\\": [\\\"button\\\", \\\"reset\\\", \\\"submit\\\"] },\\\\n    \\\"command/type\\\":       { \\\"attribOption\\\": [\\\"command\\\", \\\"checkbox\\\", \\\"radio\\\"] },\\\\n    \\\"link/type\\\":          { \\\"attribOption\\\": [\\\"text/css\\\"] },\\\\n    \\\"menu/type\\\":          { \\\"attribOption\\\": [\\\"context\\\", \\\"list\\\", \\\"toolbar\\\"] },\\\\n    \\\"ol/type\\\":            { \\\"attribOption\\\": [\\\"1\\\", \\\"a\\\", \\\"A\\\", \\\"i\\\", \\\"I\\\"] },\\\\n    \\\"script/type\\\":        { \\\"attribOption\\\": [\\\"text/javascript\\\", \\\"text/ecmascript\\\", \\\"text/jscript\\\", \\\"text/livescript\\\", \\\"text/tcl\\\", \\\"text/x-javascript\\\", \\\"text/x-ecmascript\\\", \\\\n                                             \\\"application/x-javascript\\\", \\\"application/x-ecmascript\\\", \\\"application/javascript\\\", \\\"application/ecmascript\\\"] },\\\\n    \\\"style/type\\\":         { \\\"attribOption\\\": [\\\"text/css\\\"] },\\\\n    \\\"input/type\\\":         { \\\"attribOption\\\": [\\\"button\\\", \\\"checkbox\\\", \\\"color\\\", \\\"date\\\", \\\"datetime\\\", \\\"datetime-local\\\", \\\"email\\\", \\\"file\\\", \\\"hidden\\\", \\\"image\\\", \\\"month\\\",\\\\n                                             \\\"number\\\", \\\"password\\\", \\\"radio\\\", \\\"range\\\", \\\"reset\\\", \\\"search\\\", \\\"submit\\\", \\\"tel\\\", \\\"text\\\", \\\"time\\\", \\\"url\\\", \\\"week\\\"] },\\\\n    \\\"usemap\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"value\\\":              { \\\"attribOption\\\": [] },\\\\n    \\\"vspace\\\":             { \\\"attribOption\\\": [] },\\\\n    \\\"width\\\":              { \\\"attribOption\\\": [] },\\\\n    \\\"wrap\\\":               { \\\"attribOption\\\": [\\\"hard\\\", \\\"soft\\\"] },\\\\n    \\\"xml:lang\\\":           { \\\"attribOption\\\": [] },\\\\n    \\\"xmlns\\\":              { \\\"attribOption\\\": [] }\\\\n}\\';});\\n\\n//# sourceURL=/text!HtmlAttributes.json\");\n\n","eval(\"/*\\n * Copyright (c) 2012 Adobe Systems Incorporated. All rights reserved.\\n *  \\n * Permission is hereby granted, free of charge, to any person obtaining a\\n * copy of this software and associated documentation files (the \\\"Software\\\"), \\n * to deal in the Software without restriction, including without limitation \\n * the rights to use, copy, modify, merge, publish, distribute, sublicense, \\n * and/or sell copies of the Software, and to permit persons to whom the \\n * Software is furnished to do so, subject to the following conditions:\\n *  \\n * The above copyright notice and this permission notice shall be included in\\n * all copies or substantial portions of the Software.\\n *  \\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \\n * DEALINGS IN THE SOFTWARE.\\n * \\n */\\n\\n\\n/*jslint vars: true, plusplus: true, devel: true, nomen: true, indent: 4, maxerr: 50 */\\n/*global define, brackets, $ */\\n\\ndefine(\\'main\\',[\\'require\\',\\'exports\\',\\'module\\',\\'text!HtmlTags.json\\',\\'text!HtmlAttributes.json\\'],function (require, exports, module) {\\n    \\\"use strict\\\";\\n\\n    // Load dependent modules\\n    var AppInit             = brackets.getModule(\\\"utils/AppInit\\\"),\\n        CodeHintManager     = brackets.getModule(\\\"editor/CodeHintManager\\\"),\\n        HTMLUtils           = brackets.getModule(\\\"language/HTMLUtils\\\"),\\n        HTMLTags            = require(\\\"text!HtmlTags.json\\\"),\\n        HTMLAttributes      = require(\\\"text!HtmlAttributes.json\\\"),\\n        tags,\\n        attributes;\\n\\n    /**\\n     * @constructor\\n     */\\n    function TagHints() {\\n        this.exclusion = null;\\n    }\\n    \\n    /**\\n     * Check whether the exclusion is still the same as text after the cursor. \\n     * If not, reset it to null.\\n     */\\n    TagHints.prototype.updateExclusion = function () {\\n        var textAfterCursor;\\n        if (this.exclusion && this.tagInfo) {\\n            textAfterCursor = this.tagInfo.tagName.substr(this.tagInfo.position.offset);\\n            if (!CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                this.exclusion = null;\\n            }\\n        }\\n    };\\n    \\n    /**\\n     * Determines whether HTML tag hints are available in the current editor\\n     * context.\\n     * \\n     * @param {Editor} editor \\n     * A non-null editor object for the active window.\\n     *\\n     * @param {string} implicitChar \\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {boolean} \\n     * Determines whether the current provider is able to provide hints for\\n     * the given editor context and, in case implicitChar is non- null,\\n     * whether it is appropriate to do so.\\n     */\\n    TagHints.prototype.hasHints = function (editor, implicitChar) {\\n        var pos = editor.getCursorPos();\\n        \\n        this.tagInfo = HTMLUtils.getTagInfo(editor, pos);\\n        this.editor = editor;\\n        if (implicitChar === null) {\\n            if (this.tagInfo.position.tokenType === HTMLUtils.TAG_NAME) {\\n                if (this.tagInfo.position.offset >= 0) {\\n                    if (this.tagInfo.position.offset === 0) {\\n                        this.exclusion = this.tagInfo.tagName;\\n                    } else {\\n                        this.updateExclusion();\\n                    }\\n                    return true;\\n                }\\n            }\\n            return false;\\n        } else {\\n            if (implicitChar === \\\"<\\\") {\\n                this.exclusion = this.tagInfo.tagName;\\n                return true;\\n            }\\n            return false;\\n        }\\n    };\\n       \\n    /**\\n     * Returns a list of availble HTML tag hints if possible for the current\\n     * editor context. \\n     *\\n     * @return {jQuery.Deferred|{\\n     *              hints: Array.<string|jQueryObject>,\\n     *              match: string,\\n     *              selectInitial: boolean,\\n     *              handleWideResults: boolean}}\\n     * Null if the provider wishes to end the hinting session. Otherwise, a\\n     * response object that provides:\\n     * 1. a sorted array hints that consists of strings\\n     * 2. a string match that is used by the manager to emphasize matching\\n     *    substrings when rendering the hint list\\n     * 3. a boolean that indicates whether the first result, if one exists,\\n     *    should be selected by default in the hint list window.\\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\\n     *    to allow result string to stretch width of display.\\n     */\\n    TagHints.prototype.getHints = function (implicitChar) {\\n        var query,\\n            result;\\n\\n        this.tagInfo = HTMLUtils.getTagInfo(this.editor, this.editor.getCursorPos());\\n        if (this.tagInfo.position.tokenType === HTMLUtils.TAG_NAME) {\\n            if (this.tagInfo.position.offset >= 0) {\\n                this.updateExclusion();\\n                query = this.tagInfo.tagName.slice(0, this.tagInfo.position.offset);\\n                result = $.map(tags, function (value, key) {\\n                    if (key.indexOf(query) === 0) {\\n                        return key;\\n                    }\\n                }).sort();\\n                \\n                return {\\n                    hints: result,\\n                    match: query,\\n                    selectInitial: true,\\n                    handleWideResults: false\\n                };\\n            }\\n        }\\n        \\n        return null;\\n    };\\n    \\n    /**\\n     * Inserts a given HTML tag hint into the current editor context. \\n     * \\n     * @param {string} hint \\n     * The hint to be inserted into the editor context.\\n     *\\n     * @return {boolean} \\n     * Indicates whether the manager should follow hint insertion with an\\n     * additional explicit hint request.\\n     */\\n    TagHints.prototype.insertHint = function (completion) {\\n        var start = {line: -1, ch: -1},\\n            end = {line: -1, ch: -1},\\n            cursor = this.editor.getCursorPos(),\\n            charCount = 0;\\n\\n        if (this.tagInfo.position.tokenType === HTMLUtils.TAG_NAME) {\\n            var textAfterCursor = this.tagInfo.tagName.substr(this.tagInfo.position.offset);\\n            if (CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                charCount = this.tagInfo.position.offset;\\n            } else {\\n                charCount = this.tagInfo.tagName.length;\\n            }\\n        }\\n\\n        end.line = start.line = cursor.line;\\n        start.ch = cursor.ch - this.tagInfo.position.offset;\\n        end.ch = start.ch + charCount;\\n\\n        if (this.exclusion || completion !== this.tagInfo.tagName) {\\n            if (start.ch !== end.ch) {\\n                this.editor.document.replaceRange(completion, start, end);\\n            } else {\\n                this.editor.document.replaceRange(completion, start);\\n            }\\n            this.exclusion = null;\\n        }\\n        \\n        return false;\\n    };\\n\\n    /**\\n     * @constructor\\n     */\\n    function AttrHints() {\\n        this.globalAttributes = this.readGlobalAttrHints();\\n        this.cachedHints = null;\\n        this.exclusion = \\\"\\\";\\n    }\\n\\n    /**\\n     * @private\\n     * Parse the code hints from JSON data and extract all hints from property names.\\n     * @return {!Array.<string>} An array of code hints read from the JSON data source.\\n     */\\n    AttrHints.prototype.readGlobalAttrHints = function () {\\n        return $.map(attributes, function (value, key) {\\n            if (value.global === \\\"true\\\") {\\n                return key;\\n            }\\n        });\\n    };\\n\\n    /**\\n     * Helper function that determines the possible value hints for a given html tag/attribute name pair\\n     * \\n     * @param {{queryStr: string}} query\\n     * The current query\\n     *\\n     * @param {string} tagName \\n     * HTML tag name\\n     *\\n     * @param {string} attrName \\n     * HTML attribute name\\n     *\\n     * @return {{hints: Array.<string>|$.Deferred, sortFunc: ?Function}} \\n     * The (possibly deferred) hints and the sort function to use on thise hints.\\n     */\\n    AttrHints.prototype._getValueHintsForAttr = function (query, tagName, attrName) {\\n        // We look up attribute values with tagName plus a slash and attrName first.  \\n        // If the lookup fails, then we fall back to look up with attrName only. Most \\n        // of the attributes in JSON are using attribute name only as their properties, \\n        // but in some cases like \\\"type\\\" attribute, we have different properties like \\n        // \\\"script/type\\\", \\\"link/type\\\" and \\\"button/type\\\".\\n        var hints = [],\\n            sortFunc = null;\\n        \\n        var tagPlusAttr = tagName + \\\"/\\\" + attrName,\\n            attrInfo = attributes[tagPlusAttr] || attributes[attrName];\\n        \\n        if (attrInfo) {\\n            if (attrInfo.type === \\\"boolean\\\") {\\n                hints = [\\\"false\\\", \\\"true\\\"];\\n            } else if (attrInfo.attribOption) {\\n                hints = attrInfo.attribOption;\\n            }\\n        }\\n        \\n        return { hints: hints, sortFunc: sortFunc };\\n    };\\n    \\n    /**\\n     * Check whether the exclusion is still the same as text after the cursor. \\n     * If not, reset it to null.\\n     *\\n     * @param {boolean} attrNameOnly\\n     * true to indicate that we update the exclusion only if the cursor is inside an attribute name context.\\n     * Otherwise, we also update exclusion for attribute value context.\\n     */\\n    AttrHints.prototype.updateExclusion = function (attrNameOnly) {\\n        if (this.exclusion && this.tagInfo) {\\n            var tokenType = this.tagInfo.position.tokenType,\\n                offset = this.tagInfo.position.offset,\\n                textAfterCursor;\\n            \\n            if (tokenType === HTMLUtils.ATTR_NAME) {\\n                textAfterCursor = this.tagInfo.attr.name.substr(offset);\\n            } else if (!attrNameOnly && tokenType === HTMLUtils.ATTR_VALUE) {\\n                textAfterCursor = this.tagInfo.attr.value.substr(offset);\\n            }\\n            if (!CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                this.exclusion = null;\\n            }\\n        }\\n    };\\n    \\n    /**\\n     * Determines whether HTML attribute hints are available in the current \\n     * editor context.\\n     * \\n     * @param {Editor} editor \\n     * A non-null editor object for the active window.\\n     *\\n     * @param {string} implicitChar \\n     * Either null, if the hinting request was explicit, or a single character\\n     * that represents the last insertion and that indicates an implicit\\n     * hinting request.\\n     *\\n     * @return {boolean} \\n     * Determines whether the current provider is able to provide hints for\\n     * the given editor context and, in case implicitChar is non-null,\\n     * whether it is appropriate to do so.\\n     */\\n    AttrHints.prototype.hasHints = function (editor, implicitChar) {\\n        var pos = editor.getCursorPos(),\\n            tokenType,\\n            offset,\\n            query;\\n        \\n        this.editor = editor;\\n        this.tagInfo = HTMLUtils.getTagInfo(editor, pos);\\n        tokenType = this.tagInfo.position.tokenType;\\n        offset = this.tagInfo.position.offset;\\n        if (implicitChar === null) {\\n            query = null;\\n             \\n            if (tokenType === HTMLUtils.ATTR_NAME) {\\n                if (offset >= 0) {\\n                    query = this.tagInfo.attr.name.slice(0, offset);\\n                }\\n            } else if (tokenType === HTMLUtils.ATTR_VALUE) {\\n                if (this.tagInfo.position.offset >= 0) {\\n                    query = this.tagInfo.attr.value.slice(0, offset);\\n                } else {\\n                    // We get negative offset for a quoted attribute value with some leading whitespaces \\n                    // as in <a rel= \\\"rtl\\\" where the cursor is just to the right of the \\\"=\\\".\\n                    // So just set the queryStr to an empty string. \\n                    query = \\\"\\\";\\n                }\\n                \\n                // If we\\'re at an attribute value, check if it\\'s an attribute name that has hintable values.\\n                if (this.tagInfo.attr.name) {\\n                    var hintsAndSortFunc = this._getValueHintsForAttr({queryStr: query},\\n                                                                      this.tagInfo.tagName,\\n                                                                      this.tagInfo.attr.name);\\n                    var hints = hintsAndSortFunc.hints;\\n                    if (hints instanceof Array) {\\n                        // If we got synchronous hints, check if we have something we\\'ll actually use\\n                        var i, foundPrefix = false;\\n                        for (i = 0; i < hints.length; i++) {\\n                            if (hints[i].indexOf(query) === 0) {\\n                                foundPrefix = true;\\n                                break;\\n                            }\\n                        }\\n                        if (!foundPrefix) {\\n                            query = null;\\n                        }\\n                    }\\n                }\\n            }\\n\\n            if (offset >= 0) {\\n                if (tokenType === HTMLUtils.ATTR_NAME && offset === 0) {\\n                    this.exclusion = this.tagInfo.attr.name;\\n                } else {\\n                    this.updateExclusion(false);\\n                }\\n            }\\n            \\n            return query !== null;\\n        } else {\\n            if (implicitChar === \\\" \\\" || implicitChar === \\\"\\'\\\" ||\\n                    implicitChar === \\\"\\\\\\\"\\\" || implicitChar === \\\"=\\\") {\\n                if (tokenType === HTMLUtils.ATTR_NAME) {\\n                    this.exclusion = this.tagInfo.attr.name;\\n                }\\n                return true;\\n            }\\n            return false;\\n        }\\n    };\\n    \\n    /**\\n     * Returns a list of availble HTML attribute hints if possible for the \\n     * current editor context. \\n     *\\n     * @return {jQuery.Deferred|{\\n     *              hints: Array.<string|jQueryObject>,\\n     *              match: string,\\n     *              selectInitial: boolean,\\n     *              handleWideResults: boolean}}\\n     * Null if the provider wishes to end the hinting session. Otherwise, a\\n     * response object that provides:\\n     * 1. a sorted array hints that consists of strings\\n     * 2. a string match that is used by the manager to emphasize matching\\n     *    substrings when rendering the hint list\\n     * 3. a boolean that indicates whether the first result, if one exists,\\n     *    should be selected by default in the hint list window.\\n     * 4. handleWideResults, a boolean (or undefined) that indicates whether\\n     *    to allow result string to stretch width of display.\\n     */\\n    AttrHints.prototype.getHints = function (implicitChar) {\\n        var cursor = this.editor.getCursorPos(),\\n            query = {queryStr: null},\\n            tokenType,\\n            offset,\\n            result = [];\\n \\n        this.tagInfo = HTMLUtils.getTagInfo(this.editor, cursor);\\n        tokenType = this.tagInfo.position.tokenType;\\n        offset = this.tagInfo.position.offset;\\n        if (tokenType === HTMLUtils.ATTR_NAME || tokenType === HTMLUtils.ATTR_VALUE) {\\n            query.tag = this.tagInfo.tagName;\\n            \\n            if (offset >= 0) {\\n                if (tokenType === HTMLUtils.ATTR_NAME) {\\n                    query.queryStr = this.tagInfo.attr.name.slice(0, offset);\\n                } else {\\n                    query.queryStr = this.tagInfo.attr.value.slice(0, offset);\\n                    query.attrName = this.tagInfo.attr.name;\\n                }\\n                this.updateExclusion(false);\\n            } else if (tokenType === HTMLUtils.ATTR_VALUE) {\\n                // We get negative offset for a quoted attribute value with some leading whitespaces \\n                // as in <a rel= \\\"rtl\\\" where the cursor is just to the right of the \\\"=\\\".\\n                // So just set the queryStr to an empty string. \\n                query.queryStr = \\\"\\\";\\n                query.attrName = this.tagInfo.attr.name;\\n            }\\n\\n            query.usedAttr = HTMLUtils.getTagAttributes(this.editor, cursor);\\n        }\\n\\n        if (query.tag && query.queryStr !== null) {\\n            var tagName = query.tag,\\n                attrName = query.attrName,\\n                filter = query.queryStr,\\n                unfiltered = [],\\n                hints = [],\\n                sortFunc = null;\\n\\n            if (attrName) {\\n                var hintsAndSortFunc = this._getValueHintsForAttr(query, tagName, attrName);\\n                hints = hintsAndSortFunc.hints;\\n                sortFunc = hintsAndSortFunc.sortFunc;\\n                \\n            } else if (tags && tags[tagName] && tags[tagName].attributes) {\\n                unfiltered = tags[tagName].attributes.concat(this.globalAttributes);\\n                hints = $.grep(unfiltered, function (attr, i) {\\n                    return $.inArray(attr, query.usedAttr) < 0;\\n                });\\n            }\\n            \\n            if (hints instanceof Array && hints.length) {\\n                console.assert(!result.length);\\n                result = $.map(hints, function (item) {\\n                    if (item.indexOf(filter) === 0) {\\n                        return item;\\n                    }\\n                }).sort(sortFunc);\\n                return {\\n                    hints: result,\\n                    match: query.queryStr,\\n                    selectInitial: true,\\n                    handleWideResults: false\\n                };\\n            } else if (hints instanceof Object && hints.hasOwnProperty(\\\"done\\\")) { // Deferred hints\\n                var deferred = $.Deferred();\\n                hints.done(function (asyncHints) {\\n                    deferred.resolveWith(this, [{\\n                        hints: asyncHints,\\n                        match: query.queryStr,\\n                        selectInitial: true,\\n                        handleWideResults: false\\n                    }]);\\n                });\\n                return deferred;\\n            } else {\\n                return null;\\n            }\\n        }\\n\\n        \\n    };\\n    \\n    /**\\n     * Inserts a given HTML attribute hint into the current editor context.\\n     * \\n     * @param {string} hint \\n     * The hint to be inserted into the editor context.\\n     * \\n     * @return {boolean} \\n     * Indicates whether the manager should follow hint insertion with an\\n     * additional explicit hint request.\\n     */\\n    AttrHints.prototype.insertHint = function (completion) {\\n        var cursor = this.editor.getCursorPos(),\\n            start = {line: -1, ch: -1},\\n            end = {line: -1, ch: -1},\\n            tokenType = this.tagInfo.position.tokenType,\\n            offset = this.tagInfo.position.offset,\\n            charCount = 0,\\n            insertedName = false,\\n            replaceExistingOne = this.tagInfo.attr.valueAssigned,\\n            endQuote = \\\"\\\",\\n            shouldReplace = true,\\n            textAfterCursor;\\n\\n        if (tokenType === HTMLUtils.ATTR_NAME) {\\n            textAfterCursor = this.tagInfo.attr.name.substr(offset);\\n            if (CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                charCount = offset;\\n                replaceExistingOne = false;\\n            } else {\\n                charCount = this.tagInfo.attr.name.length;\\n            }\\n            // Append an equal sign and two double quotes if the current attr is not an empty attr\\n            // and then adjust cursor location before the last quote that we just inserted.\\n            if (!replaceExistingOne && attributes && attributes[completion] &&\\n                    attributes[completion].type !== \\\"flag\\\") {\\n                completion += \\\"=\\\\\\\"\\\\\\\"\\\";\\n                insertedName = true;\\n            } else if (completion === this.tagInfo.attr.name) {\\n                shouldReplace = false;\\n            }\\n        } else if (tokenType === HTMLUtils.ATTR_VALUE) {\\n            textAfterCursor = this.tagInfo.attr.value.substr(offset);\\n            if (CodeHintManager.hasValidExclusion(this.exclusion, textAfterCursor)) {\\n                charCount = offset;\\n                // Set exclusion to null only after attribute value insertion,\\n                // not after attribute name insertion since we need to keep it \\n                // for attribute value insertion.\\n                this.exclusion = null;\\n            } else {\\n                charCount = this.tagInfo.attr.value.length;\\n            }\\n            \\n            if (!this.tagInfo.attr.hasEndQuote) {\\n                endQuote = this.tagInfo.attr.quoteChar;\\n                if (endQuote) {\\n                    completion += endQuote;\\n                } else if (offset === 0) {\\n                    completion = \\\"\\\\\\\"\\\" + completion + \\\"\\\\\\\"\\\";\\n                }\\n            } else if (completion === this.tagInfo.attr.value) {\\n                shouldReplace = false;\\n            }\\n        }\\n\\n        end.line = start.line = cursor.line;\\n        start.ch = cursor.ch - offset;\\n        end.ch = start.ch + charCount;\\n\\n        if (shouldReplace) {\\n            if (start.ch !== end.ch) {\\n                this.editor.document.replaceRange(completion, start, end);\\n            } else {\\n                this.editor.document.replaceRange(completion, start);\\n            }\\n        }\\n\\n        if (insertedName) {\\n            this.editor.setCursorPos(start.line, start.ch + completion.length - 1);\\n\\n            // Since we\\'re now inside the double-quotes we just inserted,\\n            // immediately pop up the attribute value hint.\\n            return true;\\n        } else if (tokenType === HTMLUtils.ATTR_VALUE && this.tagInfo.attr.hasEndQuote) {\\n            // Move the cursor to the right of the existing end quote after value insertion.\\n            this.editor.setCursorPos(start.line, start.ch + completion.length + 1);\\n        }\\n        \\n        return false;\\n    };\\n\\n    AppInit.appReady(function () {\\n        // Parse JSON files\\n        tags = JSON.parse(HTMLTags);\\n        attributes = JSON.parse(HTMLAttributes);\\n        \\n        // Register code hint providers\\n        var tagHints = new TagHints();\\n        var attrHints = new AttrHints();\\n        CodeHintManager.registerHintProvider(tagHints, [\\\"html\\\"], 0);\\n        CodeHintManager.registerHintProvider(attrHints, [\\\"html\\\"], 0);\\n    \\n        // For unit testing\\n        exports.tagHintProvider = tagHints;\\n        exports.attrHintProvider = attrHints;\\n    });\\n});\\n\\n//# sourceURL=/main.js\");\n\n"]}